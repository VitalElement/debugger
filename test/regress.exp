#!/home/toshok/src/expect-5.42/expect -f

set mono mono
set mdb "/home/toshok/src/mono/debugger/wrapper/mdb.exe"
set max_repeat 10
set timeout 45
set mdb_prompt "\[\(mdb\)\]"
set verbose 2
set file "/usr/lib/mono/1.0/mcs.exe"
set args "/d:NET_1_1 /d:ONLY_1_1 -g /target:exe /out:mcs.exe cs-parser.cs @mcs.exe.sources"
set compilation_succeeded 0
set num_steps 1
set start_time [clock format [clock seconds] -format "%D %T"]

proc pass {msg} {
    global start_time

    send_user "$start_time PASS: $msg"
}

proc fail {msg} {
    global start_time

    send_user "$start_time FAIL: $msg"
}

proc mdb_start {} {
    global mdb_prompt
    global spawn_id
    global file
    global args
    global mono
    global mdb

    set res [spawn -ignore HUP $mono $mdb]
    if { $res < 0 || $res == "" } {
	fail "Spawning $mdb failed."
    }

    expect {
	-re "Mono Debugger.*$mdb_prompt $" {
	    send_user "Mono Debugger initialized\n"
	}
	timeout {
	    fail "(timeout) Mono Debugger not starting"
	    exit 1
	}
    }
}

proc mdb_send_step { } {
    global num_steps

    set num_steps [expr $num_steps + 1]

    set v [expr int( rand() * 1000)]
    if {$v == 453} {
	mdb_send "finish"
    } elseif {$v < 100} {
	mdb_send "next"
    } else {
	mdb_send "step"
    }
}

proc mdb_step_until_finished { } {
    global mdb_prompt
    global compilation_succeeded

    expect {
	-re "No program to debug.\[\r\n\]+" {
	    return
	}
	-re "^ \[0-9\]+\[^\r\n\]+\[\r\n\]+" {
	    exp_continue
	}
	-re "Compilation succeeded" {
	    set compilation_succeeded 1
	    mdb_send_step
	    exp_continue
	}
	-re "Process @\[0-9\]+ terminated normally.*$mdb_prompt $" {
	    mdb_send_step
	    exp_continue
	}
	-re "Process @\[0-9\]+ stopped.*$mdb_prompt $" {
	    mdb_send_step
	    exp_continue
	}
	-re "Process already started.*$mdb_prompt $" {
	    mdb_send_step
	    exp_continue
	}
	-re "^ERROR:(\[^\n\r\]+)" {
	    set message $expect_out(1,string)
	    fail "Could not step: $message\n"
	    exit 1
	}
	-re "No program loaded.\[\r\n\]+" {
	    fail "no child to debug\n"
	    exit 1
	}
	timeout {
	    fail "timeout waiting for step prompt\n"
	    exit 1
	}
    }

}

proc mdb_send {command} {
    send $command\r\n
    expect -re "$command\[\r\n\]+" {}
    return 0
}

proc mdb_style {style} {
    global mdb_prompt;

    mdb_send "style $style"
    expect {
	-re "Current style interface:.*$mdb_prompt $" {
	    return 0
	}
	-re ".*$mdb_prompt $" {
	    send_user "FAIL: Error setting style\n"
	    exit 1
	}
	timeout {
	    send_user "FAIL: timeout setting style\n"
	    exit 1
	}
    }
}

mdb_start
#mdb_style "regress"
mdb_send "start $file $args"
mdb_send "print args"
mdb_send "step"
mdb_step_until_finished
if {$compilation_succeeded == 1} {
    pass "$num_steps steps\n"
} else {
    fail "Compilation failed\n"
}