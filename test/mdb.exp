#!/usr/bin/expect -d -f
#
set mono mono
set mdb "../wrapper/mdb.exe"
set timeout 30
set max_repeat 20
set srcdir [absolute $srcdir]

proc mdb_start {file args} {
    global mdb
    global mono
    global timeout
    global verbose
    global thread
    global spawn_id
    global srcdir

    verbose "Spawning $mdb $file"

    set res [spawn $srcdir/start-mdb.sh -script $file $args];
    if { $res < 0 || $res == "" } {
	perror "Spawning $mdb failed."
	exit 1;
    }
    verbose "Spawned $mdb"
    expect {
	-re "Mono Debugger\[\r\n\]+$" {
	    verbose "Mono Debugger initialized."
	}
	timeout {
	    perror "(timeout) Mono Debugger not starting"
	    exit 1
	}
    }
    mdb_expect_prompt
    mdb_send "run"
    mdb_expect_started
}

proc mdb_expect_started { } {
    global thread

    expect {
	-re "Thread @(\[0-9\]+) stopped at (\[^\n\r\]+)\[\r\n\]+" {
	    set thread $expect_out(1,string)
	    pass "Target started"
	} -re {^ERROR:([^\n\r]+)} {
	    set message $expect_out(1,string)
	    fail "Cannot start target"
	    perror "$message"
	    exit 1
	} timeout {
	    perror "(timeout) Mono Debugger not stopped in main"
	    exit 1
	}
    }
    mdb_expect_prompt
    return 0;
}

proc mdb_expect_prompt { } {
    global max_repeat

    set count 0
    while {$count < $max_repeat} {
	expect {
	    {^(mdb) } {
		return 0
	    }
	    -re {^([^\n\r]+)[\n\r]+} {
		set line $expect_out(1,string)
		fail "Received `$line' when waiting for a command prompt"
		incr count
	    }
	    timeout {
		perror "(timeout) Mono Debugger hanging or not displaying command prompt."
		exit 1
	    }
	}
    }
    perror "(timeout) Mono Debugger hanging or not displaying command prompt."
    exit 1
}

proc mdb_send {command} {
    send $command\n
    expect -exact "$command"
    expect -re {[\n\r]+}
    return 0
}

proc mdb_test_frame {frame index func file line} {
    if {"$file" == ""} {
	if {![regexp "^\#(\[0-9\]+): 0x\[0-9A-Fa-f\]+ in (.*)" "$frame" match real_index real_func]} {
	    fail "Received unknown stack frame `$frame'"
	    return -1
	}

	if {$real_index != $index} {
	    fail "Debugger in frame $real_index, but expected $index"
	    return
	}
	regsub "\[\+\]0x\[0-9A-Fa-f\]+$" $real_func "" real_func
	if {$real_func != $func} {
	    fail "Debugger stopped in func $real_func, but expected $func"
	    return
	}

	pass "Debugger stopped in \#$index: $func"
	return
    }

    if {![regexp "^\#(\[0-9\]+): 0x\[0-9A-Fa-f\]+ in (.*) at (.*):(\[0-9\]+)$" "$frame" match real_index real_func real_file real_line]} {
	fail "Received unknown stack frame `$frame'"
	return -1
    }

    if {$real_index != $index} {
	fail "Debugger in frame $real_index, but expected $index"
	return
    }
    regsub "\[\+\]0x\[0-9A-Fa-f\]+$" $real_func "" real_func
    if {$real_func != $func} {
	fail "Debugger stopped in func $real_func, but expected $func"
	return
    }
    if {$real_line != $line} {
	fail "Debugger stopped in line $real_line, but expected $line"
	return
    }
    if {$real_file != $file} {
	fail "Debugger stopped on line $real_line in file $real_file, but expected $file"
	return
    }
    pass "Debugger stopped in \#$index: $func, line $line"
    return
}

proc mdb_expect_frame {index func file line} {
    global thread

    mdb_send "frame -thread $thread"
    expect {
	-re {^([^\n\r]+)[\n\r]+} {
	    mdb_test_frame $expect_out(1,string) $index $func $file $line
	}
	-re {^ERROR:([^\n\r]+)} {
	    set message $expect_out(1,string)
	    fail "Cannot get current stack frame: $message"
	}
	timeout {
	    perror "(timeout) Mono Debugger not responding to `frame' command."
	    exit 1
	}
    }
    mdb_expect_prompt
    return
}

proc mdb_expect_backtrace_frame {index func file line} {
    global thread

    expect {
	-re {^(\(\*\))?[ ]*([^\n\r]+)[\n\r]+} {
	    mdb_test_frame $expect_out(2,string) $index $func $file $line
	}
	-re {^ERROR:([^\n\r]+)} {
	    set message $expect_out(1,string)
	    fail "Cannot get current stack frame: $message"
	}
	timeout {
	    perror "(timeout) Mono Debugger not responding to `frame' command."
	    exit 1
	}
    }
    return
}

proc mdb_expect_stopped {index func file line} {
    global thread
    global max_repeat

    set count 0
    while {$count < $max_repeat} {
	expect {
	    -re {Thread @([0-9]+) stopped at ([^\n\r]+)\.[\n\r]+} {
		set real_thread $expect_out(1,string)
		set real_frame $expect_out(2,string)

		if {$real_thread != $thread} {
		    fail "Debugger stopped in thread $real_thread, but expected $thread"
		    return
		}

		mdb_test_frame $real_frame $index $func $file $line
		mdb_expect_prompt
		return
	    }
	    {^(mdb) } {
		fail "Thread failed to stop in $func at $file:$line"
		return -1
	    }
	    -re {^([^\n\r]+)[\n\r]+} {
		set message $expect_out(1,string)
		fail "Received `$message' while waiting for target to stop"
		incr count
	    }
	    timeout {
		perror "(timeout) Mono Debugger not responding to `frame' command."
		exit 1
	    }
	}
    }
    perror "(timeout) Mono Debugger not responding to `frame' command."
    exit 1
}

proc mdb_expect_hit_breakpoint {index func bpt_index file line} {
    global thread
    global max_repeat

    set count 0
    while {$count < $max_repeat} {
	expect {
	    -re {Thread @([0-9]+) hit breakpoint ([0-9]+) at ([^\n\r]+)\.[\n\r]+} {
		set real_thread $expect_out(1,string)
		set real_bpt $expect_out(2,string)
		set real_frame $expect_out(3,string)

		if {$real_thread != $thread} {
		    fail "Debugger stopped in thread $real_thread, but expected $thread"
		    return
		}

		if {$real_bpt != $bpt_index} {
		    fail "Debugger hit breakpoint $real_bpt, but expected $bpt_index"
		    return
		}

		mdb_test_frame $real_frame $index $func $file $line
		mdb_expect_prompt
		return
	    }
	    {^(mdb) } {
		fail "Thread failed to stop in $func at $file:$line"
		return -1
	    }
	    -re {^([^\n\r]+)[\n\r]+} {
		set message $expect_out(1,string)
		fail "Received `$message' while waiting for target to stop"
		incr count
	    }
	    timeout {
		perror "(timeout) Mono Debugger not responding to `frame' command."
		exit 1
	    }
	}
    }
    perror "(timeout) Mono Debugger not responding to `frame' command."
    exit 1
}

proc mdb_expect_breakpoint {} {
    global thread
    global file
    global max_repeat

    set count 0
    while {$count < $max_repeat} {
	expect {
	    -re {^Breakpoint ([0-9]+) at ([^\n\r]+)[\n\r]+} {
		set index $expect_out(1,string)
		pass "Inserted breakpoint $index"
		mdb_expect_prompt
		return $index
	    }
	    {^(mdb) } {
		fail "Failed to insert breakpoint"
		return -1
	    }
	    -re {^([^\n\r]+)[\n\r]+} {
		set line $expect_out(1,string)
		fail "Received `$line' when trying to insert a breakpoint"
		incr count
	    }
	    timeout {
		perror "(timeout) Mono Debugger is not inserting breakpoint."
		exit 1
	    }
	}
    }
    perror "(timeout) Mono Debugger is not inserting breakpoint."
    exit 1
}

proc mdb_expect_catchpoint {} {
    global thread
    global file
    global max_repeat

    set count 0
    while {$count < $max_repeat} {
	expect {
	    -re {^Inserted catch point ([0-9]+) for ([^\n\r]+)[\n\r]+} {
		set index $expect_out(1,string)
		pass "Inserted catchpoint $index"
		mdb_expect_prompt
		return $index
	    }
	    {^(mdb) } {
		fail "Failed to insert catchpoint"
		return -1
	    }
	    -re {^([^\n\r]+)[\n\r]+} {
		set line $expect_out(1,string)
		fail "Received `$line' when trying to insert a catchpoint"
		incr count
	    }
	    timeout {
		perror "(timeout) Mono Debugger is not inserting catchpoint."
		exit 1
	    }
	}
    }
    perror "(timeout) Mono Debugger is not inserting catchpoint."
    exit 1
}

proc mdb_expect_exception {index func file line} {
    global thread
    global max_repeat

    set count 0
    while {$count < $max_repeat} {
	expect {
	    -re {Thread @([0-9]+) caught exception at ([^\n\r]+)\.[\n\r]+} {
		set real_thread $expect_out(1,string)
		set real_frame $expect_out(2,string)

		if {$real_thread != $thread} {
		    fail "Debugger stopped in thread $real_thread, but expected $thread"
		    return
		}

		mdb_test_frame $real_frame $index $func $file $line
		mdb_expect_prompt
		return
	    }
	    {^(mdb) } {
		fail "Thread failed to catch exception in $func at $file:$line"
		return -1
	    }
	    -re {^([^\n\r]+)[\n\r]+} {
		set message $expect_out(1,string)
		fail "Received `$message' while waiting for target to stop"
		incr count
	    }
	    timeout {
		perror "(timeout) Mono Debugger not responding to `frame' command."
		exit 1
	    }
	}
    }
    perror "(timeout) Mono Debugger not responding to `frame' command."
    exit 1
}

proc mdb_expect_thread {} {
    global max_repeat

    set count 0
    set new_threads 0
    while {$count < $max_repeat} {
	expect {
	    -re {^New thread \@([\d]+)[\n\r]+} {
		set new_thread $expect_out(1,string)
		pass "Started new thread $new_thread"
		# mdb_expect_prompt
		return $new_thread
	    }
	    -re {^([^\n\r]+)[\n\r]+} {
		set line $expect_out(1,string)
		fail "Received `$line' when waiting for a new thread"
		incr count
	    } timeout {
		perror "(timeout) Mono Debugger is not responding."
		exit 1
	    }
	}
    }
    perror "(timeout) Mono Debugger is not responding."
    exit 1
}

proc mdb_expect_line {text} {
    expect {
	-re {^([^\n\r]+)[\n\r]+} {
	    set line $expect_out(1,string)
	    if {$line != $text} {
		fail "Received `$line', but expected `$text'."
	    } else {
		pass "Received $text"
	    }
	} timeout {
	    perror "(timeout) Mono Debugger is not responding."
	    return -1
	}
    }
}

proc mdb_expect {text} {
    mdb_expect_line $text
    mdb_expect_prompt
}

set repeat_count 10
proc mdb_send_and_expect {arg1 arg2} {
    set timestamp [time {
	mdb_send $arg1
	mdb_expect $arg2
    }]
    verbose [format "`%-30s  => $timestamp" $arg1] 2
}
