%{
using System.Text;
using System.IO;
using System.Collections;
using System;

namespace Mono.Debugger.Frontends.CommandLine
{
	internal class ExpressionParser
	{
		Parser parser;

		protected bool yacc_verbose_flag = true;

		public bool yacc_verbose {
			set {
				yacc_verbose_flag = value;
			}

			get {
				return yacc_verbose_flag;
			}
		}

		Tokenizer lexer;

		public Tokenizer Lexer {
			get {
				return lexer;
			}
		}		   

%}

%token QUIT
%token EOL
%token EOF
%token NONE	// This token is never returned by our lexer
%token ERROR	// This is used not by the parser, but by the tokenizer.
		// do not remove.

%token IDENTIFIER
%token INTEGER
%token NUMBER
%token STRING
%token HASH
%token AT
%token PERCENT
%token DOLLAR
%token DOT
%token BANG
%token COMMA
%token ASSIGN
%token STAR
%token PLUS
%token MINUS
%token DIV
%token OPEN_PARENS
%token CLOSE_PARENS
%token OPEN_BRACKET
%token CLOSE_BRACKET
%token OP_LT
%token OP_GT
%token COLON

%token PARENT
%token LENGTH
%token LOWER
%token UPPER

%token NEW
%token TYPEOF

%start expression
%%

expression
	: NUMBER
	  {
		return new NumberExpression ((long) $1);
	  }
	| INTEGER
	  {
		return new NumberExpression ((int) $1);
	  }
	| STRING
	  {
		return new StringExpression ((string) $1);
	  }
	;

%%

public ExpressionParser (Parser parser, Tokenizer lexer)
{
	this.parser = parser;
	this.lexer = lexer;
}

public object Parse ()
{
	try {
		if (yacc_verbose_flag)
			return yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			return yyparse (lexer);
	} catch (Exception e){
		// Please do not remove this, it is used during debugging
		// of the grammar
		//
		throw new ParserError (e.ToString ());
	}
}

/* end end end */
}
