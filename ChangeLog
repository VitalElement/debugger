2009-05-25  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-ptrace.h
	(InferiorHandle): Move struct definition here.
	(OSData): New typedef; moved `mem_fd' here from `InferiorHandle'.

2009-05-19  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(InvocationExpression.DoInvoke): Add
	`RuntimeInvokeFlags.NestedBreakStates'.	

2009-05-19  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs
	(Thread.AbortInvocation): Added `long rti_id' argument.

	* backend/SingleSteppingEngine.cs
	(SSE.AbortInvocation): Implemented this using `OperationReturn'.

	* classes/TargetException.cs
	(TargetError): Added `NoInvocation'.

2009-05-19  Martin Baulig  <martin@ximian.com>

	* backend/Inferior.cs
	(Inferior.AbortInvoke): Only take `long rti_id' argument; we now
	abort one specific invocation and don't search on the stack.

	* backend/server/server.h
	(InferiorVTable.abort_invoke): Only take a `guint64 rti_id'
	argument, removed the `stack_pointer' and `*aborted_rti' ones.

	* backend/server/x86_64-arch.c
	(server_ptrace_abort_invoke): Only take a `guint64 rti_id'
	argument, removed the `stack_pointer' and `*aborted_rti' ones.

	* backend/server/i386-arch.c
	(server_ptrace_abort_invoke): Only take a `guint64 rti_id'
	argument, removed the `stack_pointer' and `*aborted_rti' ones.

	* backend/SingleSteppingEngine.cs
	(SSE.AbortRuntimeInvoke): Call `inferior.AbortInvoke()'.
	(SSE.Return): Implement `ReturnMode.Invocation'.
	(SSE.OperationReturn): Add support for aborting an entire
	invocation.

	* classes/Backtrace.cs
	(Backtrace.TryCallback): Take a `ref StackFrame last_frame'
	argument to allow the parent function to do some more checks on it
	before adding it.
	(Backtrace.TryUnwind): Improve handling of callback frames; also
	check `until'.

2009-05-18  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs
	(ReturnMode): New public enum.
	(Thread.Return): Replace the `bool run_finally' with a
	`ReturnMode' argument.

	* backend/SingleSteppingEngine.cs
	(SSE.Return): Start fixing the return mess.

	* classes/TargetException.cs
	(TargetError): Added `InvalidReturn'.

	* frontend/Command.cs
	(ReturnCommand): Add `-native' argument to allow returning from
	native frames while running managed code.

2009-05-14  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs
	(FrameType): New public enum.
	(StackFrame.ctor): Take an additional `FrameType' argument.

	* classes/Backtrace.cs
	(Backtrace.TryCallback): Set `FrameType.Callback' or
	`FrameType.RuntimeInvoke' depending on the callback type.

	* backend/arch/Architecture.cs
	(Architecture.CreateFrame): Take an additional `FrameType' argument.

	* backend/Inferior.cs
	(Inferior.CallbackFrame): New internal class.
	(Inferior.GetCallbackFrame): Return an `Inferior.CallbackFrame'.

	* backend/ThreadServant.cs
	(ThreadServant.GetCallbackFrame): Return an `Inferior.CallbackFrame'.

	* backend/server/server.h
	(CallbackInfo): New typedef.
	(InferiorVTable.get_callback_frame): Replace `guint64 *registers'
	with a `CallbackInfo *info'.
	(mono_debugger_server_get_callback_frame): Likewise.

2009-05-14  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoThreadManager.ThreadCreated): We seem to be creating 3 daemon
	threads again when using the latest runtime from trunk.

2009-05-02  Jonathan Chambers  <joncham@gmail.com>

	* README.win32: Update.

2009-05-02  Jonathan Chambers  <joncham@gmail.com>

	* backend/server/x86-windows.c
	(server_win32_spawn): Add CREATE_UNICODE_ENVIRONMENT flag.
	(server_win32_get_frame): Add.
	(server_win32_initialize_process): Add.

	* backend/server/monodebuggerserver.def: Export
	mono_debugger_server_get_frame and 
	mono_debugger_server_initialize_process.

2009-05-02  Jonathan Chambers  <joncham@gmail.com>

	* backend/Inferior.cs (Run): NULL terminate env
	and args arrays when P/Invoking.

2009-05-02  Jonathan Chambers  <joncham@gmail.com>

	* backend/EventQueue.cs (DebuggerEventQueue): Add timed Wait.

2009-05-02  Martin Baulig  <martin@ximian.com>

	Don't step into any signal handlers during source-level stepping.

	* backend/server/library.c
	(mono_debugger_server_get_pending_signal): New public function.

	* backend/server/server.h
	(InferiorVTable): Added `get_pending_signal'.

	* backend/Inferior.cs
	(Inferior.GetPendingSignal): New public method.

	* backend/SingleSteppingEngine.cs
	(SSE.do_next_native): Renamed into `do_next'.
	(SSE.do_step): New function; same as do_step_native(), but don't
	step into any signal handlers.
	(SSE.OperationStep): Use do_step() instead of do_step_native(),
	except when doing single-instruction stepping, don't step into any
	signal handlers when doing source-level stepping.

2009-05-03  Martin Baulig  <martin@ximian.com>

	* configure.in: Drop support for older nunit's.

2009-04-30  Martin Baulig  <martin@ximian.com>

	* classes/Breakpoint.cs
	(Breakpoint.OnResolveFailed): New protected internal method.

	* backend/SingleSteppingEngine.cs
	(SSE.ActivatePendingBreakpoint): Call Breakpoint.OnResolveFailed(),
	not OnBreakpointError() if we got a `TargetError.LocationInvalid'.

2009-04-30  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.create_appdomain): Make this work on i386.

2009-04-30  Martin Baulig  <martin@ximian.com>

	Merge status as of April 29th:

	- merged until 133023.

	- reverted revisions:
	128557, 128559, 132026, 132028, 132029, 132584, 132586.

	- broken revisions: 132585.

	- jchambers changes which will not be merged:
	129763, 129857, 131778, 131779, 132539, 132651, 132674,
	132697, 132803.

	- monodis and lesspipe have not yet been merged:
	130986, 130987, 130988, 130989, 131093.

	- experimental code which will not be merged:
	132841, 132843

2009-04-29  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoLineNumberTable.Lookup): If the symbol file doesn't contain
	any source ranges for the current method, default to traditional
	line-based lookup.

2009-04-29  Martin Baulig  <martin@ximian.com>

	* backend/BreakpointHandle.cs (FunctionBreakpointHandle): Fix a
	regression introduced in r132009.

2009-04-27  Jonathan Chambers  <joncham@gmail.com>

	* build/debugger.sln: Turn on monodebuggerserver project
	in AnyCPU target.

	* build/monodebuggerserver.vcproj: Copy glib dependencies
	to output directory.

2009-04-26  Jonathan Chambers  <joncham@gmail.com>

	* build/debugger.sln: Build as 32-bit for now.

	* build/Mono.Debugger.csproj: Build as 32-bit for now.

	* build/Mono.Debugger.SymbolWriter.csproj: Build as 32-bit for now.

	* build/mdb.csproj: Build as 32-bit for now.

	* build/Mono.Debugger.Frontend.csproj: Build as 32-bit for now.

2009-04-25  Jonathan Chambers  <joncham@gmail.com>

	* README.win32: Added.

2009-04-25  Jonathan Chambers  <joncham@gmail.com>

	* frontend/CSharpExpressionParser.cs.win: Update file.

	* build/Mono.Debugger.csproj: Add reference to Mono.GetOptions.

	* build/AssemblyInfo.cs.win: Add generated file.

	* build/Mono.Debugger.SymbolWriter.csproj: Add DEBUGGER_SOURCE
	definition. Add reference to Mono.GetOptions. Add prebuild step
	for AssemblyInfo.cs.win to AssemblyInfo.cs.

2009-04-24  Jonathan Chambers  <joncham@gmail.com>

	* configure.in: Add debug output to figure out why nunit
	fails to run on buildbots.

2009-04-23  Jonathan Chambers  <joncham@gmail.com>

	* backend/server/breakpoints.c: Add HAVE_UNISTD_H #ifdef.

	* backend/server/library.c: Add HAVE_UNISTD_H check and add Windows
	InferiorVTable.
	(mono_debugger_server_create_inferior): Access through vtable.
	(mono_debugger_server_get_current_pid): Access through vtable.
	(mono_debugger_server_get_current_thread): Access through vtable.
	(mono_debugger_server_static_init): Access through vtable.
	(mono_debugger_server_get_pending_sigint): Access through vtable.
	(mono_debugger_server_sem_init): Access through vtable.
	(mono_debugger_server_sem_wait): Access through vtable.
	(mono_debugger_server_sem_post): Access through vtable.
	(mono_debugger_server_sem_get_value): Access through vtable.

	* backend/server/monodebuggerserver.def: Add.

	* backend/server/mutex.c: Add mono_debugger_cond_timed_wait.

	* backend/server/server.h: Add declarations for vtable changes above.

	* backend/server/x86-ptrace.c: Implement vtable functions formerly in
	library.c.

	* backend/server/x86-windows.c: Added.

	* build/debugger.sln: Added.

	* build/mdb.csproj: Added.

	* build/Mono.Debugger.csproj: Added.

	* build/Mono.Debugger.Frontend.csproj: Added.

	* build/Mono.Debugger.SymbolWriter.csproj: Added.

	* build/monodebuggerserver.vcproj: Added.

2009-04-28  Martin Baulig  <martin@ximian.com>

	* build/ulimit-check.c: New helper program to check `ulimit -v';
	we'll add more checks to it later.

	* build/runtests.in: Refuse the run the tests if `ulimit-check' fails.

2009-04-17  Martin Baulig  <martin@ximian.com>

	* classes/LineNumberTable.cs
	(LineNumberTable.Lookup): Add overloaded virtual version taking a
	`column' argument.

	* classes/SourceLocation.cs
	(SourceLocation.Column): New public readonly field.
	(SourceLocation.ctor): Add overloaded versions taking a `column' arg.

	* backend/BreakpointHandle.cs
	(FunctionBreakpointHandle): Add `column' field.	

2009-04-16  Martin Baulig  <martin@ximian.com>

	Add support for 'source ranges' - instead of only using line
	numbers, we now use a struct containing 'StartLine', 'EndLine',
	'StartColumn' and 'EndColumn'.

	* classes/Method.cs
	(LineEntry.SourceRange): New public field.

	* classes/SourceAddress.cs
	(SourceAddress.HasSourceRange): New public property.
	(SourceAddress.SourceRange): New public property.
	(SourceRange): New public struct.

2009-04-15  Martin Baulig  <martin@ximian.com>

	* classes/SourceAddress.cs
	(SourceAddress): Rename `SourceOffset' -> `LineOffset' and
	`SourceRange' -> `LineRange'.

2009-04-15  Jonathan Chambers  <joncham@gmail.com>

	* backend/arch/Architecture.cs: Use Disassembler instead of BfdDisassembler
	and only create on non-Windows platforms.

	* backend/arch/BfdDisasembler.cs: Override Dispose since base now implements.

	* backend/arch/Disasembler.cs: Derive from IDisposable.

	* backend/arch/X86_Opcodes.cs: Use Disassembler instead of BfdDisassembler
	and only create on non-Windows platforms.

	* backend/Inferior.cs
	(IsRunningOnWindows): Add.
	(mono_debugger_server_get_application): Change out string to out IntPtr.
	(GetApplication): Marshal strings manually since on Windows they are freed
	via CoTaskMemFree instead of g_free.

2009-04-15  Jonathan Chambers  <joncham@gmail.com>

	* frontend/CSharpExpressionParser.cs.win: Add generated files for
	Windows to build easily in Visual Studio.

2009-04-15  Jonathan Chambers  <joncham@gmail.com>

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration): Use Environment.SpecialFolder.Personal
	instead of HOME environment variable.
	(LoadConfigurationFromStream): Verify file exists before trying to access it.

2009-04-15  Jonathan Chambers  <joncham@gmail.com>

	* frontend/Style.cs: Add braces to work around bug 478101.

	* languages/mono/MonoLanguageBackend.cs: Add braces to work around bug 478101.

2009-04-15  Martin Baulig  <martin@ximian.com>

	* symbolwriter/MonoSymbolTable.cs
	(LineNumberTable.DW_LNE_MONO__extensions_start): New const.
	(LineNumberTable.DW_LNE_MONO__extensions_end): New const.
	(LineNumberTable.DoRead): Ignore unknown extended opcodes if
	they're within the Mono extension range.

2009-04-14  Martin Baulig  <martin@ximian.com>

	* symbolwriter/ndesk-options.cs: New file; copied
	src/NDesk.Options/NDesk.Options/Options.cs from NDesk.Options.

	* symbolwriter/MdbSymbolReader.cs: Some more work on printing the
	contents of a symbol file instead of just verifying it.

	* build/mdb-symbolreader.in: New file; create a `mdb-symbolreader'
	wrapper script.

2009-04-06  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs
	(TestSuite.ctor): Set `config.RedirectOutput' since we're
	examining it in the tests.

2009-04-06  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SSE.ActivatePendingBreakpoint): Don't use Report.Error() to
	report breakpoint failures; `breakpoint.OnBreakpointError()' is
	all we need.

2009-04-03  Martin Baulig  <martin@ximian.com>

	* classes/LineNumberTable.cs
	(LineNumberTable.DumpLineNumbers): Added `TextWriter' argument.

2009-04-03  Martin Baulig  <martin@ximian.com>

	* classes/Utils.cs: New file.
	(LessPipe): New public class; derives from `TextWriter' and opens
	a pipe to `less'.

2009-04-03  Martin Baulig  <martin@ximian.com>

	Add `less' command to view a file with `less'.

	* frontend/Command.cs
	(LessCommand): New command to view a file.

	* classes/ThreadManager.cs: Ignore exit events from unknown
	children.	

2009-04-03  Martin Baulig  <martin@ximian.com>

	* configure.in: Check for monodis and AC_SUBST() `MONODIS' and
	`TARGET_MONODIS'.	

	* build/AssemblyInfo.cs.in
	(BuildInfo.monodis): New public static field.

2009-04-03  Martin Baulig  <martin@ximian.com>

	* configure.in: Kill the old pre-historic `server_only'.

2009-03-31  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(NotificationType): Added `CreateAppDomain' and `UnloadAppDomain'.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend): Make things work with shadow copied assemblies.
	(MonoLanguageBackend.GetShadowCopyLocation): New internal method.
	(MonoLanguageBackend.Notification): Add support for
	`CreateAppDomain' and `UnloadAppDomain'.

	* languages/mono/MonoRuntime.cs
	(MonoRuntime.GetAppDomainInfo): New public method.

2009-03-30  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerSession.AddUserModulePath): New public method.
	(DebuggerSession.CreateModule): Also check whether the module is
	located anywhere in the module paths.

2009-03-27  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-ptrace.c
	(server_ptrace_kill): Do a `kill (SIGKILL)' in addition to the
	`ptrace (PTRACE_KILL)'.

2009-03-24  Martin Baulig  <martin@ximian.com>

	* classes/Event.cs
	(Event.IsUserModule): New public property.

	* backend/SingleSteppingEngine.cs
	(SSE.ActivatePendingBreakpoints): When called during a
	module-load, only activate user-breakpoints if we're actually a
	user module.

2009-03-23  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.CreateDefaultModuleGroups): Add new module
	group `user' for user code.

	* classes/DebuggerSession.cs
	(DebuggerSession.AddUserModule): New public method.
	(DebuggerSession.CreateModule): If the module's file name matches
	any of the user modules, use the `user' module group.

	* classes/Module.cs
	(SymbolFile.CodeBase): New abstract property; this is the absolute
	path name of the loaded module.

2009-03-20  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.RedirectOutput): New configuration option.

	* classes/DebuggerOptions.cs
	(DebuggerOptions.RedirectOutput): Removed.
	(DebuggerOptions.ParseCommandLine): Removed `-no-redirect' command
	line argument; this is now a configuration option.

2009-03-19  Jonathan Chambers  <joncham@gmail.com>

	* frontend/Completer.cs: Switch from using GnuReadLine to LineReader.
	
	* frontend/GnuReadLine.cs: Make methods non-static. Now accessed via LineReader.
	
	* frontend/LineReader.cs: Added. Handles both GnuReadLine and ManagedReadLine.
	
	* frontend/Main.cs: Switch from using GnuReadLine to LineReader.
	
	* frontend/ManagedReadLine.cs: Beginning of managed ReadLine implementation.
	
	* classes/DebuggerOptions.cs: Add #if HAVE_XSP around xsp specific
	code.
	Fixes build.

	* build/Makefile.am: Add LineReader.cs and ManagedReadLine.cs.

2009-03-19  Jonathan Chambers  <joncham@gmail.com>

	* backend/server/i386-arch.h: Wrap include with #ifdef HAVE_SYS_USER_H
	
	* backend/server/x86-ptrace.c: Include config.h.

	* configure.in: Add check for sys/user.h.

	* winconfig.h: Added. Used to generate config.h on Windows.

2009-03-19  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs
	(DebuggerOptions.RedirectOutput): New public property.
	(DebuggerOptions.ParseCommandLine): Added `-no-redirect' command
	line argument to prevent redirecting stdin and stdout.

	* backend/ProcessStart.cs
	(ProcessStart.RedirectOutput): New public property.

	* backend/server/x86-ptrace.c
	(mono_debugger_server_spawn): Added `gboolean redirect_fds'.

2009-03-05  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.GetMethod): Also search in all include files.

2009-03-09  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerSession.InsertExceptionCatchPoint): Add
	compatibility overload.

	* classes/Thread.cs
	(Thread.RuntimeInvoke): Add compatibility overload.

2009-02-28  Martin Baulig  <martin@ximian.com>

	* backend/arch/BfdContainer.cs
	(BfdContainer.GetSectionAddress): New public method.

	* backend/ProcessServant.cs
	(ProcessServant.get_thread_info): Silently fail if we're not a
	managed application.

2009-03-04  Martin Baulig  <martin@ximian.com>

	Implemented nested break states.

	* backend/SingleSteppingEngine.cs
	(SSE.ProcessChildEvent): Largely rework this to support nested
	break states.
	(SSE.Operation.EventResult): Added `SuspendOperation'.
	(SSE.Operation.CompletedOperation): New public virtual method.
	Compute the new stack frame here and also check for method operations.
	(SSE.InterruptibleOperation): New public abstract base class for
	operations which may be suspended in a nested break state.
	(SSE.OperationRuntimeInvoke): Derive from `InterruptibleOperation'.
	Moved all the low-level callbacks into a new private helper
	operation `OperationRuntimeInvokeHelper'.
	(SSE.OperationException): Return `EventResult.SuspendOperation' on
	completion to allow entering a nested break state; CompletedOperation()
	will check whether we may actually do that and fall back to a
	normal completion otherwise.

	* classes/Debugger.cs
	(Debugger.EnterNestedBreakStateEvent): New public event.
	(Debugger.LeaveNestedBreakStateEvent): New public event.

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.NestedBreakStates): New configuration option.

	* classes/ExpressionEvaluator.cs
	(EE.EvaluationFlags): New public enum.
	(EE.IExpression): New public interface.
	(EE.IEvaluator): New public interface.
	(EE.EvaluationCallback): New public delegate.
	(EE.MonoObjectToString): Add `EvaluationFlags' argument.
	(EE.GetProperty): Add `EvaluationFlags' argument.

	* classes/TargetEvent.cs
	(TargetEventType): Added `RuntimeInvokeDone'.  This is only sent
	if explicitly requested via `RuntimeInvokeFlags.SendEventOnCompletion'.

	* classes/Thread.cs
	(RuntimeInvokeFlags): New public enum.
	(Thread.RuntimeInvoke): Replaced `is_virtual' and `debug' by
	`RuntimeInvokeFlags flags'.

	* frontend/Main.cs: Reworked the main loop to support nested break
	states.

	* frontend/Command.cs
	(PrintExpressionCommand): Add `-nested-break' argument.

	* backend/Inferior.cs
	(Inferior.AbortInvoke): Added `out long aborted_rti' argument.

	* backend/server/x86-ptrace.c
	(server_ptrace_abort_invoke): Added `guint64 *aborted_rti'.

2009-03-02  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(CatchCommand): Added `-unhandled' argument to only catch
	user-unhandled exceptions.

	* frontend/Interpreter.cs
	(Interpreter.InsertExceptionCatchPoint): Added `bool unhandled'.

	* classes/DebuggerSession.cs
	(DebuggerSession.InsertExceptionCatchPoint): Added `bool
	unhandled'.

	* classes/ExceptionCatchPoint.cs
	(ExceptionCatchPoint.Unhandled): New public property.

	* backend/SingleSteppingEngine.cs: Improve exception handling.

2009-03-04  Martin Baulig  <martin@ximian.com>

	* test/testsuite/testnativefork.cs: Add `[Category ("NotWorking")]'.

2009-03-03  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs
	(NUnitInterpreter.IgnoreThreadCreation): New public property to
	disable tracking of child threads.

	* test/testsuite/TestAppDomain.cs: Use it here.
	* test/testsuite/TestAppDomain-Module.cs: And here.

2009-03-02  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoRuntime.cs
	(MonoRuntime.GetGenericClass): Reflect latest runtime changes:
	starting with version 81.0, `MonoGenericInst.type_argv' is a tail
	array and not a pointer anymore.  Check for the runtime version
	and support both versions here.

2009-03-02  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoDebuggerInfo): Accept runtime major versions 80 and 81.
	(MonoDebuggerInfo.MinorVersion): New public readonly field.
	(MonoDebuggerInfo.MajorVersion): New public readonly field.

2009-02-25  Martin Baulig  <martin@ximian.com>

	* backend/arch/X86_Instruction.cs
	(X86_Instruction.DecodeModRM): Correctly identify ip-relative
	addressing.

2009-02-09  Martin Baulig  <martin@ximian.com>

	* classes/Process.cs
	(ExceptionCatchPointHandler): New public delegate.
	(Process.InstallGenericExceptionCatchPoint): New public method.
	(Process.GenericExceptionCatchPoint): New public method.

	* backend/SingleSteppingEngine.cs
	(SSE.OperationException.DoProcessEvent): Create
	`TargetEventArgs(TargetEventType.Exception)' with the exception
	object as `TargetClassObject'.

2009-02-09  Martin Baulig  <martin@ximian.com>

	Fix #466012 and #423518.

	* backend/server/x86-linux-ptrace.c
	(_server_ptrace_wait_for_new_thread): New static function.  Wait
	for a newly created thread to stop.

	* backend/SingleSteppingEngine.cs
	(SSE.StartThread): Added `do_execute' argument and resume the
	target when it's true.
	(SSE.OperationInitAfterFork.DoExecute): Call `sse.do_continue ()'.

	* backend/ProcessServant.cs
	(ProcessServant.ThreadCreated): If `do_attach' is false, then the
	newly created thread has already stopped, so we tell the SSE to
	resume it.

	* backend/ThreadManager.cs
	(ThreadManager.wait_thread_main): Ignore `SIGSTOP' events for
	unknown threads.

2009-01-28  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs
	(ScriptingContext.HandleDebuggerDisplay): Make this method static.
	(ScriptingContext.CheckTypeProxy): New public static method.

2009-01-28  Martin Baulig  <martin@ximian.com>

	* language/TargetStructType.cs
	(TargetStructType.ForceClassInitialization): New public method.

	* frontend/Expression.cs
	(StructAccessExpression.ResolveClass): Force a class init here.
	[The user wants something from this class, so it should be ok to
	initialize it.]

	* frontend/ScriptingContext.cs
	(ScriptingContext.GetNamespaces): If we have an `ImplicitInstance',
	only check the direct namespaces from the class name, not any
	using statements etc.

2009-01-27  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs
	(ScriptingContext.HandleDebuggerDisplay): Improve API: take a
	`DebuggerDisplayAttribute' parameter and return both the value and
	the type.

2009-01-26  Martin Baulig  <martin@ximian.com>

	Add support for the [DebuggerTypeProxy] attribute.

	* languages/TargetStructType.cs
	(TargetStructType.DebuggerTypeProxyAttribute): New public
	property.

	* frontend/Expression.cs
	(TypeProxyExpression): New internal class.  This is used to
	evaluate a [DebuggerTypeProxy] attribute.

	* classes/ScriptingContext.cs
	(ScriptingContext.DoFormatObject): Check for [DebuggerTypeProxy].	

2009-01-26  Martin Baulig  <martin@ximian.com>

	Add support for the [DebuggerDisplay] attribute.

	* languages/TargetMember.cs
	(TargetMemberInfo.DebuggerDisplayAttribute): New public property.

	* languages/TargetStructType.cs
	(TargetStructType.DebuggerDisplayAttribute): New public property.

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.CheckCustomAttributes): New internal method.

	* classes/MethodSource.cs
	(MethodSource.GetNamespaces): New public abstract method.

	* classes/ExpressionEvaluator.cs
	(ExpressionEvaluator.EvaluationResult): Added `InvalidExpression'.

	* frontend/ScriptingContext.cs
	(ScriptingContext.GetNamespaces): Removed the overloaded version
	with a `StackFrame' argument; only keep the parameterless one.
	(ScriptingContext.CurrentLanguage): Make this work without a frame.
	(ScriptingContext.ImplicitInstance): New public property; this can
	be used in expression contexts to implicitly set the `this'.
	(ScriptingContext.HandleDebuggerDisplay): New private method.
	(ScriptingContext.MonoObjectToString): Call
	HandleDebuggerDisplay() to check for the [DebuggerDisplay]
	attribute.

2009-01-21  Martin Baulig  <martin@ximian.com>

	Add support for the [DebuggerBrowsable] attribute.

	* languages/TargetMember.cs
	(TargetMemberInfo.DebuggerBrowsableState): New public property.

2009-01-21  Martin Baulig  <martin@ximian.com>

	Add support for nullable types.

	* languages/TargetNullableType.cs: New file.
	(TargetNullableType): New public abstract class.

	* languages/TargetNullableObject.cs: New file.
	(TargetNullableObject): New public abstract class.

	* languages/mono/MonoNullableType.cs: New file.
	* languages/mono/MonoNullableObject.cs: New file.

	* languages/TargetObjectKind.cs
	(TargetObjectKind): Added `Decimal'.

	* frontend/Expression.cs
	(Convert.ImplicitConversion): Add nullable conversions.
	(StructAccessExpression.DoAssign): Use
	Convert.ImplicitConversionRequired() rather than requiring the
	types to be identical.

2009-01-21  Martin Baulig  <martin@ximian.com>

	Add support for decimal.

	* languages/TargetFundamentalType.cs
	(FundamentalKind): Added `Decimal'.

	* languages/mono/MonoLanguageBackend.cs
	(MonoBuiltinTypeInfo): Added `DecimalType'.

2009-01-19  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoVariable.cs
	(MonoVariable.IsInScope): Don't check for `AddressMode.Dead' here.
	(MonoVariable.IsAlive): Also check for IsInScope() here.

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo.GetField): Return a `MonoNullObject' instead of `null'
	when the location is invalid.

	* frontend/ObjectFormatter.cs
	(ObjectFormatter.FormatVariable): Properly handle variables which
	have been optimized out.

2009-01-15  Martin Baulig  <martin@ximian.com>

	* backend/server/x86_64-arch.c
	(x86_arch_child_stopped): Fix the regression from r120992 (Dec 8th):
	Check for callbacks first because we expect to receive a SIGSEGV
	on the non-executable stack.

2009-01-15  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs
	(DebuggerOptions.ParseOption): Provide more meaningful error
	message if unknown `-debug-flags' arguments were given.

2009-01-08  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(BreakCommand.DoResolve): Don't allow any line-only breakpoints
	before target has been started.

2008-12-12  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs (Interpreter.WaitAll): Reset
	`seen_threads' and `wait_list' after receiving a process event; a
	process may have exited.

2008-12-12  Martin Baulig  <martin@ximian.com>

	* backend/EventQueue.cs (DebuggerWaitHandle): Implement
	IDisposable and free unmanaged resources.

	* backend/server/mutex.c
	(mono_debugger_mutex_free): New function.
	(mono_debugger_cond_free): New function.

2008-12-09  Martin Baulig  <martin@ximian.com>

	* languages/native/NativeLanguage.cs
	(NativeLanguage.CreateInstance): Add support for some very basic types.

2008-12-08  Martin Baulig  <martin@ximian.com>

	* backend/server/i386-arch.c (x86_arch_child_stopped): Send
	`STOP_ACTION_STOPPED' without checking for breakpoint if we didn't
	receive a SIGTRAP.

	* backend/server/x86_64-arch.c (x86_arch_child_stopped): Likewise.

2008-12-06  Martin Baulig  <martin@ximian.com>

	* mono-debugger-frontend.pc.in: New file.

	* configure.in: Create `mono-debugger-frontend.pc' for Visual Studio.

2008-12-03  Martin Baulig  <martin@ximian.com>

	* classes/ExpressionEvaluator.cs: Add some more error checking.

2008-12-02  Martin Baulig  <martin@ximian.com>

	* test/testsuite/*.cs: If there is more than one test in one file,
	NUnit 2.3 may run them in any random order.

	* backend/BreakpointManager.cs
	(BreakpointManager.InitializeAfterFork): Remove all non-global
	breakpoint, but don't force them to be `SourceBreakpoint's.

2008-12-02  Martin Baulig  <martin@ximian.com>

	* configure.in: Check which NUnit version we're using.

	* build/Makefile.am: Add support for NUnit 2.3.

2008-11-26  Martin Baulig  <martin@ximian.com>

	* languages/TargetMember.cs
	(TargetFieldInfo.IsCompilerGenerated): New public property.

	* frontend/ObjectFormatter.cs
	(ObjectFormatter.FormatClassObject): Skip compiler-generated
	fields.	

2008-11-26  Martin Baulig  <martin@ximian.com>

	* classes/ExpressionEvaluator.cs
	(ExpressionEvaluator.MonoObjectToString): Return the `raw'
	returned string rather than pretty formatting it.

	* frontend/ScriptingContext.cs
	(ScriptingContext.MonoObjectToString): Do that here.

2008-11-26  Martin Baulig  <martin@ximian.com>

	* classes/ExpressionEvaluator.cs
	(ExpressionEvaluator.GetProperty): New public method.

	* classes/GUIManager.cs
	(GUIManager.GetProperty): New public method.

2008-11-22  Martin Baulig  <martin@ximian.com>

	* backend/server/server.h
	(SignalInfo): Add `sigfpe', `sigquit', `sigabrt', `sigsegv',
	`sigill' and `sigbus'.

	* backend/Inferior.cs
	(Inferior.IsManagedSignal): New public method.

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.StopOnManagedSignals): New configuration
	option.

	* backend/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): Add support for it here.

	* classes/GUIManager.cs
	(GUIManager.StartGUIManager): Set `StopOnManagedSignals' to false.

2008-11-19  Martin Baulig  <martin@ximian.com>

	* interface/Report.cs
	(DebugFlags.GUI): Add new debug flags.

	* classes/ExpressionEvaluator.cs
	(ExpressionEvaluator.MonoObjectToString): Abort the invocation if
	we stop unexpectedly.

	* classes/GUIManager.cs
	(GUIManager.MonoObjectToString): New public method; call
	ExpressionEvaluator.MonoObjectToString() and suppress sending any
	events if we stop unexpectedly.

2008-11-17  Martin Baulig  <martin@ximian.com>

	* classes/ExpressionEvaluator.cs: New file.
	(ExpressionEvaluator): New public static class.
	(ExpressionEvaluator.MonoObjectToString): Moved here from
	../frontend/Expression.cs.

	* frontend/Expression.cs
	(ExpressionParser.MonoObjectToString): Moved to
	../classes/ExpressionEvaluator.cs	

2008-11-17  Martin Baulig  <martin@ximian.com>

	Released version 2.2 "Sidney" of the Mono Debugger.

	* NEWS: Update to 2.2.

	* configure.in: Bump version number to 2.2.

2008-11-17  Martin Baulig  <martin@ximian.com>

	* configure.in: Add -fno-strict-aliasing to CFLAGS.

2008-11-11  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs
	(TestSuite.EvaluateExpression): New public method.

	* frontend/Expression.cs
	(ExpressionParser.EvaluationResult): New public enum.
	(ExpressionParser.MonoObjectToString): New public method.

	* test/{src|testsuite}/TestToString2.cs: New tests.

2008-11-10  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture.cs
	(Architecture.GetLMF): Added `ref TargetAddress lmf_address'
	argument; return the address of the next LMF.

	* classes/Backtrace.cs
	(Backtrace.TryLMF): Allow multiple LMF frames.

2008-11-08  Martin Baulig  <martin@ximian.com>

	* interface/Report.cs
	(ReportWriter.ctor): Only use `MDB_DEBUG_FLAGS' and parse it like
	the `-debug-flags' command line argument; kill `MDB_DEBUG_OUTPUT'.

2008-11-08  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SSE.ManagedCallback): Insert a breakpoint on the last managed
	frame to fix a race condition - see the comments in the source code.

2008-11-06  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture.cs
	(Architecture.AdjustReturnAddress): Removed.  This was a big hack
	and there was no guarantee that the "adjusted" return address was
	actually correct.
	(Architecture.CreateFrame): Removed the `adjust_retaddr' argument.

2008-11-06  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture_X86_64.cs
	(Architecture_X86_64.GetLMF): Fixed.

	* classes/Backtrace.cs
	(Backtrace.TryUnwind): Only check the LMF once.

2008-11-01  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoPointerType.cs: Use `*', not '&' (ie. `int*').

2008-10-28  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoVariable.cs
	(MonoVariable.IsAlive): Check `AddressMode.Dead'.
	(MonoVariable.IsInScope): Likewise.

2008-10-25  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoPointerObject.cs
	(MonoPointerObject.GetDereferencedObject): Dereference the
	location if the static type is a TargetPointerType.  This fixes
	pointer-to-pointer (`int** a', for instance).

2008-10-25  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(VariableInfo.AddressMode): Add `Dead'.	

2008-10-24  Martin Baulig  <martin@ximian.com>

	Fixes the XSP-issue in #423518.

	* backend/server/x86-linux-ptrace.c
	(server_ptrace_detach_after_fork): Use a non-blocking wait to make
	things work in case we already received the SIGSTOP before.

	* test/testsuite/TestDontFollowFork.cs: New test.

2008-10-23  Martin Baulig  <martin@ximian.com>

	* interface/Report.cs
	(Report.ParseDebugFlags): New public static method; parse the
	debug flags both as integers and as strings.

	* classes/DebuggerOptions.cs
	(DebuggerOptions.ParseDebugFlags): Call Report.ParseDebugFlags()
	to parse the debug flags; we can now also specify debug flags as a
	comma separated list of strings.

2008-10-23  Martin Baulig  <martin@ximian.com>

	Bug #423518.

	There is a race condition in the Linux kernel which shows up on >= 2.6.27:

	When creating a new thread, the initial stopping event of that thread is sometimes
	sent before sending the `PTRACE_EVENT_CLONE' for it.

	* backend/server/library.c
	(mono_debugger_server_dispatch_simple): New public function.  This
	function is safe to be called from any thread and only decodes the
	event into the basic stopped / signaled / exited etc.

	* backend/ThreadManager.cs: Queue stopping events from unknown
	threads for 200 seconds to work around the race condition.

2008-10-20  Martin Baulig  <martin@ximian.com>

	Applying a patch from Cedric Vivier <cedricv@neonux.com>

	* classes/Method.cs
	(Method.IsInvokeWrapper): New internal property.

	* backend/SingleSteppingEngine.cs
	(SSE.OperationStep): Enable stepping into method from objects
	deriving from MarshalByRefObject.

	* test/{testsuite|src}/TestSSE.cs: Added testcase.

2008-10-20  Martin Baulig  <martin@ximian.com>

	* interface/Report.cs: Include timestamps when writing to a file.

2008-10-19  Martin Baulig  <martin@ximian.com>

	* test/src/TestManagedTypes.cs
	(SimpleTypes): Move this into a separate class and use static
	variables, so the JIT can't optimize them away.

2008-10-19  Martin Baulig  <martin@ximian.com>

	* build/Makefile.am: Small fix from Ian Greenhoe; bug #431771.

2008-10-17  Cedric Vivier  <cedricv@neonux.com>

	* backend/SingleSteppingEngine.cs
	Enable StepInto for RemotingInvoke-wrapped methods.
	* classes/Method.cs
	(Method.IsInvokeWrapper): New public property.

2008-10-13  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs
	(Registers.ImportantRegisters): New public property.

2008-09-15  Martin Baulig  <martin@ximian.com>

	* languages/TargetObjectKind.cs (TargetObjectKind): Add `Null'.

	* languages/TargetObject.cs
	(TargetObject.Kind): Make this virtual.

	* languages/mono/MonoNullObject.cs
	(MonoNullObject.Kind): Override and return `TargetObjectKind.Null'.

2008-09-15  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoRuntime.cs
	(MonoRuntime.MonoArrayTypeGetBounds): New internal method; check
	whether the lower bounds are all zero.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.ReadType): Call it here, only throw an
	exception if we have upper bounds or some of the lower bounds are
	non-zero.

2008-09-04  Martin Baulig  <martin@ximian.com>

	* classes/GUIManager.cs
	(GUIManager.ProcessExitedEvent): New public event.

	* classes/Process.cs
	(Process.Lookup): New public method to lookup a `Method' from a
	`TargetAddress'.	

2008-08-21  Martin Baulig  <martin@ximian.com>

	* classes/GUIManager.cs
	(GUIManager.Stop): New public method to stop a thread.

2008-08-21  Martin Baulig  <martin@ximian.com>

	* classes/GUIManager.cs
	(GUIManager.OnTargetEvent): Ignore `TargetInterrupted' if we are
	already in break mode; auto-stop on `Exception' and
	`UnhandledException'.

2008-08-19  Martin Baulig  <martin@ximian.com>

	Fix a race condition: correctly block until
	`ActivatePendingBreakpoints' has actually been completed.

	* classes/Process.cs
	(Process.ActivatePendingBreakpoints): Wait until the command has
	been completed.

	* backend/ProcessServant.cs
	(ProcessServant.ActivatePendingBreakpoints): Take a
	`CommandResult' argument, so we can block on the operation.

	* backend/SingleSteppingEngine.cs
	(SSE.ManagedCallback): Take an additional `CommandResult' argument.
	(SSE.OperationManagedCallback): Correctly implement multiple
	callbacks; each callback now also have a CommandResult which we need
	to set to completed when done.

2008-08-19  Martin Baulig  <martin@ximian.com>

	* backend/ThreadManager.cs: Fixed a hard to find race condition.

2008-08-14  Martin Baulig  <martin@ximian.com>

	* symbolwriter/MdbSymbolReader.cs: Add `-verbose' command line
	argument and improve the scope variables check.

2008-08-14  Martin Baulig  <martin@ximian.com>

	* build/Makefile.am
	(verify-local): New target.  Run the symfile verifier here.
	(check-local): Run `verify-local'.

2008-08-14  Martin Baulig  <martin@ximian.com>

	* test/{src|testsuite}/TestActivateBreakpoints2.cs: New test.

2008-08-14  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-ptrace.c
	(server_ptrace_resume): New method; use this after receiving a
	`STOP_ACTION_INTERRUPTED' to resume the previously running
	stepi/continue.

	* backend/server/library.c
	(mono_debugger_server_resume): New public method.

	* backend/Inferior.cs
	(Inferior.Resume): New public method.

	* backend/SingleSteppingEngine.cs
	(SSE.ReleaseThreadLock): Call `inferior.Resume()' if we received a
	`ChildEventType.CHILD_INTERRUPTED'.  This fixes a race condition,
	if we are executing a OperationExecuteInstruction, for instance.

2008-08-13  Martin Baulig  <martin@ximian.com>

	* test/testsuite/TestAttach.cs
	(TestAttach.TearDown): Call `child.WaitForExit()' here since
	TestAttach.Kill() may not be run if the test is disabled.

	* test/testsuite/testnativeattach.cs
	(testnativeattach.TearDown): Call `child.WaitForExit()' here since
	testnativeattach.Kill() may not be run if the test is disabled.

2008-08-12  Martin Baulig  <martin@ximian.com>

	* test/{src|testsuite}/TestActivateBreakpoints.cs: New test.

2008-08-11  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(BreakCommand): Add `-gui' option to allow inserting breakpoints
	while the target is running.

2008-08-11  Martin Baulig  <martin@ximian.com>

	* classes/Process.cs
	(Process.ActivatePendingBreakpoints): New public method.

	* backend/SingleSteppingEngine.cs
	(SSE.OnModuleLoaded): Moved functionality into
	ActivatePendingBreakpoints().
	(SSE.ActivatePendingBreakpoints): New internal method.
	(SSE.OperationInsertBreakpoint): Check the return value from the
	runtime and pass it to mono.RegisterMethodLoadHandler().

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.RegisterMethodLoadHandler): When called from
	the SSE, we now take an additional `TargetAddress argument' which
	is the return value from the runtime; call method_from_jit_info()
	if necessary.

	* backend/ProcessServant.cs
	(ProcessServant.ActivatePendingBreakpoints): New method.

2008-08-11  Martin Baulig  <martin@ximian.com>

	* test/testsuite/testnativefork.cs: Override debugger config; this
	test needs "broken-threading = false", "stay-in-thread = true".

2008-08-05  Martin Baulig  <martin@ximian.com>

	Released version 2.0 "Cologne" of the Mono Debugger :-)

	* NEWS: Updated to 2.0.

	* configure.in: This is trunk, bump the version number to 2.1.

2008-07-31  Martin Baulig  <martin@ximian.com>

	* classes/Debugger.cs
	(Debugger.ModuleLoadedEvent): New public event.
	(Debugger.ModuleUnLoadedEvent): New public event.

2008-07-31  Martin Baulig  <martin@ximian.com>

	**** The Debugger has been branched for Mono 2.0 ****

2008-07-30  Martin Baulig  <martin@ximian.com>

	* configure.in: Bump version number to 0.99; we're ready to branch.

2008-07-30  Martin Baulig  <martin@ximian.com>

	* configure.in (--with-host-mono): New configure option to
	override the mono used to run child applications.

	* build/Makefile.am: Link against a private copy of the symbol
	writer to make things more robust; you may now install the
	debugger to run with an older /usr/bin/mono.  Create a new
	command-line tool called `mdb-symbolreader.exe' which is the
	new symbol file verifier.

2008-07-30  Martin Baulig  <martin@ximian.com>

	* symbolwriter/MdbSymbolReader.cs: New file.  This is a symbol
	file verifier which reads everything in a symbol file and checks
	whether everything is ok.  You can run this inside mdb to debug
	symbol file bugs.

2008-07-30  Martin Baulig  <martin@ximian.com>

	* symbolwriter/: Created private copy for the debugger.

	* symbolwriter/MonoSymbolWriter.cs: Moved `ISourceFile',
	`ICompileUnit' and `IMethodDef' into MonoSymbolFile.cs.

	* symbolwriter/MonoSymbolFile.cs
	(MonoSymbolFile.AnonymousScopes): New public property.

2008-07-29  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.read_variables): When inside an anonymous method,
	only allow accessing `this' if it has been captured.

2008-07-29  Martin Baulig  <martin@ximian.com>

	* backend/Inferior.cs
	(Inferior.HasSignals): New public property.
	(Inferior.Kernel_SIGRTMIN): New public property.

	* backend/ThreadManager.cs
	(ThreadManager.HandleChildEvent): `__SIGRTMIN' and `__SIGRTMIN+1'
	are used internally by glibc -> ignore __SIGRTMIN+1.

	* backend/server/server.h
	(SignalInfo): Add `kernel_sigrtmin'.

2008-07-29  Martin Baulig  <martin@ximian.com>

	* test/testsuite/testnative*.cs: Add "Native" category.

	* build/Makefile.am
	(EXCLUDED_TESTS): New variable to select tests which ware excluded
	from `make check';  exclude "NotWorking,Attach,Native,Threads,AppDomain"
	for everyone and a little bit less for me.

2008-07-28  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.IsExceptionType): Correctly resolve
	`type.BaseType'.

	* test/testsuite/TestException.cs: Added testcase for user-defined
	exception classes.	

2008-07-28  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(MemberAccessExpression.ResolveMemberAccess): When resolving an
	invocation expression on a value-type, also check `System.Object'.

	* test/testsuite/TestManagedTypes.cs: Added testcase.

2008-07-28  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassType.cs
	(MonoClassType.HasFixedSize) Set to true: 

	* test/testsuite/TestManagedTypes.cs: Added testcase.

2008-07-28  Martin Baulig  <martin@ximian.com>

	* test/testsuite/TestManagedTypes.cs: Added testcases for boxing
	valuetypes.	

2008-07-25  Martin Baulig  <martin@ximian.com>

	* configure.in: Disable XSP support by default.

2008-07-25  Martin Baulig  <martin@ximian.com>

	* languages/Language.cs
	(Language.CreateBoxedObject): New public method.

	* frontend/Expression.cs
	(CastExpression.DoCast): Add support for valuetype -> object.

	* backend/Inferior.cs
	(Inferior.CallMethod): Added overloaded version taking a `long'
	and a `TargetObject' argument; the object will be copied to the
	stack if it's stored in a register.

	* classes/Thread.cs
	(Thread.CallMethod): Added overloaded version taking a
	`TargetAddress' and a `TargetObject' argument; the object will be
	copied to the stack if it's stored in a register.

	* backend/SingleSteppingEngine.cs
	(SSE.OperationCallMethod): Add support for the new address /
	object marshaller.

	* backend/server/server.h
	(mono_debugger_server_call_method_3): New public method; added
	method-call marshaller for methods taking an address and a
	`MonoObject * '.

2008-07-23  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SSE.OperationStepCompilerGenerated): New operation.
	(SSE.frame_changed): Check whether we're in compiler-generated
	code and keep stepping if necessary.

2008-07-23  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(ShowLocationCommand): Improve `show location' a bit to support
	struct fields.	

2008-07-19  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(DisassembleCommand): Add `-frame' option to show disassembly for
	the current step frame, ie. all code which belongs to the current
	source line.

2008-07-19  Martin Baulig  <martin@ximian.com>

	* configure.in: Require Mono and XSP from the 2.0 branch.

2008-07-11  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SSE.ThreadLockData): New protected class; moved `stopped' and
	`stop_event' here from the SSE.
	(SSE): Replaced `has_thread_lock' with `ThreadLockData thread_lock'.
	(SSE.EventResult): Add `ParentResumed' -> the child operation has
	completed, but the target is running (ie. kill the child operation
	and then return `EventResult.Running').
	(SSE.ManagedCallback): New method; this is private for the moment,
	but I'd like to have this in SVN before flying back to Germany.
	(SSE.OperationManagedCallback): New operation.

2008-07-10  Martin Baulig  <martin@ximian.com>

	* backend/ProcessStart.cs
	(ProcessStart.SetupEnvironment): Set `MONO_GENERIC_SHARING = none'.

	* frontend/Command.cs (Attach): Effective immediately, attaching
	is no longer supported and has been disabled.

2008-07-04  Martin Baulig  <martin@ximian.com>

	* classes/GUIManager.cs
	(GUIManager): New public class; handles stopping / resuming all
	threads for a GUI.

	* classes/Process.cs
	(Process.StartGUIManager): New public method.

2008-07-02  Martin Baulig  <martin@ximian.com>

	* classes/Breakpoint.cs
	(Breakpoint.OnBreakpointBound): New protected internal virtual method.
	(Breakpoint.OnBreakpointError): Likewise.

2008-06-30  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.OpaqueFileNames): New public property;
	allows us to use Windows file names.

2008-06-18  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadVersion.cs
	(MonoDebuggerInfo): The stable version is 80.

	* configure.in: The stable symbol file version is 50.0.

2008-06-18  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.xsd: Add <DirectoryMaps> section
	containing `<Map from="c:/cygwin/home/ichotolot" to="/work/mordor"/>'
	entries.

	* classes/SourceInfo.cs
	(SourceFile.ctor): Added `DebuggerSession' argument; do directory maps.

2008-06-17  Jb Evain  <jbevain@novell.com>

	* configure.in: detect the internal Cecil library that
	comes with Mono.
	* build/Makefile.am: use Mono's version of Cecil.

2008-06-17  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoMethod.IsCompilerGenerated): Check the `[DebuggerHidden]' and
	`[CompilerGenerated]' custom attributes on the method.

2008-06-15  Martin Baulig  <martin@ximian.com>

	Fix thread-db for SuSE 11 - we need to return the correct PID in
	ps_getpid().	

	* backend/server/thread-db.h (ThreadDbHandle): Added `pid' field;
	we need to store the PID here for ps_getpid().

	* backend/server/thread-db.c
	(mono_debugger_thread_db_init): Added `pid' argument.
	(ps_getpid): Return the stored `pid'.

	* backend/ThreadDB.cs
	(ThreadDB.Create): Take an `Inferior' instead of a
	`TargetMemoryAccess' since we need the target's pid.

2008-06-11  Martin Baulig  <martin@ximian.com>

	* build/Makefile.am: Merge Mono.Debugger.dll and
	Mono.Debugger.Backend.dll into Mono.Debugger.dll.

2008-06-10  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MethodAddress): Check whether prologue_end and epilogue_begin are
	non-zero.

2008-06-07  Martin Baulig  <martin@ximian.com>

	* configure.in: Require the new symbol writer.

2008-06-05  Lluis Sanchez  <lluis@novell.com>

	* mono-debugger.pc.in: Add Mono.Debugger.Backend.dll to Libs
	list. Needed until some types required by the MonoDevelop
	add-in are moved to the public API.

2008-06-05  Martin Baulig  <martin@ximian.com>

	* classes/Method.cs
	(Method.IsCompilerGenerated): New public abstract property.

	* backend/SingleSteppingEngine.cs
	(SSE.MethodHasSource): Also check `method.IsCompilerGenerated'.

2008-06-02  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SSE.OperationStep.IsSourceOperation): Add `StepMode.Finish'.
	(SSE.OperationStep.check_method_operation): New protected method;
	don't stop inside the method's epilogue code.
	(SSE.OperationStep.Step): If we're done stepping, call
	check_method_operation() to check whether we stopped inside a
	method's epilogue code.

2008-05-28  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs: Reflect latest symbol writer
	changes; we now require the latest Mono from SVN HEAD.

2008-05-26  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoMethodLineNumberTable): Compute start and end row here.

2008-05-26  Martin Baulig  <martin@ximian.com>

	* languages/TargetFunctionType.cs
	(TargetFunctionType.GetSourceCode): New public method.
	(TargetFunctionType): Removed `HasSourceCode', `SourceFile',
	`StartRow' and `EndRow'.

	* frontend/Command.cs
	(SourceCommand): Allow resolving to a `MethodSource' instead of a
	`SourceLocation'.
	(ListCommand): If we have a `MethodSource', list the method's
	entire source code.	

2008-05-26  Martin Baulig  <martin@ximian.com>

	* classes/SourceInfo.cs
	(SourceFile): Made this class abstract.
	(SourceFile.IsAutoGenerated): New public property.
	(SourceFile.CheckModified): New public method.

	* frontend/Command.cs
	(ShowSourcesCommand): When used without args: print the sources
	from the current stack frame's module.

	* frontend/ScriptingContext.cs
	(ScriptingContext.ShowSources): Check whether a source file has
	been modified; hide auto-generated files when running in xsp mode.

2008-05-19  Martin Baulig  <martin@ximian.com>

	Kahalo-only.
	
	* classes/DebuggerOptions.cs: -xsp now requires a directory as
	argument which is passed to xsp via `--root'.

2008-05-19  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration): Add `NotifyUser_ThreadCreation'.

2008-05-19  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.Start): Use WaitAll(), not Wait() - to make things
	work correctly when using `-start' and a thread which is not the
	main thread stops first.
	(Interpreter.Attach): Likewise.
	(Interpreter.LoadSession): Likewise.

2008-05-19  Martin Baulig  <martin@ximian.com>

	Kill the `MONO_INSIDE_MDB' environment variable.

	* backend/MonoThreadManager.cs
	(MonoDebuggerInfo.UsingMonoDebugger): New public field.
	(MonoThreadManager): Set `UsingMonoDebugger' when starting up and
	after exec()'ing.

	* backend/ProcessServant.cs
	(ProcessServant.Initialize): If we exec()'ed a managed process,
	call MonoThreadManager.InitializeAfterExec().

2008-05-19  Martin Baulig  <martin@ximian.com>

	* backend/ThreadManager.cs
	(ThreadManager.HandleChildEvent): Eat SIGCHLD.

	* backend/SingleSteppingEngine.cs
	(SSE.ProcessEvent): if ThreadManager.HandleChildEvent() told us to
	resume the target, try `current_operation.ResumeOperation()' first
	before using `inferior.Continue ()'.

2008-05-19  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.WaitAll): Rescan the process/thread list when new
	processes/threads have been created while we're waiting.

	* test/{src|testsuite}/TestMultiThread2.cs: Add testcase.

2008-05-19  Martin Baulig  <martin@ximian.com>

	* backend/server/x86_64-arch.c
	(x86_arch_child_stopped): Only send `STOP_ACTION_NOTIFICATION' if
	`stopsig == SIGTRAP' (we may stop a second time at the notification
	address if we received a signal).

	* backend/server/i386-arch.c
	(x86_arch_child_stopped): Likewise.

2008-05-16  Martin Baulig  <martin@ximian.com>

	Kahalo-only: Add support for `#line hidden'.

	* classes/Method.cs
	(LineEntry.IsHidden): New public property.

	* languages/mono/MonoSymbolFile.cs
	(MonoLineNumberTable.Lookup): Support hidden lines.

	* test/{src|testsuite}/TestLineHidden.cs: New testcase.

2008-05-14  Martin Baulig  <martin@ximian.com>

	Allow executing methods while being stopped at a system call.

	* backend/server/x86_64-arch.c
	(server_ptrace_call_method*): Set %orig_rax to -1 to prevent the
	kernel from restarting a system call.
	(server_ptrace_execute_instruction): Likewise.

	* backend/server/i386-arch.c
	(server_ptrace_call_method*): Set %orig_eax to -1 to prevent the
	kernel from restarting a system call.
	(server_ptrace_execute_instruction): Likewise.

	* backend/SingleSteppingEngine.cs
	(SSE.OperationCallMethod): Fix method invocations while being
	stopped at a system call.  This only works when debugging managed
	applications.	

2008-05-08  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SSE.OperationStart.HandleException): Don't stop in exceptions
	after reaching the managed Main().

2008-05-07  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs: Add new `-xsp' option to start xsp
	inside the debugger.

	* configure.in: Conditionally depend on XSP when using the
	development branch.

2008-05-07  Martin Baulig  <martin@ximian.com>

	* classes/Debugger.cs
	(Debugger.ProcessReachedMainEvent): New public event.

	* backend/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): Emit the new
	`ProcessReachedMainEvent' from  `NotificationType.ReachedMain'.

	* backend/ProcessServant.cs
	(ProcessServant.Initialize): Emit the new
	`ProcessReachedMainEvent' if we're a native process.

2008-05-07  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs: Kill `-args'.

2008-05-07  Martin Baulig  <martin@ximian.com>

	* backend/ProcessServant.cs
	(ProcessServant.ChildForked): Unset `MONO_INSIDE_MDB' if we're not
	following forks.

2008-05-06  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(SimpleNameExpression.DoResolve): Also call Process.LookupSymbol()
	and return a NumberExpression containing the address on success.

	* frontend/Command.cs
	(BreakCommand.DoResolve): Also call Process.LookupSymbol() to
	allow breakpoints on native methods.

	* classes/Process.cs
	(Process.LookupSymbol): New public method.

	* backend/ProcessServant.cs
	(ProcessServant.LookupSymbol): New public method; does a native
	symbol lookup via the BfdContainer.

2008-05-06  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(WrapperMethod): Make GetParameters() and GetLocalVariables()
	return an empty array instead of null.

2008-05-06  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(ShowCommand.ShowParametersCommand): Don't crash if the current
	method doesn't have any parameters.
	(ShowCommand.ShowLocalsCommand): Likewise.

2008-05-05  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture_X86_64.cs
	(Architecture_X86_64.unwind_method): Use `memory.ReadLongInteger()'
	to read the registers from the stack.

2008-04-29  Martin Baulig  <martin@ximian.com>

	* classes/Method.cs
	(LineEntry.File): New public field.

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile): Add support for line numbers from other source
	files if we're using the symbol writer from the kahalo branch.

2008-04-29  Martin Baulig  <martin@ximian.com>

	* configure.in: Enable building with a runtime / symbol writer
	from both HEAD and the kahalo branch.

2008-04-24  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(Convert.ExplicitFundamentalConversion): New public method.
	(CastExpression): Implement explicit fundamental conversions.

2008-04-24  Martin Baulig  <martin@ximian.com>

	* test/testsuite/TestManagedTypes.cs: Add some testcases to parse
	all kinds of crazy numbers.

2008-04-23  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs
	(TestSuite.Verbose): Set to false.

2008-04-23  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(ShowCommand.ShowSourcesCommand): Fix #345172.

2008-04-23  Martin Baulig  <martin@ximian.com>

	* build/runtests.in: Use `--debug=mdb-optimizations' so we can
	better attach to the process or examine core files.

2008-04-22  Martin Baulig  <martin@ximian.com>

	Fix an API bug: target output is always per process.

	* classes/Debugger.cs
	(Debugger.TargetOutputEvent): Moved to `Process'.

	* classes/Process.cs
	(Process.TargetOutputEvent): Moved here from `Debugger'.

2008-04-22  Martin Baulig  <martin@ximian.com>

	Fix a race condition causing problems when reading output from a
	child process.

	* backend/server/x86-ptrace.c
	(server_ptrace_io_thread_main): Close the pipes here, not in
	server_ptrace_finalize() since we may still be reading.

2008-04-22  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-ptrace.c
	(server_ptrace_dispatch_event): Map SIGCONT => 0.

2008-04-22  Martin Baulig  <martin@ximian.com>

	* test/misc/libgtop-glue.[ch]: Moved to backend/server/.

	* backend/server/Makefile.am
	(libmonodebuggerserver_la_SOURCES): Added libgtop-glue.[ch].

2008-04-21  Martin Baulig  <martin@ximian.com>

	* configure.in: Require runtime version 69.

2008-04-21  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoThreadManager.InitializeAfterAttach): New internal method.
	(MonoThreadManager.Detach): New internal method.

	* backend/SingleSteppingEngine.cs
	(SSE.OperationStart): We don't need to call any methods in the
	target anymore when attaching.
	(SSE.OperationAttach): Removed.
	(SSE.OperationDetach): Removed.
	(SSE.OperationGetLMFAddr): Removed.

2008-04-21  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-ptrace.c
	(mono_debugger_server_initialize_code_buffer): New public function.

	* backend/MonoThreadManager.cs
	(MonoThreadManager.HasCodeBuffer): New internal property.
	(MonoThreadManager.InitCodeBuffer): New internal method; allows
	delayed initialization of the code buffer.

	* backend/SingleSteppingEngine.cs
	(SSE.step_over_breakpoint): Also use `OperationExecuteInstruction'
	for the nop-case.
	(SSE.OperationExecuteInstruction): Check whether the code buffer
	has already been initialized and trigger an init if necessary.
	(SSE.OperationInitCodeBuffer): New private callback; calls the new
	`init_code_buffer' method.

2008-04-19  Martin Baulig  <martin@ximian.com>

	* backend/arch/Bfd.cs
	(Bfd.OnModuleChanged): Always try to load the CFA if available;
	also when loading of native symtabs is disabled.

	* backend/arch/DwarfFrameReader.cs
	(DwarfFrameReader.UnwindStack): Small fix for `.eh_frame'.

2008-04-16  Martin Baulig  <martin@ximian.com>

	* library.c (mono_debugger_server_get_registers_from_core_file):
	New public function.

	* backend/arch/CoreFile.cs
	(CoreFile.CoreFileThread.read_registers): Read it here to
	correctly read the registers.

2008-04-16  Martin Baulig  <martin@ximian.com>

	* test/misc/libgtop-glue.c: Copy implementation from libgtop so we
	can use this on the build machines.

	* configure.in: Don't require libgtop anymore.

2008-04-15  Martin Baulig  <martin@ximian.com>

	* backend/server/server.h
	(mono_debugger_server_spawn): Removed the two `ChildOutputHandler's;
	return a `IOTheadData *' pointer instead.
	(mono_debugger_server_io_thread_main): New public function; we now
	start the io thread from managed code and then call this function
	with the `IOThreadData *' returned by mono_debugger_server_spawn().

	* backend/Inferior.cs
	(Inferior.TargetOutput): Removed.
	(Inferior.Run): Start the io thread here in managed land and
	directly call `process.OnTargetOutput ()'.

2008-04-14  Martin Baulig  <martin@ximian.com>

	* configure.in: Conditionally check for libgtop; it's only used in
	the test suite to display some memory usage statistics.

	* test/misc/: New directory; contains a simple managed wrapper
	around libgtop to gather some statistics while running the tests.

	* build/runtests: New script to run the tests; correctly sets
	LD_LIBRARY_PATH so we can run the test suite without doing a `make
	install' first.

	* test/testsuite/NUnit.cs
	(TestSuite.PrintMemoryInfo): New public method; uses libgtop to
	print some memory statistics about the current process; only
	available if compiled with libgtop support.

2008-04-14  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-linux-ptrace.c
	(_server_ptrace_finalize_inferior): New static function.

	* backend/server/x86-ptrace.c
	(server_ptrace_finalize): Don't leak file descriptors.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.Dispose): Use the `symfile_hash', not the
	`symfile_by_index' hash to finalize symbol files.

2008-04-09  Martin Baulig  <martin@ximian.com>

	* test/{testsuite|src}/TestIterator.cs: Reflect latest gmcs changes.

2008-04-08  Martin Baulig  <martin@ximian.com>

	* languages/TargetArrayType.cs
	(TargetArrayBounds): New public class.
	(TargetArrayType.IsByRef): Don't set this here; we need to set
	this to `true' for managed arrays and `false' for native ones.

	* languages/TargetArrayObject.cs
	(TargetArrayObject.GetArrayBounds): New public method returning
	the `TargetArrayBounds'; this was formerly a private method.
	(TargetArrayObject): Removed GetLowerBound() and GetUpperBound().

	* languages/native/NativeArrayType.cs
	(NativeArrayType): Improved support for native arrays; we now
	support multi-dimensional arrays and unbound arrays.

	* test/src/testnativetypes.c: Added tests.
	* test/testsuite/testnativetypes.cs: Added tests.

2008-04-08  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs: Swap behavior of `-start' and `-run'
	to make it consistent with the `start' and `run' commands.

2008-04-07  Martin Baulig  <martin@ximian.com>

	Implemented support for native function pointers.

	* languages/native/NativeFunctionPointer.cs: New file.
	* languages/native/NativeFunctionObject.cs: New file.

	* frontend/Expression.cs
	(PointerDereferenceExpression): Improved this.

	* languages/TargetPointerType.cs
	(TargetPointerType.CanDereference): New public abstract property.

	* test/src/testnativetypes.c: Added tests.
	* test/testsuite/testnativetypes.cs: Added tests.

2008-04-03  Martin Baulig  <martin@ximian.com>

	* backend/ProcessServant.cs
	(ProcessServant.OnManagedThreadExitedEvent): New internal method;
	remove the thread from the hash, but don't emit any events.

	* backend/SingleSteppingEngine.cs
	(SSE.OnManagedThreadExited): Fix a race condition: call
	`process.OnManagedThreadExitedEvent()'.

2008-03-24  Wade Berrier  <wberrier@novell.com>

	* Makefile.am:
	* doc/Makefile.am:
	Fix EXTRA_DIST (missing files) to fix build

2008-03-15  Martin Baulig  <martin@ximian.com>

	Released version 0.80 "Terrania City" of the Mono Debugger :-)

	* NEWS: Updated to 0.80.

2008-03-15  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs: Swap the behavior of `run' and `start':
	`run' now stops in main again.

2008-03-15  Martin Baulig  <martin@ximian.com>

	* build/Makefile.am: Install in $(prefix)/lib/mono/2.0.

2008-03-14  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.cs: Don't use XmlValidatingReader.
	* classes/DebuggerSession.cs: Don't use XmlValidatingReader.

2008-03-14  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile): Make sure it's the correct file format.

2008-03-14  Martin Baulig  <martin@ximian.com>

	* configure.in: Bump version number to 0.80.

2008-03-14  Martin Baulig  <martin@ximian.com>

	**** Merged the `terrania' branch of the Mono Debugger ****

2008-03-13  Martin Baulig  <martin@ximian.com>

	Fix #324557.

	* backend/server/x86_64-arch.h: Don't #include <asm/user.h>; use
	<sys/user.h> instead which defines `struct user_fpregs_struct'.

	* backend/server/i386-arch.h: Likewise.

2008-03-10  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(JitCodeBlockEntry): Removed.
	(MonoSymbolFile.MonoCodeBlock): Read the code blocks directly from
	the symbol file and compute their start and end addresses from the
	line number table.

2008-03-05  Martin Baulig  <martin@ximian.com>

	* languages/TargetMethodSignature.cs: New file.
	(TargetMethodSignature): New public abstract class.

	* languages/TargetType.cs
	(TargetType.ContainsGenericParameters): New public abstract
	property.

	* languages/TargetFunctionType.cs
	(TargetFunctionType.GetSignature): New public abstract method.

	* languages/TargetMember.cs
	(TargetMemberAccessibility): New public enum.
	(TargetMemberInfo.Accessibility): New public readonly field.

	* frontend/Style.cs
	(Style.FormatStruct): Sort the members by their accessibility.

2008-02-28  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs
	(ScriptingContext.MonoObjectToString): Operate on
	`TargetStructObject' so we can also print generic instances.

2008-02-27  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): Store the return stack
	pointer in `NotificationType.ReachedMain'.

2008-02-27  Martin Baulig  <martin@ximian.com>

	* languages/TargetClass.cs
	(TargetClass.GetProperties): New public abstract method.

2008-02-26  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassType.cs
	(IMonoStructType.LookupFunction): New interface method.

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.LookupFunction): Moved into `IMonoStructType'.
	With generics, we can't just use the `token' as a key, so we need
	a separate hash table per class.

2008-02-19  Martin Baulig  <martin@ximian.com>

	* README.terrania: Updated.

2008-02-19  Martin Baulig  <martin@ximian.com>

	* languages/TargetClassType.cs
	(TargetClassType.IsCompilerGenerated): New public abstract property.

	* frontend/Expression.cs
	(Expression.DoEvaluateObject): Don't use the result of
	TargetStructObject.GetCurrentObject() if it's a compiler generated
	class; this should fix iterators and print the `IEnumerable<T>'
	interface instead.

2008-02-19  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.GetMethodName): Use a format which is compatible
	with mcs's GetSignatureForError().

2008-02-18  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoMethod.do_read_variables): Support a captured 'this'.

2008-02-18  Martin Baulig  <martin@ximian.com>

	Improved iterator support and added some tests.

	* test/{src|testsuite}/TestIterator.cs: New tests.

2008-02-18  Martin Baulig  <martin@ximian.com>

	* backend/arch/Instruction_I386.cs
	(Instruction_I386.GetMonoTrampoline): Support short 0x6a `push' insns.

2008-02-15  Martin Baulig  <martin@ximian.com>

	* classes/Block.cs: New file.
	(Block): New public abstract class.
	(Method.IsIterator): New internal abstract property.
	(Method.LookupBlock): New internal abstract method.

	* backend/SingleSteppingEngine.cs
	(SSE.frame_changed): Use the new Method.LookupBlock() to check
	which code block we're in and start an `OperationStepIterator' if
	necessary.	
	(SSE.OperationStepIterator): New operation.

2008-02-15  Martin Baulig  <martin@ximian.com>

	* test/{testsuite|src}/TestSSE.cs: New tests.

	* test/{testsuite|src}/TestAnonymous.cs: Added new tests here.

2008-02-15  Martin Baulig  <martin@ximian.com>

	* classes/TargetBinaryReader.cs
	(TargetBinaryReader): Added ReadSByte() and PeekSByte().

	* backend/arch/X86_Instruction.cs: Use ReadSByte(), not ReadByte().

2008-02-08  Martin Baulig  <martin@ximian.com>

	* languages/TargetStructType.cs
	(TargetStructType.BaseName): New public abstract property.  This
	is the full name (including namespace and generic arity) without
	the type arguments.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.RegisterMethodLoadHandler): Use
	`TargetStructType.BaseName' to insert the breakpoint.

	* test/{testsuite|src}/TestAnonymous.cs: Added new tests here.

2008-02-06  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs: Also scan for `// @MDB BREAKPOINT: name'
	patterns and automatically insert breakpoints.

2008-02-02  Martin Baulig  <martin@ximian.com>

	HEADS UP: We now require Mono 1.9 with some local changes; see
	          README.terrania for details.

	* README.terrania: New file.

2008-02-02  Martin Baulig  <martin@ximian.com>

	* languages/mono/CapturedVariable.cs: New file.

	* languages/mono/MonoSymbolFile.cs
	(MonoMethod.do_read_variables): Support captured variables and
	parameters.	

2008-02-02  Martin Baulig  <martin@ximian.com>

	* test/testuite/NUnit.cs: Read the source files and scan for
	`// @MDB LINE: name' patterns; automatically compute the line
	numbers.

	* test/{testsuite|src}/TestAnonymous.cs: New test.

2008-01-30  Martin Baulig  <martin@ximian.com>

	* classes/Method.cs
	(WrapperType): Updated.
	(Method.IsWrapper): New public abstract property.

	* backend/SingleSteppingEngine.cs
	(SSE.OperationStep.TrampolineHandler): Improved; don't step into
	compiler-generated .ctor's.

2008-01-30  Martin Baulig  <martin@ximian.com>

	* languages/TargetClass.cs
	(TargetClass.GetMethods): New public abstract method.
	(TargetClass.FindMember): New public virtual method.

	* languages/TargetFunctionType.cs
	(TargetFunctionType.DeclaringType): Changed type from
	`TargetClassType' into `TargetStructType'.

	* languages/mono/MonoFunctionType.cs
	(MonoFunctionType.MonoClass): Removed.
	(MonoFunctionType.SymbolFile): New internal property.
	(MonoFunctionType.ResolveClass): New internal method.

	* languages/mono/MonoMember.cs
	(MonoMethodInfo): Operate on `IMonoStructType'.

	* frontend/Expression.cs
	(StructAccessExpression.FindMember): Search both in the
	`TargetClass' and in the `TargetClassType'.

2008-01-25  Martin Baulig  <martin@ximian.com>

	* test/{testsuite|src}/TestRecursiveGenerics.cs: New test.

2008-01-25  Martin Baulig  <martin@ximian.com>

	Fix the parent type madness.

	* languages/TargetClass.cs
	(TargetClass.Type): Changed type into `TargetStructType'.
	(TargetClass.RealType): New public property.

	* languages/Language.cs
	(Language.IsExceptionType): New public method.

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo.ReadClassInfo): Create `info.type' here.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.LookupMonoClass): Fix the madness; just call
	ReadClassInfo() here and return its `RealType'.

	* languages/mono/MonoClassType.cs
	(IMonoStructType.ClassInfo): New property.
	(IMonoStructType.ResolveClass): Removed the `MonoClassInfo' argument.
	(MonoClassType.ResolveClass): Maintain a `resolved' flag instead
	of checking whether `class_info' is not null; the `class_info' may
	now be set via `IMonoStructType.ClassInfo' without actually
	resolving the class.  This was necessary to support recursive
	generic types like "class Test : Foo<Test>".

2008-01-25  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs
	(Thread.RuntimeInvoke): Changed type of `object_argument' from
	`TargetClassObject' -> `TargetStructObject'.

	* backend/ThreadServant.cs
	(ThreadServant.RuntimeInvoke): Changed type of `object_argument'
	from `TargetClassObject' -> `TargetStructObject'.

	* frontend/Interpreter.cs
	(Interpreter.RuntimeInvoke): Changed type of `object_argument' from
	`TargetClassObject' -> `TargetStructObject'.

2008-01-25  Martin Baulig  <martin@ximian.com>

	* frontend/CSharpTokenizer.cs
	(CSharpTokenizer.ReadGenericArity): New public property.
	(CSharpTokenizer.ReadDigit): If `ReadGenericArity' is true, only
	read an integer and stop on the first non-digit.  This is
	necessary to properly tokenize "Foo`1.Data".

2008-01-23  Martin Baulig  <martin@ximian.com>

	Added `$parent (expr)' and `$parent+N (expr)' syntax.

	* frontend/CSharpExpressionParser.jay
	(PARENT): New token.
	(PARENT opt_parent_level OPAREN expression CPAREN): New rule.

	* frontend/CSharpTokenizer.cs: Add `$parent' => `Token.PARENT'.

	* frontend/Expression.cs
	(ParentExpression): New expression.

	* test/testsuite/TestSimpleGenerics.cs: Added tests.

2008-01-23  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.GetMethodName): Include type parameters.

2008-01-23  Martin Baulig  <martin@ximian.com>

	* languages/TargetStructObject.cs
	(TargetStructObject.GetParentObject): Provide the `Thread'
	implementation here; made the `TargetMemoryAccess' version
	abstract.
	(TargetStructObject.GetCurrentObject): Moved here from
	`TargetClassObject'; changed return type into
	`TargetStructObject'; provide the `Thread' implementation here;
	made the `TargetMemoryAccess' version abstract.

2008-01-23  Martin Baulig  <martin@ximian.com>

	* classes/Method.cs
	(Method.GetDeclaringType): Return a `TargetStructType' instead of
	a `TargetClassType'.

2008-01-23  Martin Baulig  <martin@ximian.com>

	* test/{testsuite|src}/TestSimpleGenerics.cs: New test.

2008-01-19  Martin Baulig  <martin@ximian.com>

	* configure.in: Use gmcs, not mcs.

2008-01-19  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassType.cs
	(IMonoStructType): New internal interface.
	(MonoClassType): Make things work if our parent class is a
	`MonoGenericInstanceType' and not a `MonoClassType'.

2008-01-17  Martin Baulig  <martin@ximian.com>

	* languages/TargetObjectKind.cs
	(TargetObjectKind): Added `GenericParameter' and `GenericInstance'.

	* languages/TargetGenericParameterType.cs: New file.
	(TargetGenericParameterType): New type.

	* languages/TargetGenericInstanceType.cs: New file.
	(TargetGenericInstanceType): New type.

	* languages/TargetGenericInstanceObject.cs: New file.
	(TargetGenericInstanceObject): New file.

	* languages/TargetStructObject.cs
	(TargetStructObject.GetParentObject): Moved here from
	`TargetClassObject' and changed return type into
	`TargetStructType'.

	* languages/TargetClassObject.cs
	(TargetClassObject.GetParentObject): Moved into
	`TargetStructObject' and changed return type into
	`TargetStructType'.

	* languages/mono/MonoGenericInstanceObject.cs: New file.
	* languages/mono/MonoGenericParameterType.cs: New file.

2007-12-18  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo): Merge get_fields() and get_field_offsets().

2007-12-18  Martin Baulig  <martin@ximian.com>

	Released version 0.60 "Madrid" of the Mono Debugger :-)

	* configure.in: Require Mono >= 1.2.6.

2007-12-14  Wade Berrier  <wberrier@novell.com>

	* frontend/Makefile.am:
	* test/src/Makefile.am:
	* test/testsuite/Makefile.am:
	* backend/arch/Makefile.am:
	* classes/Makefile.am:
	* interface/Makefile.am:
	* languages/Makefile.am:
	More .cs globbing for EXTRA_DIST

2007-12-10  Martin Baulig  <martin@ximian.com>

	* languages/TargetClass.cs
	(TargetClass.GetField): Take a `TargetStructObject' instead of a
	`TargetClassObject'.
	(TargetClass.SetField): Likewise.

2007-12-10  Martin Baulig  <martin@ximian.com>

	* languages/TargetStructType.cs: New file.
	(TargetStructType): New public abstract type.

	* languages/TargetStructObject.cs: New file.
	(TargetStructObject): New public abstract type.

	* languages/TargetClassType.cs
	(TargetClassType): Derive from `TargetStructType'; removed
	`HasParent', `GetClass', `Module' and `ParentType' which are now
	provided by `TargetStructType'.

	* languages/TargetClassObject.cs
	(TargetClassObject): Derive from `TargetClassObject'.

2007-12-10  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs: Added new `-start' command line
	argument to stop in Main(); made `-run' run the target without
	stopping.  This makes the command line arguments consistent with
	the `start' and `run' commands.

2007-12-10  Martin Baulig  <martin@ximian.com>

	Applied a patch from Harald Krapfenbauer <krapfenbauer@ict.tuwien.ac.at>:

	* backend/server/i386-arch.c
	(x86_arch_get_registers): Store the return value each time to
	`result' to check for errors.

	* backend/server/x86_64-arch.c
	(x86_arch_get_registers): Store the return value each time to
	`result' to check for errors.

	* backend/server/x86-linux-ptrace.c
	(server_ptrace_get_application): Increase size of `buffer' by 1.

2007-12-08  Martin Baulig  <martin@ximian.com>

	* configure.in: Bumped version number to 0.60.

2007-12-08  Martin Baulig  <martin@ximian.com>

	Changed default behavior: don't follow fork() by default.

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.FollowFork): Changed default to false.

	* test/testsuite/NUnit.cs
	(NUnitInterpreter.ctor): Override configuration: enable `FollowFork'.

2007-12-08  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(ConfigCommand): New command.

2007-12-08  Martin Baulig  <martin@ximian.com>

	* backend/Inferior.cs
	(Inferior): Replaced InitializeAfterFork() by DetachAfterFork().

	* backend/SingleSteppingEngine.cs
	(SSE.InitAfterFork): New method.
	(OperationInitializeAfterFork): New operation.  To avoid a race
	condition, we need to wait until the target stopped the first time
	before we can disable the local breakpoints.

	* backend/server/server.h
	(mono_debugger_server_init_after_fork): Renamed info
	mono_debugger_server_detach_after_fork().

	* backend/server/x86-arch.h
	(x86_arch_enable_breakpoint): Add prototype.
	(x86_arch_disable_breakpoint): Add prototype.

	* backend/server/i386-arch.c
	(do_enable): Renamed into x86_arch_enable_breakpoint().
	(do_disable): Renamed into x86_arch_disable_breakpoint().

	* backend/server/x86_64-arch.c
	(do_enable): Renamed into x86_arch_enable_breakpoint().
	(do_disable): Renamed into x86_arch_disable_breakpoint().

2007-12-08  Martin Baulig  <martin@ximian.com>

	* backend/ProcessServant.cs
	(ProcessServant.ChildForked): Implement detach-after-fork, ie. not
	following fork().  At the moment, this can only be enabled in the
	configuration file
	[FIXME: add user-interface option to enable/disable this].

	* backend/Inferior.cs
	(Inferior.InitializeAfterFork): Added `bool follow_fork' argument.

	* backend/server/server.h
	(mono_debugger_server_init_after_fork): Added
	`gboolean follow_fork' argument; remove all breakpoints if false.

2007-12-08  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.FollowFork): New property.  Not yet implemented.

2007-12-08  Martin Baulig  <martin@ximian.com>

	* backend/ThreadDB.cs
	(ThreadDB.GetThreadInfo): Added `TargetMemoryAccess' argument;
	operate on that target.  This fixes the XSP issue.

2007-12-07  Martin Baulig  <martin@ximian.com>

	Unify registers on i386 and x86_64.

	* backend/arch/X86_Architecture.cs: New file.
	(X86_Architecture): New internal abstract class.
	(X86_Register): New internal enum.

	* backend/arch/Architecture_X86_64.cs
	(X86_64_Register): Removed; use `X86_Register' instead.

	* backend/arch/Architecture_I386.cs
	(I386Register): Removed; use `X86_Register' instead.

	* backend/server/x86-arch.h
	(DebuggerX86Register): Use an unified register representation on
	i386 and x86_64.

2007-12-05  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture_X86_64.cs
	(X86_64_Register): Actually sync with backend/arch/x86_64-arch.h.

2007-11-30  Martin Baulig  <martin@ximian.com>

	* languages/TargetClassType.cs
	(TargetClassType.StaticFields): Merged with `Fields'.
	(TargetClassType.StaticProperties): Merged with `Properties'.
	(TargetClassType.StaticEvents): Merged with `Events'.
	(TargetClassType.StaticMethods): Merged with `Methods'.
	(TargetClassType.StaticConstructors): Merged with `Constructors'.
	(TargetClassType.FindMember): Provide a virtual implementation here.

2007-11-28  Martin Baulig  <martin@ximian.com>

	* languages/TargetClass.cs
	(TargetClass.GetFields): New public method; this includes both
	instance and static fields.

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo.GetFields): Get the field types from the runtime
	and not from Cecil.

	* frontend/ObjectFormatter.cs
	(ObjectFormatter.FormatClassObject): Use the new `TargetClass' to
	display fields.

2007-11-28  Martin Baulig  <martin@ximian.com>

	* languages/TargetClass.cs
	(TargetClass): New public abstract class.

	* languages/TargetClassType.cs
	(TargetClassType.GetClass): New public method.
	(TargetClassType): Removed GetStaticField() and SetStaticField(),
	they're now in the `TargetClass'.

	* languages/TargetClassObject.cs
	(TargetClassObject): Removed GetField() and SetField(), they're
	now in the `TargetClass'.

2007-11-28  Martin Baulig  <martin@ximian.com>

	* languages/TargetFunctionType.cs
	(TargetFunctionType.GetMethodAddress): Removed.

	* languages/mono/MonoClassType.cs
	(MonoClassType.HardResolveClass): Removed.

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.OperationRuntimeInvoke): Call
	GetMethodAddress() directly on the `MonoClassInfo'.

2007-11-28  Martin Baulig  <martin@ximian.com>

	* languages/TargetFundamentalObject.cs
	(TargetFundamentalObject.GetObject): Added internal overloaded
	version taking a `TargetMemoryAccess'.

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine): Kill some more `sse.Thread' madness.

	* backend/Inferior.cs
	(Inferior.RuntimeInvoke): Removed the `Thread' argument.

2007-11-28  Martin Baulig  <martin@ximian.com>

	Renamed `Mono.Debugger.Backends' => `Mono.Debugger.Backend'.

2007-11-28  Martin Baulig  <martin@ximian.com>

	* backend/arch/X86_Instruction.cs
	(X86_Instruction.GetMonoTrampoline): New protected abstract method.
	(X86_Instruction.CheckTrampoline): Implement this here.

2007-11-28  Martin Baulig  <martin@ximian.com>

	* backend/TargetMemoryAccess.cs
	(TargetMemoryAccess): Moved `TargetIntegerSize',
	`TargetLongIntegerSize', `TargetAddressSize', `IsBigEndian',
	`CanWrite' and `Write*' here from `TargetAccess'.
	(TargetAccess): Removed everything except `InsertBreakpoint' and
	`RemoveBreakpoint'.

	* classes/DebuggerSession.cs
	(IExpressionParser): Operate on `Thread', not `TargetMemoryAccess'.
	(DebuggerSession.ParseLocation): Likewise.

	* classes/Thread.cs
	(Thread): Don't derive from `TargetAccess'.

	* classes/Breakpoint.cs
	(Breakpoint.Resolve): Operate on `Thread', not `TargetMemoryAccess'.

	* backend/ThreadServant.cs
	(ThreadServant): Don't derive from `TargetAccess' or
	`TargetMemoryAccess'.	

	* backend/arch/Architecture.cs
	(Architecture): Operate on `TargetMemoryAccess', not `Thread'.

	* backend/Inferior.cs
	(Inferior): Derive from `TargetAccess', not `TargetMemoryAccess'.

	* backend/MonoThreadManager.cs
	(MonoMetadataInfo): Moved into ../languages/mono/MonoRuntime.cs.

	* languages/Target*Object.cs
	(Target*Object): Operate on `Thread', not `TargetMemoryAccess'.

	* languages/Target*Type.cs
	(Target*Type): Operate on `Thread', not `TargetMemoryAccess'.

2007-11-22  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(OperationDelegateInvoke): New operation; step through a delegate
	invocation trampoline.

	* backend/arch/Instruction.cs
	(Instruction.TrampolineType): Added `DelegateInvoke'.

2007-11-20  Martin Baulig  <martin@ximian.com>

	* test/testsuite/TestDelegate.cs: Temporarily disable this.

	* backend/SingleSteppingEngine.cs
	(OperationExecuteInstruction): Make this a separate operation
	since we need to resume the target after executing the instruction
	if we're not single-stepping.
	(OperationActivateBreakpoints): Use the new breakpoint code.

	* languages/TargetFunctionType.cs
	(TargetFunctionType.InsertBreakpoint): Take a
	`FunctionBreakpointHandle' argument, not `MethodLoadedHandler'.

2007-11-19  Martin Baulig  <martin@ximian.com>

	* frontend/Main.cs
	(Main.RunInferiorMainLoop): New public method.  This can be used
	to run a main loop inside the nunit test suite.

	* test/testsuite/NUnit.cs
	(TestSuite.MainLoop): New public method; run an inferior main loop
	from within the testsuite.

2007-11-06  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture_I386.cs
	(Architecture_I386.GetLMF): Make this work again.

2007-11-05  Martin Baulig  <martin@ximian.com>

	* backend/arch/Instruction.cs
	(Instruction.Type): Added `Interpretable'.

	* backend/arch/Instruction_I386.cs
	(Instruction_I386.InterpretInstruction): Interpret `push %ebp'.

	* backend/arch/Instruction_X86_64.cs
	(Instruction_I386.InterpretInstruction): Interpret `push %rbp'.

2007-11-05  Martin Baulig  <martin@ximian.com>

	* backend/arch/Instruction.cs
	(Instruction.CanInterpretInstruction): New public property.

	* backend/arch/Bfd.cs
	(Bfd.DynlinkBreakpoint): Interpret the instruction rather than
	stepping over the breakpoint.

2007-11-05  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-ptrace.c
	(mono_debugger_server_finalize_mono_runtime): New public method.

	* backend/ProcessServant.cs
	(ProcessServant.CanExecuteCode): New internal property.

2007-11-05  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoDebuggerInfo.MinDynamicVersion): Bump to 64 to require SVN HEAD.

	* backend/server/x86_64-arch.c: Reflect latest JIT changes.
	* backend/server/i386-arch.c: Likewise.

2007-10-31  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture.cs
	(Architecture.Opcodes.GenerateNopInstruction): New public property.

	* backend/SingleSteppingEngine.cs
	(SSE.step_over_breakpoint): Use Opcodes.GenerateNopInstruction()
	instead of encoding it here.

	* backend/server/server.h
	(mono_debugger_server_execute_instruction): Removed the
	`original_size' argument; replaced `push_retaddr' by `up

2007-10-31  Martin Baulig  <martin@ximian.com>

	* backend/arch/Opcodes.cs
	(Opcodes.GenerateJumpInstruction): New abstract method.

	* backend/arch/X86_Opcodes.cs
	(X86_Opcodes): Make this abstract.

	* backend/arch/Opcodes_I386.cs: New file.
	(Opcodes_I386): i386-specific implementation.

	* backend/arch/Opcodes_X86_64.cs: New file.
	(Opcodes_X86_64): x86_64-specific implementation.

2007-10-31  Martin Baulig  <martin@ximian.com>

	Merged the Plophos branch.

	* backend/SingleSteppingEngine.cs
	(SSE.step_over_breakpoint): Take a `bool singlestep' and a
	`TargetAddress until' argument; use the new ExecuteInstruction()
	whenever possible.
	(SSE): The old GetCallTarget() API is gone; we now use
	Architecture.ReadInstruction() which returns an `Instruction'.
	(OperationStepOverBreakpoint): We don't need to deal with
	trampolines here anymore.
	(OperationMonoTrampoline): This is used when stepping into a
	trampoline: we enable the `NotificationType.Trampoline'
	notification and resume execution.
	(OperationCompileMethod): Removed.
	(OperationRuntimeClassInit): Removed.

	* backend/ProcessServant.cs: Reflect latest runtime changes.
	* backend/MonoThreadManager.cs: Reflect latest runtime changes.

	* backend/Inferior.cs
	(Inferior.ChildEvent): Added public readonly `CallbackData' field.
	(Inferior.CallMethod(long,long)): Take a `byte[]' and a `long'
	argument instead of two `long' arguments.
	(Inferior.ExecuteInstruction): New public method.
	(Inferior.ProcessEvent): mono_debugger_server_dispatch_event() may
	now pass us an additional byte[] argument.

	* backend/server/breakpoints.h
	(BreakpointInfo): Added `runtime_table_slot'.

	* server.h
	(MonoRuntimeInfo): New typedef.
	(ServerHandle): Added `MonoRuntimeInfo *mono_runtime'
	(InferiorVTable): Added `set_runtime_info' and
	`execute_instruction'; removed `set_notification'; `call_method_2'
	now takes additional `data_size' and 'data_buffer' arguments.
	(mono_debugger_server_set_runtime_info): New function.
	(mono_debugger_server_execute_instruction): New function.
	(mono_debugger_server_set_notification): Removed.
	(mono_debugger_server_initialize_mono_runtime): New function.

	* x86-ptrace.c
	(InferiorHandle): Removed `notification_address', this is now in
	the new `MonoRuntimeInfo'.

	* x86_64-arch.c
	(runtime_info_enable/disable_breakpoint): New static methods.

	* i386-arch.c
	(runtime_info_enable/disable_breakpoint): New static methods.

	* backend/arch/Architecture.cs
	(CallTargetType): Removed.
	(Architecture.ReadInstruction): New method.
	(Architecture.IsTrampoline): Removed.
	(Architecture.IsCall): Removed.
	(Architecture.GetCallTarget): Removed.
	(Architecture.DoGetMonoTrampoline): Removed.

	* backend/arch/Opcodes.cs: New file.
	(Opcodes): New abstract internal class.

	* backend/arch/X86_Opcodes.cs: New file.
	(X86_Opcodes): Implementation for i386 and x86_64.

	* backend/arch/Instruction.cs: New file.
	(Instruction): New abstract internal class.

	* backend/arch/X86_Instruction.cs: New file.
	(X86_Instruction): Abstract implementation for i386 and x86_64.

	* backend/arch/Instruction_I386.cs: New file.
	(Instruction_I386): i386-specific part.

	* backend/arch/Instruction_X86_64.cs: New file.
	(Instruction_X86_64): x86_64-specific part.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.IsTrampolineAddress): New public method.
	(MonoLanguageBackend.GetTrampoline): FIXME:  temporarily broken.

2007-10-30  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture.cs
	(Architecture.Disassembler): New public property; only create one
	single disassembler per process.

	* backend/arch/Disassembler.cs
	(Disassembler.GetInstructionSize): Added `TargetMemoryAccess' argument.
	(Disassembler.DisassembleInstruction): Likewise.
	(Disassembler.DisassembleMethod): Likewise.

2007-10-30  Martin Baulig  <martin@ximian.com>

	* backend/ProcessServant.cs
	(ProcessServant.Architecture): New public property; only create
	one single `Architecture' instance per process.	

2007-10-29  Martin Baulig  <martin@ximian.com>

	* classes/TargetInfo.cs: New file.
	(TargetInfo): Moved here from TargetBinaryAccess.cs.
	(TargetMemoryInfo): New public class, derives from `TargetInfo'.
	(TargetInfo.AddressDomain): Moved this into `TargetMemoryInfo'.

2007-10-24  Martin Baulig  <martin@ximian.com>

	* backend/arch/Instruction.cs: New file.
	(Instruction): New internal abstract class.

	* backend/arch/X86_Instruction.cs: New file.
	(X86_Instruction): New internal class; implement `Instruction'
	here, we use this for both i386 and x86_64.

	* backend/arch/Architecture.cs
	(Architecture.DoGetCallTarget): Don't make this abstract;
	implement it here using the new `Instruction' class.

2007-10-16  Martin Baulig  <martin@ximian.com>

	* backend/ILanguageBackend.cs: Removed.
	(ILanguageBackend): Removed.

2007-10-16  Martin Baulig  <martin@ximian.com>

	* backend/ILanguageBackend.cs
	(NotificationType): Moved into MonoThreadManager.cs.

	* backend/MonoThreadManager.cs
	(NotificationType): Moved here from ILanguageBackend.cs.
	
2007-10-16  Martin Baulig  <martin@ximian.com>

	* backend/ILanguageBackend.cs
	(ILanguageBackend.GetTrampoline): Removed.

2007-10-16  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture.cs
	(Architecture.CallTargetType): Add `NativeTrampoline',
	`NativeTrampolineStart' and `MonoTrampoline'.
	(Architecture.GetCallTarget): Also check for trampolines here.
	(Architecture.GetTrampoline): Removed.

	* backend/ILanguageBackend.cs
	(ILanguageBackend.GetTrampolineAddress): Removed.

2007-10-15  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture.cs
	(Architecture.CallTargetType): New internal enum.
	(Architecture.GetCallTarget): Merge GetJumpTarget() and
	GetCallTarget() into a new GetCallTarget(); we now return a
	`CallTargetType'.	

2007-10-10  Martin Baulig  <martin@ximian.com>

	Fix the "field from parent class madness".

	* languages/TargetClassObject.cs
	(TargetClassObject.GetParentObject): Take a `TargetMemoryAccess'
	instead of a `Target' argument.

	* languages/mono/MonoClassObject.cs
	(MonoClassObject.GetParentObject): Disallow any implicit boxings.

	* frontend/Expression.cs
	(StructAccessExpression.FindMember): When searching in the parent
	class, also use the parent instance.

2007-10-09  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo): Moved the implementations of GetField(),
	SetField(), GetStaticField() and SetStaticField() here from
	`MonoClassType'.

	* languages/mono/MonoClassType.cs
	(MonoClassType): Moved all the code dealing with fields into
	`MonoClassInfo'.	

2007-10-09  Martin Baulig  <martin@ximian.com>

	* languages/TargetMember.cs
	(TargetEnumInfo): New public abstract class.

	* languages/TargetEnumType.cs
	(TargetEnumType): Changed the type of `Value' and `Members' from
	`TargetFieldInfo' info `TargetEnumInfo'.

	* languages/mono/MonoClassType.cs
	(MonoClassType): No longer include the fields and methods from our
	parent class.  We now create our parent class on-the-fly when it's
	needed.	

2007-10-09  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo.ClassType): New public property.
	(MonoClassInfo.GetParent): New public method; compute the parent
	on-the-fly when it's needed.

	* languages/mono/MonoClassObject.cs
	(MonoClassObject): The .ctor now takes a `MonoClassInfo' argument.
	(MonoClassObject.GetParentObject): Implement this here.

2007-10-05  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.LookupClassInfo): Reload the symbol tables if we
	can't find the requested type and try again.

2007-10-05  Martin Baulig  <martin@ximian.com>

	* languages/TargetType.cs
	(TargetType.SetObject): `Thread' -> `TargetAccess'.

	* languages/TargetFundamentalObject.cs
	(TargetFundamentalObject.SetObject): `Thread' -> `TargetAccess'.

	* languages/TargetClassObject.cs
	(TargetClassObject.SetField): `Thread' -> `TargetAccess'.

	* languages/TargetArrayObject.cs
	(TargetArrayObject.SetElement): `Thread' -> `TargetAccess'.

2007-10-05  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs
	(Register.WriteRegister): `Thread' -> `TargetAccess'.

	* languages/TargetLocation.cs
	(TargetLocation.WriteBuffer): `Thread' -> `TargetAccess'.
	(TargetLocation.WriteAddress): Likewise.

	* backends/TargetAccess.cs
	(TargetAccess): Move `Mono.Debugger.Backends' -> `Mono.Debugger'.

2007-10-05  Martin Baulig  <martin@ximian.com>

	* languages/TargetObject.cs
	(TargetObject.GetAddress): `Thread' -> `TargetMemoryAccess'.

	* languages/TargetFundamentalObject.cs
	(TargetFundamentalObject.GetObject): `Thread' -> `TargetMemoryAccess'.

	* languages/TargetClassObject.cs
	(TargetClassObject.GetField): `Thread' -> `TargetMemoryAccess'.
	(TargetClassObject.GetCurrentObject): Likewise.

2007-10-05  Martin Baulig  <martin@ximian.com>

	* languages/TargetPointerObject.cs
	(TargetPointerObject.GetCurrentType): `Thread' -> `TargetMemoryAccess'.
	(TargetPointerObject.GetDereferencedObject): Likewise.
	(TargetPointerObject.GetArrayElement): Likewise.

	* languages/TargetObjectObject.cs
	(TargetObjectObject.GetClassObject): `Thread' -> `TargetMemoryAccess'.

2007-10-05  Martin Baulig  <martin@ximian.com>

	* languages/TargetObject.cs
	(TargetObject.GetDynamicSize): `Thread' -> `TargetMemoryAccess'.

	* languages/TargetLocation.cs
	(TargetLocation.ReadMemory): `Thread' -> `TargetMemoryAccess'.
	(TargetLocation.ReadBuffer): Likewise.

2007-10-05  Martin Baulig  <martin@ximian.com>

	* languages/TargetEnumType.cs
	(TargetEnumType.Value): Replaced by a GetValue() method.

	* languages/TargetType.cs
	(TargetType.GetObject): Added `TargetMemoryAccess' argument.
	(TargetType.DoGetObject): Likewise.

2007-10-02  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-linux-ptrace.c
	(_server_ptrace_check_errno): New static method; when `errno' is
	`ESRCH', check whether the target still exists to distinguish
	between `COMMAND_ERROR_NOT_STOPPED' and `COMMAND_ERROR_NO_TARGET'.

2007-10-02  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.ProcessEvent): Added new `dead' flag which
	is set when we receive `CHILD_EXITED' or `CHILD_SIGNALED'.
	(SingleSteppingEngine.IsAlive): Also check for `dead' and `killed'.

2007-10-02  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.Return): Create our own, local backtrace
	instead of using `current_backtrace'; limit the maximum number of
	frames to 2 since that's all we need here.

	* classes/Backtrace.cs
	(Backtrace.TryUnwind): Add sanity check to avoid 'loops'.

2007-09-28  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoDebuggerInfo.MinDynamicVersion): Require 61.

	* languages/mono/MonoRuntime.cs
	(MonoRuntime.ReadMonoMethod): New public static method.

2007-09-28  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoType.cs: Renamed into MonoRuntime.cs
	(MonoType): Renamed into `MonoRuntime'.

2007-09-28  Martin Baulig  <martin@ximian.com>

	* backend/arch/DwarfReader.cs
	(DwarfReader): Kill the `source_hash'; each source file may be
	used multiple times in different compilation units.

2007-09-28  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture_I386.cs
	(Architecture_I386.GetLMF): Make this work again.

2007-09-28  Martin Baulig  <martin@ximian.com>

	* backend/ProcessServant.cs
	(ProcessServant.read_thread_table): Truncate the `TID' to 32-bits
	on 32-bit machines.

2007-09-27  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.ReadMonoClass): Use
	MonoClassInfo.ReadMonoClass() to create the `MonoClassInfo', then
	create a `MonoClassType'.
	(MonoLanguageBackend.CreateClassInfo): Renamed into
	CreateCoreType(); create the MonoClassType here and not inside
	MonoClassInfo's .ctor.

	* languages/mono/MonoClassType.cs
	(MonoClassType.ReadClassType): Removed.

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo.ClassType): Removed.

2007-09-27  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoObjectType.cs
	(MonoObjectType): Replace the public .ctor with a static
	Create() method.

	* languages/mono/MonoOpaqueType.cs: Renamed into MonoVoidType.cs
	(MonoOpaqueType): Renamed into `MonoVoidType'.

2007-09-27  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoType.cs
	(MonoType.Read): Renamed into ReadType().
	(MonoType.ReadMonoClass): New public static method.

	* languages/mono/MonoObjectObject.cs
	(MonoObjectObject.GetCurrentType): Use MonoType.ReadMonoClass().

2007-09-27  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoFundamentalType.cs
	(MonoFundamentalType): Replace the public .ctor with a static
	Create() method.	

	* languages/mono/MonoStringType.cs
	(MonoStringType): Replace the public .ctor with a static
	Create() method.

2007-09-26  Wade Berrier  <wberrier@novell.com>

	* languages/native/Makefile.am:
	* languages/mono/Makefile.am:
	Glob .cs for EXTRA_DIST so these don't need updating anymore.

2007-09-26  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoFundamentalType.cs
	(MonoFundamentalType): The .ctor now takes a `MonoClassInfo'.

	* languages/mono/MonoClassType.cs
	(MonoClassType): Add a .ctor taking a `MonoClassInfo'; remove the
	one taking a `TargetAddress'.

2007-09-26  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo): Read field offsets and methods on-the-fly when
	they're needed; this allows us to create a `MonoClassInfo' for
	classes which aren't initialized yet.
	(MonoClassInfo.FieldOffsets): Replaced by GetFieldOffsets().
	(MonoClassInfo.GetMethodAddress): Added `TargetMemoryAccess' arg.

2007-09-26  Martin Baulig  <martin@ximian.com>

	* languages/TargetFundamentalType.cs
	(TargetFundamentalType): Made this class abstract.
	(TargetFundamentalType.HasClassType): Don't implement this here.
	(TargetFundamentalType.ClassType): Likewise.

	* languages/native/NativeFundamentalType.cs: New file.
	(NativeFundamentalType): Derive from `TargetFundamentalType'.

	* languages/mono/MonoFundamentalType.cs
	(MonoFundamentalType): Implement `HasClassType' and `ClassType' here.

2007-09-25  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoTypeTable.ReadDataItem): Create a `token' -> `klass_address'
	hash table; don't actually read the class.
	(MonoSymbolFile.LookupClassInfo): New internal method; we now
	create the `MonoClassInfo' on-the-fly when it's needed.

2007-09-25  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassType.cs
	(MonoClassType.ResolveClass): Added `TargetMemoryAccess target'
	and `bool fail' arguments.

2007-09-25  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoDebuggerSupport.cs
	(MonoDebuggerSupport.GetLocalTypeFromSignature): Removed.

2007-09-25  Martin Baulig  <martin@ximian.com>

	* classes/Method.cs
	(Method.DeclaringType): Repaced by GetDeclaringType().

2007-09-25  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoMethod): Use the new MonoType.Read() to construct the
	variable's types from the `MonoType *'s provided by the runtime.

2007-09-25  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoType.cs: New file.
	(MonoTypeEnum): New static enum.
	(MonoType): New internal static class.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.GetClass): Renamed into ReadMonoClass().

2007-09-25  Martin Baulig  <martin@ximian.com>

	* classes/TargetException.cs
	(TargetError): Add `MethodNotLoaded'.

2007-09-25  Martin Baulig  <martin@ximian.com>

	* classes/Method.cs
	(Method): Replace the `This', `Locals' and `Parameters' by methods
	which take a `TargetMemoryAccess' argument.  This is neccessary
	for generics.
	(Method.This): Replaced by GetThis().
	(Method.Parameters): Replaced by GetParameters().
	(Method.Locals): Replaced by GetLocalVariables().
	(Method.GetVariableByName): Removed.

	* classes/StackFrame.cs
	(StackFrame.Locals): Removed.

2007-09-24  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs
	(MonoDataTable): Made this abstract; create `DomainDataTable' and
	`MonoTypeTable' implementations.

2007-09-24  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs
	(MonoDataTable): Formerly known as `MonoLanguageBackend.DataTable'.
	(MonoLanguageBackend): Reflect latest runtime changes; we now have
	one type table per symbol file.

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.TypeTable): New public property.

2007-09-21  Martin Baulig  <martin@ximian.com>

	* languages/TargetType.cs
	(TargetType.HasClassType): New public abstract property.
	(TargetType.ClassType): Likewise.

2007-09-17  Martin Baulig  <martin@ximian.com>

	* languages/TargetType.cs
	(TargetType): Renamed the abstract GetObject() into DoGetObject()
	and made it protected; added a new non-abstract GetObject() which
	just calls DoGetObject().

	* languages/TargetLocation.cs
	(TargetLocation): Made this class public; but removed all public
	API entry points from it.
	(TargetLocation.HasAddress): Made this internal.
	(TargetLocation.GetAddress): Likewise.

2007-09-11  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoMetadataInfo): Add `MonoMethodFlagsOffset' and
	`MonoMethodInflatedOffset'.	

2007-09-04  Martin Baulig  <martin@ximian.com>

	* frontend/CSharpExpressionParser.jay
	(member_name): New rule; support member names with generic arity.
	(variable_or_type_name_0): Use `member_name' instead of
	`IDENTIFIER' to allow names with generic arity.

	* languages/mono/MonoMember.cs
	(MonoMethodInfo): Include the generic arity in the method name.

	* languages/mono/MonoFunctionType.cs
	(MonoFunctionType): Include the generic arity in the method name.

2007-09-04  Martin Baulig  <martin@ximian.com>

	* backend/BreakpointManager.cs: Kill the `entry_hash'; only use
	the `index_hash'.

2007-09-03  Martin Baulig  <martin@ximian.com>

	*** Milestone: Appdomains are now fully functional ***

2007-09-03  Martin Baulig  <martin@ximian.com>

	Fix a race condition in the thread-lock code.

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.ReleaseThreadLock): If we have a `stop_event',
	don't process it here while we're called from the ProcessServant;
	added a new overloaded version of this function which is now
	called from the ThreadManager's event loop.

	* backend/ThreadManager.cs
	(ThreadManager.AddPendingEvent): New internal method; we're called
	from SingleSteppingEngine.ReleaseThreadLock(); just queue the
	event and process it next time we run the event loop.
	(ThreadManager.engine_thread_main): Check for pending events.

2007-09-03  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.WaitAll): Don't stop if another than the current
	thread exited.

2007-09-03  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(SteppingCommand.DoExecute): Only switch threads if the new thread
	is alive.

2007-09-03  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(BreakCommand): Add new `lazy' argument to disable error checking.

	* test/testsuite/TestAppDomain-Module.cs:
	Insert a breakpoint on Hello.World(), which is dynamically loaded.

2007-09-03  Martin Baulig  <martin@ximian.com>

	User-visible change:
	- `run' no longer stops in main
	- there's a new `start' command which starts the target and stops
	  in main.

	* frontend/Command.cs
	(StartCommand): New command; start the target and stop in main.
	(RunCommand): Don't stop in main anymore.

2007-09-03  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.OnModuleLoaded): New internal method; check
	whether we need to activate any breakpoints and start an
	`OperationActivateBreakpoints' if neccessary.
	(OperationActivateBreakpoints): New operation.
	(OperationStart): Don't activate any breakpoints here; just call
	sse.OnModuleLoaded() and let the new `OperationActivateBreakpoints'
	do the job.

	* backend/ProcessStart.cs
	(ProcessStart.StopInMain): New public property.
	(ProcessStart.SetupApplication): We're called on exec() -> set
	`StopInMain' to false.	

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.Notification): Added `SingleSteppingEngine'
	argument; return a `bool' denoting whether or not to resume the
	target.

2007-08-24  Wade Berrier  <wberrier@novell.com>

	* backend/Makefile.am: Glob .cs for EXTRA_DIST so these don't
	need updating anymore.

2007-08-23  Martin Baulig  <martin@ximian.com>

	* test/src/IHelloInterface.cs: New file.
	* test/src/TestAppDomain-Hello.cs: New file.
	* test/src/TestAppDomain-Module.cs: New file.

	* test/testsuite/TestAppDomain-Module.cs: New test.

2007-08-22  Martin Baulig  <martin@ximian.com>

	* backend/arch/Bfd.cs
	(Bfd): Several bug fixes; mostly for core files.
	(Bfd.LookupLocalSymbol): New public method.
	(bfd.FindSection): New internal method.

	* backend/arch/BfdContainer.cs
	(BfdContainer.LookupLibrary): New public method.
	(BfdContainer.FindLibrary): New public method.

	* backend/arch/CoreFile.cs: Make this work again.

	* backend/arch/bfdglue.c
	(bfd_glue_get_errormsg): New public function.
	(bfd_glue_get_section_size): Removed the `raw_section' argument.

2007-08-22  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs: Reflect latest runtime
	changes; the method range entries are now stored on a per-domain
	basis and are free'ed when the domain gets unloaded.  Add support
	for unloading symbol files.

2007-08-22  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SSE.OnManagedThreadCreated): Remove the `tid' argument; this is
	now computed by the ThreadDB.
	(SSE.SetTID): New internal method; called by ThreadDB.
	(SSE.SetLMFAddress): Likewise.
	(SSE.OperationGetCurrentThread): Removed; we now use ThreadDB for this.

2007-08-22  Martin Baulig  <martin@ximian.com>

	* backend/ProcessServant.cs: Use the new `ThreadDB' interface if
	possible.  When attaching to a managed application, read the new
	thread table from the runtime.	

	* backend/ThreadDB.cs: New file. We now use glibc's `thread_db'
	library to get information about threads.

	* backend/server/thread-db.[ch]: New files.

	* backend/server/linux-proc-service.h: New file; copied from glibc.

2007-08-06  Wade Berrier  <wberrier@novell.com>

	* classes/Makefile.am:
	* languages/mono/Makefile.am:
	* languages/Makefile.am:
	Update filelists for new source files to fix 'make dist'
	Beautify listing

	* test/src/Makefile.am:
	Clean up list duplication, only build .cs files during 'make check'

2007-08-07  Martin Baulig  <martin@ximian.com>

	* backend/ILanguageBackend.cs (NotificationType): Add `DomainUnload'.

	* backend/BreakpointManager.cs
	(BreakpointManager.DomainUnload): New public method; remove all
	breakpoints from an appdomain.

	* backend/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): Added a new `DomainUnload'
	notification; we're called from the JIT before unloading an
	appdomain, call BreakpointManager.DomainUnload() to remove all its
	breakpoints.	

2007-08-06  Martin Baulig  <martin@ximian.com>

	* backend/TargetMemoryAccess.cs
	(TargetMemoryAccess.InsertBreakpoint): Return `void'.
	(TargetMemoryAccess.RemoveBreakpoint): Take a `BreakpointHandle',
	not an integer index.

	* backend/BreakpointManager.cs
	(BreakpointManager): Added a second hash table which maps
	breakpoint handles and appdomains into indices.
	(BreakpointManager.InsertBreakpoint): Added `int domain' argument.
	(BreakpointManager.RemoveBreakpoint): Take a `BreakpointHandle'
	instead of an integer index; remove all breakpoints in all
	appdomains.

	* classes/SourceLocation.cs
	(SourceLocation.ResolveBreakpoint): Remove the `domain' argument.

	* test/testsuite/TestAppDomain.cs: Remove the breakpoint instead
	of disabling it; this must remove it from all appdomains.

2007-08-06  Martin Baulig  <martin@ximian.com>

	* classes/Method.cs
	(Method.Domain): New public property.

2007-08-06  Martin Baulig  <martin@ximian.com>

	* backend/BreakpointManager.cs
	(BreakpointManager): Operate on `BreakpointHandle', not `Breakpoint'.

2007-08-06  Martin Baulig  <martin@ximian.com>

	* backend/TargetMemoryAccess.cs
	(TargetMemoryAccess.InsertBreakpoint): Make this internal.
	(TargetMemoryAccess.RemoveBreakpoint): Likewise.

	* classes/AddressBreakpoint.cs
	(AddressBreakpoint): Use `AddressBreakpointHandle'.

2007-08-01  Martin Baulig  <martin@ximian.com>

	* configure.in: Make sure the runtime is recent enough.

2007-08-01  Martin Baulig  <martin@ximian.com>

	* configure.in: Bump version number to 0.55.

2007-08-01  Martin Baulig  <martin@ximian.com>

	Merged the `debugger-dublin' branch.

2007-06-21  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-linux-ptrace.c
	(server_ptrace_read_memory): Moved the actual reading into
	_server_ptrace_read_memory(), just remove the breakpoints here.
	(_server_ptrace_read_memory): Like server_ptrace_read_memory(),
	but don't remove any breakpoints.

	* backend/server/x86-ptrace.c
	(server_ptrace_write_memory): Use _server_ptrace_read_memory().

2007-06-21  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoDebuggerInfo.MaxDynamicVersion): Allow 59 here; keep
	`MinDynamicVersion' at 58.  The new `debugger-dublin' branch uses
	59, but it's backwards-compatible.

2007-07-31  Martin Baulig  <martin@ximian.com>

	* test/src/TestAppDomain.cs: New test.
	* test/testsuite/TestAppDomain.cs: New test.

2007-07-31  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture_X86_64.cs
	(Architecture_X86_64.GetJumpOrCallTarget): New private method; fix
	and improve GetCallTarget() and also add support for jump
	instructions.

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.OperationNativeTrampoline): New operation;
	keep stepping while we're in the trampoline like `finish -native'.

2007-07-30  Martin Baulig  <martin@ximian.com>

	* languages/TargetLocation.cs
	(TargetLocation.Address): Replaced by GetAddress().
	(TargetLocation.GetAddress): New public function; replaces the
	`Address' property.
	(TargetLocation.GetDereferencedTargetLocation): Removed the
	`Thread' argument; returns a `DereferencedTargetLocation'.

	* languages/TargetObject.cs
	(TargetObject.Address): Replaced by GetAddress().
	(TargetObject.GetAddress): New public function; replaces the
	`Address' property.
	(TargetObject.IsNull): Removed.

2007-07-30  Martin Baulig  <martin@ximian.com>

	* test/testsuite/testnativetypes.cs: New test.
	* test/src/testnativetypes.c: New test.

2007-07-30  Martin Baulig  <martin@ximian.com>

	* languages/DeferencedTargetLocation.cs: New file.

2007-07-28  Martin Baulig  <martin@ximian.com>

	* backend/arch/DwarfReader.cs: Almost completely redesign the line
	number table; it's no longer based on methods and now also works
	with newer versions of gcc and g++.

2007-07-28  Martin Baulig  <martin@ximian.com>

	* classes/SourceLocation.cs
	(SourceLocation): Add a .ctor which takes a `SourceFile' in
	addition to a `MethodSource'.

2007-07-27  Martin Baulig  <martin@ximian.com>

	* classes/LineNumberTable.cs
	(LineNumberTable): Made Lookup() and DumpLineNumbers() abstract;
	move the actual implementation into MonoSymbolFile.cs and
	DwarfReader.cs.	

2007-07-27  Martin Baulig  <martin@ximian.com>

	* classes/LineNumberTable.cs
	(LineNumberTable.Name): Removed.
	(LineNumberTable.Module): Removed.

2007-07-27  Martin Baulig  <martin@ximian.com>

	* classes/SourceAddress.cs
	(SourceAddress.Null): Removed.
	(SourceAddress.LineNumberTable): Removed.
	(SourceAddress.SourceBuffer): New public property.

	* classes/LineNumberTable.cs
	(LineNumberTable.IsDynamic): Removed.
	(LineNumberTable.SourceBuffer): Removed.

2007-07-27  Martin Baulig  <martin@ximian.com>

	* classes/MethodSource.cs
	(MethodSource.IsDynamic): New public property.
	(MethodSource.HasSourceCode): Renamed into `HasSourceFile'.
	(MethodSource.HasSourceBuffer): New public property.
	(MethodSource.SourceBuffer): New public property.

	* classes/AssemblerMethod.cs
	(AssemblerMethod): Derive from `MethodSource', not
	`LineNumberTable'.

	* classes/Method.cs
	(Method.HasSourceFile): Removed.
	(Method.SourceFile): Removed.

	* languages/mono/MonoSymbolFile.cs
	(WrapperMethod): Also create a MethodSource for wrappers.

2007-07-26  Martin Baulig  <martin@ximian.com>

	* classes/SourceAddress.cs
	(SourceAddress.Location): Removed.
	(SourceAddress.SourceFile): New public property.

	* classes/LineNumberTable.cs
	(LineNumberTable): Removed `MethodSource', `Addresses',
	`StartRow', `EndRow' and `GetNamespaces()'.

	* classes/Method.cs
	(Method.HasSource): New public property.
	(Method.MethodSource): New public property.
	(Method.GetNamespaces): New public method.
	(Method): Removed `StartRow' and `EndRow'; get them from the
	`MethodSource' instead.

2007-07-20  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoFundamentalType.cs: New file.
	(MonoFundamentalType): New type.

	* languages/mono/MonoStringType.cs
	(MonoStringType): Derive from `MonoFundamentalType'.

	* languages/mono/MonoObjectType.cs
	(MonoObjectType): Create the MonoClassType in the .ctor.

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.LookupMonoClass): New public method; calls
	LookupMonoType() and then returns a `MonoClassType', this also
	works for fundamental types.

	* languages/mono/MonoLanguageBackend.cs
	(MonoBuiltinTypeInfo): Use the new `MonoFundamentalType'.

2007-06-28  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoDebuggerInfo): Reflect latest runtime changes; add the new
	`DebuggerVersion' field.

2007-06-04  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs
	(Thread.CallMethod (long,string)): Added second `long' argument
	so we can now pass a long value in addition to the string to the
	target.

	* backends/Inferior.cs
	(Inferior.CallMethod (long,string)): Added second `long' argument
	so we can now pass a long value in addition to the string to the
	target.

	* backends/server/server.h
	(mono_debugger_server_call_method_1): Added `guint64 data_arg'
	argument.

2007-06-04  Martin Baulig  <martin@ximian.com>

	Replace `SourceMethod' with a new abstract `MethodSource'.

	* classes/MethodSource.cs: New file.
	(MethodSource): New public abstract class.

	* classes/SourceInfo.cs
	(SourceMethod): Removed; we now use the new `MethodSource'.

	* classes/Module.cs
	(Module.LookupMethod): Removed; use FindMethod() instead.
	(Module.RegisterLoadHandler): Removed.

2007-05-29  Wade Berrier  <wberrier@novell.com>

	* classes/Makefile.am: fix make dist (remove MethodSource.cs)

2007-05-29  Martin Baulig  <martin@ximian.com>

	* classes/Method.cs
	(Method.StartRow, Method.EndRow): New public properties.  Only
	valid when `HasSourceFile' is true.

2007-05-29  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.SourceFileFactory): New public property; moved the
	`SourceFileFactory' from the backend to the frontend.

	* frontend/Interpreter.cs
	(Interpreter.ReadFile): New public method.

	* classes/Method.cs
	(Method.HasSourceFile): New public property.
	(Method.SourceFile): New public property.

	* classes/Process.cs
	(Process.SourceFileFactory): Removed.

	* backend/ProcessServant.cs
	(ProcessServant.SourceFileFactory): Removed.

2007-05-29  Martin Baulig  <martin@ximian.com>

	* classes/MethodSource.cs: Renamed into LineNumberTable.cs
	(MethodSource): Renamed into `LineNumberTable'.

	* classes/Method.cs
	(Method.HasSource): Renamed into `HasLineNumbers'.
	(Method.Source): Renamed into `LineNumberTable'.

2007-05-23  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(SourceCommand.FindFile): Don't do a method lookup here.
	(ListCommand.DoExecute): We can now list source locations outside
	methods.	

2007-05-16  Martin Baulig  <martin@ximian.com>

	* classes/SourceLocation.cs
	(SourceLocation.FunctionBreakpointHandle): Moved into
	BreakpointHandle.cs and made internal.

	* backend/BreakpointHandle.cs
	(FunctionBreakpointHandle): New internal class.

2007-05-16  Martin Baulig  <martin@ximian.com>

	* classes/Breakpoint.cs
	(Breakpoint.Resolve): New abstract internal method.

	* classes/SourceLocation.cs
	(SourceLocation.InsertBreakpoint): Renamed into
	ResolveBreakpoint(); don't take a `Thread' argument.  You need to
	call Insert() on the returned `BreakpointHandle' to actually
	insert the breakpoint.

	* backend/BreakpointHandle.cs
	(BreakpointHandle.Insert): New public abstract method; we need to
	call this to actually insert the breakpoint.
	(AddressBreakpointHandle): New internal class.

2007-05-09  Martin Baulig  <martin@ximian.com>

	Released version 0.50 "Dublin" of the Mono Debugger :-)

	* configure.in: Require Mono >= 1.2.4.

2007-05-14  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.symbol_files): Make this a Hashtable instead
	of an ArrayList; don't store any null's in the list.

2007-05-14  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture_I386.cs
	(Architecture_I386.GetLMF): Correctly set ebp.

	* backend/arch/Architecture_X86_64.cs
	(Architecture_X86_64.GetLMF): Correctly set rbp.

2007-05-09  Martin Baulig  <martin@ximian.com>

	* frontend/ObjectFormatter.cs
	(ObjectFormatter.FormatEnum): Sort the keys alphabetically.

2007-05-09  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs (TestSuite.Compile): Don't take a
	filename argument; use the `FileName' and `ExeFileName' and pass
	the output filename to mcs to make things work with
	srcdir != builddir.

2007-05-09  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo.GenericClass): New public field.
	(MonoClassInfo.GenericContainer): Likewise.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.GetClassInfo): Don't add generic classes to
	the type hash.

2007-05-09  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs
	(DebuggerOptions.ParseCommandLine): Warn about unknown arguments.

2007-05-08  Martin Baulig  <martin@ximian.com>

	The new ObjectFormatter :-)

	This has two major user-visible changes:
	- When printing a class, we now include fields from the parent type.
	- When printing a variable, we use the actual type of the object
	rather than just using the variable type.

	* classes/Style.cs (StructFormatter): Removed; this has been
	replaced by the new ObjectFormatter.

	* frontend/Expression.cs
	(Expression.DoEvaluateObject): Get the "real" type of a class
	object instead of just using the variable type.
	(BaseExpression.DoEvaluateObject): We need to override this and
	use the variable type.

	* frontend/ObjectFormatter.cs: New file.
	(ObjectFormatter): New public class.

	* frontend/Style.cs: Use the new ObjectFormatter.

2007-05-08  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassType.cs
	(MonoClassType.GetCurrentObject): Unbox the object if necessary.

	* languages/mono/MonoClassObject.cs
	(MonoClassObject.GetParentObject): Ensure that `type.IsByRef'.

2007-05-02  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassInfo.cs
	(MonoClassInfo): Completely redesigned this; we now construct the
	`MonoClassInfo' when reading the symbol tables and it replaces the
	`ClassEntry' in the symbol table.  This means that we don't have
	to do any target access when actually using the class.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.read_class_entry): Read all the data from the
	target and construct the `MonoClassInfo' here, so we don't have to
	make any target access when actually using the class.

	* languages/mono/MonoClassObject.cs
	(MonoClassObject): We now keep a reference to our `MonoClassType',
	not our `MonoClassInfo'.

2007-04-18  Martin Baulig  <martin@ximian.com>

	Reimplement displays; integrate them with the session code and use
	the new expression parser.

	* classes/Display.cs: New file.
	(Display): New public class.

	* classes/DebuggerSession.cs
	(DebuggerSession): Add displays to the session.

	* frontend/Displays.cs: Removed.

	* frontend/Command.cs
	(DisplayCommand): Derive from `DebuggerCommand'.
	(UndisplayCommand): Likewise.

	* frontend/Expression.cs
	(ExpressionParser.EvaluateExpression): New public method.

	* frontend/Interpreter.cs
	(Interpreter): Displays are now in the `DebuggerSession'.

2007-04-17  Martin Baulig  <martin@ximian.com>

	* classes/ExpressionBreakpoint.cs
	(ILocationParser): Moved to DebuggerSession.cs and renamed into
	`IExpressionParser'.	

	* classes/DebuggerSession.cs
	(LocationType): Moved here from ExpressionBreakpoint.cs.
	(IExpressionParser): Formerly known as `ILocationParser'.

	* frontend/Expression.cs: Merge `ExpressionParser' and
	`LocationParser'.	

2007-04-17  Martin Baulig  <martin@ximian.com>

	* frontend/IExpressionParser.cs: Removed.

	* frontend/CSharpExpressionParser.jay: We don't need a
	`ScriptingContext' here; allow reusing the parser to parse
	multiple expressions.

	* frontend/Expression.cs
	(ExpressionParser): New public class.

	* frontend/Interpreter.cs
	(Interpreter.ExpressionParser): New public property.

2007-04-17  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter): Remove support for multiple parser languages; this
	was never used and we only supported "c#" anyways.

2007-04-04  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(BacktraceCommand.DoExecute): If we already have a backtrace and
	no arguments were given, reuse it.

2007-03-28  Jb Evain  <jb@nurv.fr>

	* frontend/Command.cs: Rename PrintFrameCommand to SelectFrameCommand.
	and make it able to select the current frame.

2007-03-14  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.MonoMethod.GetTypeSignature): Add support for
	byref types and arrays.

2007-03-13  Miguel de Icaza  <miguel@novell.com>

	* languages/mono/MonoLanguageBackend.cs: The main assembly might
	not have symbols, we should not crash in that case. 

2007-03-08  Wade Berrier  <wberrier@novell.com>

	* classes/Makefile.am: added new files to fix make dist, 
	beautified listing

2007-03-08  Martin Baulig  <martin@ximian.com>

	* api/: Removed unused directory.

2007-03-08  Massimiliano Mantione  <massi@ximian.com>

	* frontend/Command.cs: Added "[un]display" and enhanced "examine".
	* frontend/Style.cs: In StyleCLI.TargetStopped, added code to
	show displays to the user.
	* frontend/Displays.cs: Implemented displays.
	* frontend/Interpreter.cs: Added the collection of displays to
	the interpreter instance.
	* build/Makefile.am, frontend/Makefile.am: added Displays.cs

2007-03-06  Martin Baulig  <martin@ximian.com>

	* test/testsuite/TestSession.cs: Add a new testcase.

2007-03-06  Martin Baulig  <martin@ximian.com>

	* classes/Debugger.cs
	(Debugger.MainProcessCreatedEvent): New public event.

	* backend/ProcessServant.cs
	(ProcessServant.Initialize): Fire a `MainProcessCreatedEvent' when
	creating the main process.

	* test/testsuite/NUnit.cs
	(TestSuite.Start): New public method; use this instead of
	`Interpreter.Start()'.
	(TestSuite.LoadSession): Likewise.
	(TestSuite.Attach): Likewise.

	* test/testsuite/*.cs: Use our parent class'es Start(),
	LoadSession() and Attach() methods instead directly calling them
	on the `Interpreter'.

	* test/testsuite/TestSession.cs: Add a new testcase.

2007-03-05  Martin Baulig  <martin@ximian.com>

	* classes/ExpressionBreakpoint.cs: New file.
	(ExpressionBreakpoint.LocationType): Moved here from
	frontend/Expression.cs.	

	* classes/DebuggerSession.cs
	(DebuggerSession.ctor): Added `ILocationParser parser' argument.
	(DebuggerSession.ParseLocation): New internal method.
	(DebuggerSession.InsertBreakpoint): Added overloaded version
	taking a `LocationType' and a `string'.

	* frontend/Expression.cs
	(LocationParser): New public class.

	* frontend/Command.cs
	(BreakCommand): Completely rewrote this; we can now insert
	breakpoints before the target is started.

2007-02-28  Martin Baulig  <martin@ximian.com>

	* test/testsuite/TestBreakpoint.cs: Add a test for inserting
	breakpoints by filename.

2007-02-28  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerSession.InsertBreakpoint): Don't take a `Thread' argument
	when inserting a breakpoint on a `SourceLocation' and don't
	activate it.  This allows us to insert such breakpoints before the
	target is started.

	* frontend/Interpreter.cs
	(Interpreter.InsertBreakpoint): Removed; call
	DebuggerSession.InsertBreakpoint() directly.

	* frontend/Command.cs
	(TestCommand): Temporary hack.

2007-02-28  Martin Baulig  <martin@ximian.com>

	* backend/ProcessStart.cs
	(ProcessStart..ctor): Set `options.WorkingDirectory' if null.

	* classes/Process.cs
	(Process.FindFile): Correctly implement this.
	(Process.FindLocation): Removed; use FileFile() instead.

2007-02-28  Martin Baulig  <martin@ximian.com>

	* classes/Process.cs
	(Process.GetFullPath): Removed; use FindFile() instead.

2007-02-28  Martin Baulig  <martin@ximian.com>

	* classes/SourceInfo.cs
	(SourceFile.FindMethod): New public method.

	* classes/Process.cs
	(Process.FindFile): New public method.

	* classes/Module.cs
	(Module.FindFile): New public method.

	* classes/SourceLocation.cs
	(SourceLocation): Allow file-line locations.

2007-02-27  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(BreakpointEnableCommand, BreakpointDisableCommand): Also activate
	and deactivate the breakpoint if we have a target.

2007-02-27  Martin Baulig  <martin@ximian.com>

	* classes/Process.cs
	(Process.GetFullPath): New public method; moved here from the
	`ScriptingContext'.

	* frontend/ScriptingContext.cs
	(ScriptingContext.GetFullPath): Moved into `Process'.
	(ScriptingContext.GetFullPathByFilename): Removed.

2007-02-27  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(ShowCommand): Make `show events' and alias for `show breakpoints'.

2007-02-27  Martin Baulig  <martin@ximian.com>

	* classes/Event.cs
	(Event.Enable): Renamed to `Activate' and made public.
	(Event.Disable): Renamed to `Deactivate' and made public.
	(Event.IsEnabled): New public abstract property.

2007-02-23  Martin Baulig  <martin@ximian.com>

	* classes/ExceptionCatchPoint.cs
	(ExceptionCatchPoint): Make this persistent.

2007-02-22  Martin Baulig  <martin@ximian.com>

	* classes/Event.cs
	(Event.IsPersistent): New public property.

	* classes/Breakpoint.cs
	(Breakpoint): Make this class abstract and split the functionality
	into `SourceBreakpoint' and `AddressBreakpoint'.

	* classes/SourceBreakpoint.cs: New file.
	(SourceBreakpoint): New public class.

	* classes/AddressBreakpoint.cs: New file.
	(AddressBreakpoint): New public class.

2007-02-22  Martin Baulig  <martin@ximian.com>

	* classes/Event.cs
	(EventType): Added `Breakpoint', `WatchRead' and `WatchWrite'.
	(Event.Type): New public property.

	* classes/Breakpoint.cs
	(HardwareWatchType): New public enum.
	(BreakpointType): Removed; use `EventType' instead.

	* classes/Thread.cs
	(Thread.AddEventHandler): Removed the `EventType' argument.

	* backends/ThreadServer.cs
	(ThreadServant.AddEventHandler): Likewise.

2007-02-22  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs: Don't crash if we can't
	find a symbol file.

2007-02-20  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerSession): Store the main process internally and use it's
	main thread when removing events.
	(DebuggerSession.DeleteEvent): Removed the `Thread' argument.

	* frontend/Command.cs
	(EventHandleCommand): Derive from `DebuggerCommand', not
	`ThreadCommand'; the "enable", "disable" and "delete" commands now
	longer require a thread to operate on - it's now also possible to
	enable/disable or delete events after the target exited.

2007-02-20  Martin Baulig  <martin@ximian.com>

	* classes/Event.cs
	(Event.Breaks): Check `IsEnabled' as well.
	(Event.Enable, Event.Disable): Make these methods internal; modify
	the `IsEnabled' property instead.

	* classes/DebuggerSession.cs
	(DebuggerSession.InsertBreakpoint): Also enable the breakpoint by
	calling the now internal `Event.Enable ()'.
	(DebuggerSession.InsertHardwareWatchPoint): Likewise.
	(DebuggerSession.InsertExceptionCatchPoint): Likewise.

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine): Check whether a breakpoint is actually enabled.

2007-02-16  Martin Baulig  <martin@ximian.com>

	Session changes: keep the `DebuggerSession' in memory between
	different invocations of the same target; this allows us to modify
	breakpoints before starting the target.

	* classes/DebuggerSession.cs
	(DebuggerSession.SessionData): Removed the nested class.

	* classes/Event.cs
	(Event.IsEnabled): Added a setter for this property.

	* classes/SourceLocation.cs
	(SourceLocation): Splitted into `SourceLocation' and
	`DynamicSourceLocation'; the `SourceLocation' can now persist
	across different invocations of the same target.

2007-02-13  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs: Run the tests in the invariant culture;
	fixes #80360.

2007-02-12  Martin Baulig  <martin@ximian.com>

	* configure.in: Require Mono >= 1.2.3.

2007-02-08  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs (Interpreter.WaitAll): Fix another bug.

2007-02-08  Martin Baulig  <martin@ximian.com>

	Distinguish between normal stopping and receiving a SIGSTOP in the
	backend.

	* backend/server/x86-arch.h
	(ChildStoppedAction): Added `STOP_ACTION_INTERRUPTED'; renamed
	`STOP_ACTION_SEND_STOPPED' to `STOP_ACTION_STOPPED'.

	* backend/server/server.h
	(ServerStatusMessageType): Added `MESSAGE_CHILD_INTERRUPTED'.

	* backend/Inferior.cs
	(Inferior.ChildEventType): Added `CHILD_INTERRUPTED'.

	* backend/SingleSteppingEngine.cs: Handle `CHILD_INTERRUPTED'
	separately; we now distinguish between stopped normally (hitting a
	breakpoint, receiving a notification etc.) or being stopped by a
	SIGSTOP.

	* classes/TargetEvent.cs
	(TargetEventType): Added `TargetInterrupted'.	

2007-02-01  Miguel de Icaza  <miguel@novell.com>

	* frontend/Command.cs: Make it so "list -" works.

2007-02-01  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs: Fix a race condition: if we hit
	a breakpoint and a stop has been requested at the same time, check
	the breakpoint handler first and report `TargetStopped' instead of
	`TargetHitBreakpoint' if the handler told us to resume.

2007-02-01  Martin Baulig  <martin@ximian.com>

	* interface/Report.cs
	(ReportWriter.PrintToConsole): New public property.
	(ReportWriter.Print): Also print to the console if we have a
	logfile and `PrintToConsole' is true.  We use this for the test
	suite to suppress output to the console.

2007-01-30  Martin Baulig  <martin@ximian.com>

	* languages/Language.cs
	(Language.ArrayType): New public property.

	* languages/TargetArrayObject.cs
	(TargetArrayObject.HasClassObject): New public abstract property.
	(TargetArrayObject.GetClassObject): New public abstract method.

	* frontend/Expression.cs
	(Convert.ToClassObject): Handle `TargetArrayObject' -> `TargetClassObject'.
	(Convert.ToClassType): Handle `TargetArrayType' -> `TargetClassType'.

	* test/testsuite/TestManagedTypes.cs: Add tests for that.

2007-01-30  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(StructAccessExpression.GetField): Add support for consts.

	* frontend/Style.cs
	(StyleCLI.FormatMember): Add support for consts.

2007-01-29  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs
	(TestSuite.Compile): New public method to trigger a mcs compilation.
	(TestSuite.OnTargetOutput): Don't call our base method; ie. we
	don't want to print the text to the console.

	* test/testsuite/TestSession.cs: New test.
	* test/src/TestSession.cs: Source file for it.

2007-01-29  Martin Baulig  <martin@ximian.com>

	* build/AssemblyInfo.cs.in (BuildInfo.mcs): New public property.

2007-01-29  Martin Baulig  <martin@ximian.com>

	* interface/Report.cs (Report.Print): Only print to the `writer'.
	(Report.Errort): Likewise.

2007-01-29  Martin Baulig  <martin@ximian.com>

	* backend/server/x86-ptrace.c
	(server_ptrace_spawn): Use mono_domain_get() instead of
	mono_get_root_domain() to execute the callback in the correct domain.

2007-01-29  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile.ctor): Do the GUID check here rather than passing
	an assembly to C.MonoSymbolFile's .ctor.

2007-01-25  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.Stop): Check whether a stop has already been
	requested.	

2007-01-25  Martin Baulig  <martin@ximian.com>

	* build/Makefile.am
	(check-local): Set LD_LIBRARY_PATH to build/server/.libs.

2007-01-24  Wade Berrier  <wberrier@novell.com>

	* backend/server/Makefile.am: remove deleted files to fix make dist

2007-01-24  Martin Baulig  <martin@ximian.com>

	* test/testsuite/TestMultiThread.cs: Improved the test.

2007-01-24  Martin Baulig  <martin@ximian.com>

	* backend/server/i386-win32.[ch]: Removed old code.
	* backend/server/powerpc-arch.[ch]: Likewise.
	* backend/server/powerpc-darwin.[ch]: Likewise.
	* backend/server/x86-freebsd-ptrace.[ch]: Likewise.

2007-01-24  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs (TestSuite..cctor): Call
	Report.Initialize() in the .cctor rather than in the .ctor to
	avoid a sharing violation on the logfile.

2007-01-23  Martin Baulig  <martin@ximian.com>

	* test/testsuite/TestMultiThread.cs: New test.
	* test/src/TestMultiThread.cs: New test.

2007-01-23  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.WaitAll): Store the threads in a Hashtable instead of
	an ArrayList and only start each thread once.

2007-01-23  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.ProcessOperation): Queue the operation and
	start it later if we're currently thread-locked.
	(SingleSteppingEngine.ReleaseThreadLockDone): New internal method.

	* backend/ProcessServant.cs
	(ProcessServant.ReleaseGlobalThreadLock): Call
	ReleaseThreadLockDone() on each SSE after releasing the mutex to
	start queued operations.

2007-01-19  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.IsStopped): Check whether the engine is
	stopped rather than using the Inferior's TargetState.

	* classes/Thread.cs
	(Thread.IsStopped): Use `servant.IsStopped' rather than relying on
	the `TargetState'.

2007-01-19  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.BrokenThreading): New public property;
	enabled by default.

	* frontend/Interpreter.cs
	(Interpreter.RuntimeInvoke): New public method; use WaitAll() is
	`DebuggerConfiguration.BrokenThreading' is set.

2007-01-19  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs: Don't crash if we don't
	have a symbol table.  This might happen if we for instance attach
	to a mono process which is running without --debug.

2007-01-19  Martin Baulig  <martin@ximian.com>

	* classes/Backtrace.cs
	(Backtrace.Mode): New public enum.
	(Backtrace.GetBacktrace): Added `Mode mode' argument.

	* classes/Thread.cs
	(Thread.GetBacktrace): Added `Backtrace.Mode mode' argument.

	* frontend/Command.cs
	(BacktraceCommand): Added `-managed' and `-native' arguments.

2007-01-17  Martin Baulig  <martin@ximian.com>

	* classes/Backtrace.cs
	(Backtrace.GetBacktrace): Make this internal and take a
	`ThreadServant'.
	(Backtrace.TryUnwind): Likewise.
	(Backtrace.TryUnwind): If we're in unmanaged code and don't have
	any source info, use the LMF to get back to managed land.

2007-01-17  Martin Baulig  <martin@ximian.com>

	* backend/arch/Architecture.cs
	(Architecture.GetLMF): New internal method.

2007-01-17  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs
	(Thread.LMFAddress): New internal property.

	* backend/ThreadServant.cs
	(ThreadServant.Process): New internal property.

	* classes/TargetBinaryReader.cs
	(TargetBinaryReader.ReadTargetAddress): New public method.

2007-01-17  Martin Baulig  <martin@ximian.com>

	* languages/Language.cs
	(Language.IsManaged): New public property.

2007-01-17  Martin Baulig  <martin@ximian.com>

	* backend/ThreadServant.cs
	(ThreadServant.LMFAddress): New public property.

	* backend/SingleSteppingEngine.cs
	(SingleSteppingEngine.OperationGetLMFAddress): New operation.
	(SingleSteppingEngine.OperationStart): Push
	OperationGetLMFAddress() to get the LMF on startup.
	(SingleSteppingEngine.OperationInitialize): Likewise.

2007-01-16  Martin Baulig  <martin@ximian.com>

	* test/testsuite/: Updated the testsuite to reflect the latest
	threading changes.	

2007-01-16  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.CheckLastEvent): New method.
	(Interpreter.WaitAll): Correctly implement this.

2007-01-16  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs (Thread.Flags): Added `AutoRun'.
	(Thread.AutoStop): New public method.

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.StayInThread): New public property.

	* backend/SingleSteppingEngine.cs: Correctly handle stop requests.

2007-01-03  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs (Thread.Flags): New public enum.
	(Thread.ThreadFlags): New public property.
	(Thread.IsAlive): New public property.
	(Thread.IsDaemon): Removed.
	(Thread.Continue): Removed the `is_background' argument.
	(Thread.Background): New public method.

2006-12-29  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.IsSynchronous): Removed.
	(Interpreter.WaitAll): New public method.

	* frontend/Command.cs
	(SteppingCommand): More work on the threading stuff.

2006-12-29  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs
	(Thread): Make all the stepping operations return a
	`ThreadCommandResult' instead of a `CommandResult'.
	(Thread.GetLastTargetEvent): Renamed from `LastTargetEvent' and
	made it a function.
	(Thread.IsRunning): New public property.

2006-12-28  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs
	(MonoDebuggerInfo): Added `GetLMFAddress'.

2006-12-28  Martin Baulig  <martin@ximian.com>

	* classes/Process.cs
	(Process): Replaced the `Threads' property with a GetThreads()
	method.

2006-12-28  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs
	(Thread.LastTargetEvent): New public property.
	(CommandResult.Abort): New public method.

	* backend/ThreadServant.cs
	(ThreadServant.LastTargetEvent): New public property.

2006-12-28  Martin Baulig  <martin@ximian.com>

	* backend/SingleSteppingEngine.cs
	(Operation): Store the `SingleSteppingEngine' inside the
	`Operation', so we don't need to pass it around as a parameter.

2006-12-22  Martin Baulig  <martin@ximian.com>

	* backend/MonoThreadManager.cs: The `mono' binary now contains a
	pointer to the `MONO_DEBUGGER__debugger_info' in a special
	`.mdb_debug_info' section - this also works when the binary is
	stripped.	

2006-12-21  Martin Baulig  <martin@ximian.com>

	Change Ctrl-C semantics: abort the current operation on Ctrl-C.

	* frontend/Main.cs
	(CommandLineInterpreter.command_thread_main): Don't abort the main
	thread on Ctrl-C; we still do it the second time the user hits
	Ctrl-C as a fallback.

	* frontend/Interpreter.cs
	(Interpreter.Wait): Check whether the operation was interrupted by
	Ctrl-C and stop the thread if neccessary.

	* frontend/Command.cs: Use the new RuntimeInvoke API.

2006-12-21  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs
	(Thread.StepCommandResult): Renamed to `ThreadCommandResult' and
	made public.
	(RuntimeInvokeResult): New public class; derives from `CommandResult'.
	(Thread.RuntimeInvoke): Make this non-blocking and return a
	`RuntimeCommandResult'; removed the other overloaded version.

2006-12-21  Martin Baulig  <martin@ximian.com>

	* configure.in: Bump version number to 0.35 for the SVN version;
	the next release will be 0.40 "Bonn".

2006-11-15  Martin Baulig  <martin@ximian.com>

	Released version 0.31 "Ehrenbreitstein" of the Mono Debugger :-)

2006-11-14  Wade Berrier  <wberrier@novell.com>

	* ChangeLog: bump version for 0.31 tag

2006-11-10  Martin Baulig  <martin@ximian.com>

	* build/Makefile.am: Don't remove Mono.Debugger.Cecil.dll.

	* build/Mono.Debugger.Cecil.dll: Upgrade to Cecil 0.4.3.

2006-11-10  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs: Don't crash if a symbol
	file occurs twice in the list.

2006-11-10  Martin Baulig  <martin@ximian.com>

	* classes/Debugger.cs: Don't use another appdomain for the server.

2006-11-09  Wade Berrier  <wberrier@novell.com>

	* build/Makefile.am:
	* classes/Makefile.am:
	* frontend/libedit/Makefile.am:
	* interface/Makefile.am:
	 Add/remove source files to filelistings to fix make dist

2006-10-25  Martin Baulig  <martin@ximian.com>

	* build/: Rename the current `Mono.Debugger.dll' into
	`Mono.Debugger.Backend.dll' and create a new `Mono.Debugger.dll'.

	* classes/TargetAddress.cs: Moved to ../interface.

	* classes/AddressDomain.cs: Moved to ../interface.

	* classes/Report.cs: Moved to ../interface.

2006-10-25  Martin Baulig  <martin@ximian.com>

	* classes/AddressDomain.cs
	(AddressDomain): Don't make this byref; add [Serializable]
	attribute and make the .ctor take the id as argument.

2006-10-25  Martin Baulig  <martin@ximian.com>

	* interfaces: Renamed to interface.

2006-10-25  Martin Baulig  <martin@ximian.com>

	* interfaces/ISymbolTable.cs: Moved to ../classes/.

	* interfaces/ITargetNotification.cs: Moved to ../classes/.

2006-10-25  Martin Baulig  <martin@ximian.com>

	* jay/: Moved to frontend/jay/.

2006-10-25  Martin Baulig  <martin@ximian.com>

	* arch/: Moved to backend/arch.

2006-10-25  Martin Baulig  <martin@ximian.com>

	* backends/: Rename to backend.

2006-10-24  Wade Berrier  <wberrier@novell.com>

	* doc/Makefile.am: Update filelist for removed files to fix make dist

2006-10-09  Jb Evain  <jbevain@gmail.com>

	* languages/mono/MonoFunctionType.cs
	languages/mono/MonoLanguageBackend.cs
	languages/mono/MonoOpaqueType.cs
	languages/mono/MonoSymbolFile.cs
	languages/mono/MonoEnumType.cs
	languages/mono/MonoMember.cs
	languages/mono/MonoClassType.cs
	languages/mono/MonoObjectType.cs
	languages/mono/MonoDebuggerSupport.cs:
		Don't use Cecil's interfaces which are deprecated
		in the next version.

2006-07-18  Wade Berrier <wberrier@novell.com>

	* backends/Makefile.am: Remove ModuleManager.cs from EXTRA_DIST

2006-07-18  Martin Baulig  <martin@ximian.com>

	Released version 0.30 "Koblenz" of the Mono Debugger :-)

2006-07-18  Martin Baulig  <martin@ximian.com>

	* configure.in: Require Mono >= 1.1.16.

2006-07-17  Martin Baulig  <martin@ximian.com>

	Kill the System.Data dependency.

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration): Rewrite using System.Xml.

	* classes/DebuggerSession.cs
	(DebuggerSession): Rewrite using System.Xml; use an `XmlDocument'
	instead of a `DataSet'.

	* classes/DebuggerConfiguration.xsd: Update the schema to reflect
	the new XML file format (we're still using the schema with an
	`XmlValidatingReader').	

2006-07-13  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(ModuleCommand): New command.

2006-07-13  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs
	(DebuggerOptions): Make this a DebuggerMarshalByRefObject.
	(DebuggerOptions.Clone): New internal method.

	* classes/DebuggerSession.cs
	(DebuggerSession.Clone): Added `DebugggerOptions new_options' and
	`string new_name' arguments.

	* classes/Process.cs
	(Process.Session): Get the session from the servant.

	* backends/ProcessStart.cs
	(ProcessStart.SetupApplication): Clone the options and update them
	to the new values.

	* frontend/Command.cs
	(ShowCommand.ShowArgumentsCommand): Added `show args' command to
	show the command line arguments.

2006-07-13  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration): Rewrite to use System.Data with the
	DebuggerConfiguration.xsd schema.

2006-07-12  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.xsd: Renamed into
	DebuggerConfiguration.xsd.	

2006-07-12  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs: New file; split out
	`DebuggerOptions' from DebuggerSession.cs.

2006-07-12  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerOptions.ParseCommandLine): New public static method;
	moved here from frontend/Main.cs.

2006-07-12  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.MethodHasSource): Don't check
	`Module.StepInto' if the method we're stepping into is in the same
	module.	

2006-07-12  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerOptions.cs
	(DebuggerOptions.Prompt): Removed.
	(DebuggerOptions.LoadNativeSymbolTable): Removed.
	(DebuggerOptions.JitOptimizations): Default to null.
	(DebuggerOptions.WorkingDirectory): Default to null.
	(DebuggerSession): Also save/load the `DebuggerOptions'.

2006-07-08  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs
	(DwarfLocation): New protected class; moved the location reading here.
	(DwarfLocation.GetLocation): Correctly handle `DW_OP_fbreg'.
	(DieSubprogram): Support the `DW_AT_frame_base' attribute.
	(DwarfTargetVariable): Moved the location code into `DwarfLocation'.

2006-07-06  Martin Baulig  <martin@ximian.com>

	* arch/Architecture_I386.cs
	(Architecture_I386.IsSyscallInstruction): Correctly implement
	this; also protect with try/catch.

	* arch/Architecture_X86_64.cs
	(Architecture_X86_64.IsSyscallInstruction): Protect with try/catch.

2006-07-06  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationFinish.IsSourceOperation): Set to `!Native'.

2006-07-06  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.c (ArchInfo): Use `guint64' for
	`dr_control' and `dr_status' since _server_ptrace_get_dr()
	operates on guint64.

2006-07-06  Martin Baulig  <martin@ximian.com>

	* backends/server/x86_64-arch.c
	(server_ptrace_insert_hw_breakpoint): Don't deadlock here.

	* backends/server/i386-arch.c
	(server_ptrace_insert_hw_breakpoint): Don't deadlock here.

2006-07-06  Martin Baulig  <martin@ximian.com>

	* classes/SourceInfo.cs
	(SourceMethod.ClassName): New public property.

	* classes/DebuggerSession.cs
	(DebuggerSession.Clone): New internal method.

	* backends/ProcessServant.cs
	(ProcessServant.ChildExecd): Clone the session.

	* classes/SourceLocation.cs
	(SourceLocation): Make this actually work again.

2006-07-05  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerSession.SessionData): New protected class; moved all the
	session data here, we save this to XML when the target exists
	while the `DebuggerSession' persists across multiple invocations.

2006-07-05  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerSession.MainProcessReachedMain): Make this public again
	and call it from the `Interpreter'; read the FIXME in the source
	code.

	* frontend/Interpreter.cs
	(Interpreter.Start): Call `session.MainProcessReachedMain ()'.
	(Interpreter.LoadSession): Likewise.

2006-07-03  Martin Baulig  <martin@ximian.com>

	* classes/Event.cs
	(Event.OnTargetExited): New abstract internal method; an `Event'
	may persist across multiple invocations of the target, so we use
	this to disable the event when we exit.

	* backends/ProcessServant.cs
	(ProcessServant.OnProcessExitedEvent): New internal method; save
	the session here.

	* classes/DebuggerSession.cs
	(DebuggerSession.OnProcessExited): Disable all events here.

2006-06-29  Martin Baulig  <martin@ximian.com>

	The big session-handling cleanup - we now load/save the session to
	XML using a DataSet.

	* classes/DebuggerConfiguration.cs
	(DebuggerConfiguration.ModuleGroups): New internal property.

	* classes/DebuggerSession.cs
	(DebuggerSession): Moved thread groups and events here; load and
	save the session from XML using a DataSet.
	(DebuggerSession.CreateThreadGroup): Moved here.
	(DebuggerSession.DeleteThreadGroup): Moved here.
	(DebuggerSession.ThreadGroupExists): Moved here.
	(DebuggerSession.ThreadGroups): Moved here.
	(DebuggerSession.ThreadGroupByName): Moved here.
	(DebuggerSession.MainThreadGroup): Moved here.
	(DebuggerSession.Events): Moved here.
	(DebuggerSession.GetEvent): Moved here.
	(DebuggerSession.AddEvent): Moved here.
	(DebuggerSession.DeleteEvent): Moved here.
	(DebuggerSession.InsertBreakpoint): Moved here.
	(DebuggerSession.SaveSession): New public method to save the
	session as XML into a Stream.
	(DebuggerSession.ctor): Added a ctor taking a `Stream' to load the
	session from XML.
	(DebuggerSession.SurrogateSelector): Removed.

	* classes/DebuggerSession.xsd: New file.

	* classes/Process.cs (Process.Session): New public property.

	* classes/Event.cs
	(Event.GetSessionData): New internal virtual method taking a
	`DataRow' argument.
	(Event.GetSessionData, SetSessionData): Removed the old
	serialization-based implementation.
	(Event.SessionSurrogate): Removed.

	* classes/ThreadGroup.cs
	(ThreadGroup.SessionSurrogate): Removed.

	* classes/Module.cs
	(SymbolFile.LookupMethod): New public abstract method.
	(ModuleGroup.GetSessionData, SetSessionData): New internal
	methods; operate on a `DataRow'.
	(Module.LookupMethod): New public abstract method.
	(Module.GetSessionData, SetSessionData): New internal methods;
	operate on a `DataRow'.
	(Module.SessionSurrogate): Removed.

	* classes/SourceLocation.cs
	(SourceLocation): Don't implement IDeserializationCallback.
	(SourceLocation.method): New private field; when loading the
	location from XML, we just have a method name and need to do a
	method lookup.

	* languages/TargetFunctionType.cs
	(TargetFunctionType.Name): Don't include the class name here.
	(TargetFunctionType.FullName): New public abstract property; this
	is class name plus method name.

2006-06-26  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerSession.ModulesChanged): Removed.

	* classes/Module.cs
	(SymbolFile): Implement IDisposable.
	(SymbolFile.Module): New public abstract property.
	(SymbolFile.DoDispose): New protected virtual method; call
	`Module.UnLoadModule()'.	
	(Module.UnLoadModule): New internal method.

2006-06-26  Martin Baulig  <martin@ximian.com>

	* backends/SymbolTableManager.cs
	(SymbolTableManager): Completely rewrite and simplify this;
	instead of maintaining a `SymbolTableCollection' in a separate
	thread, directly implement `ISymbolTable' and iterate over an
	array of `SymbolFile's.

	* classes/SourceInfo.cs
	(SourceFile): Override GetHashCode() and Equals().

	* classes/Module.cs
	(Module.RegisterLoadHandler): Removed; call it on the `SymbolFile'
	instead.	

2006-06-26  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerSession.ctor): Added `DebuggerConfiguration' argument.
	(DebuggerSession.Config): New public readonly field.
	(DebuggerSession): Moved the module management code here from
	`ModuleManager'.

	* backends/ModuleManager.cs: Removed.
	(ModuleManager): Moved all the functionality into
	`DebuggerSession'.	

2006-06-26  Martin Baulig  <martin@ximian.com>

	* backends/SymbolTableManager.cs
	(SymbolTableManager): Removed all the module code.
	(SymbolTableManager.SetModules): Removed.
	(SymbolTableManager.Modules): Removed.

2006-06-26  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerSession): Make this a `DebuggerMarshalByRefObject'.

	* classes/Debugger.cs
	(Debugger.Run): Take a `DebuggerSession' argument instead of a
	`DebuggerOptions' one.
	(Debugger.Attach, Debugger.OpenCoreFile): Likewise.

	* backends/DebuggerServant.cs
	(DebuggerServabt.Run): Take a `DebuggerSession' argument instead
	of a `DebuggerOptions' one.
	(DebuggerServant.Attach, Debugger.OpenCoreFile): Likewise.

	* backends/ProcessServant.cs
	(ProcessServant.Session): New public property.

2006-06-26  Martin Baulig  <martin@ximian.com>

	* classes/Module.cs
	(Module.BreakpointsChangedEvent): Removed.

	* backends/ModuleManager.cs
	(BreakpointChangedHandler): Removed.
	(ModuleManager.BreakpointsChanged): Removed.

	* backends/ProcessServant.cs
	(ProcessServant.BreakpointsChangedEvent): Removed.

2006-06-26  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerConfiguration.cs: New file.
	(DebuggerConfiguration): New public class.

	* classes/Debugger.cs
	(Debugger.ctor): Added `DebuggerConfiguration' argument.

	* classes/Module.cs
	(SymbolFile.IsNative): New public property.
	(ModuleBase): New public abstract base class.
	(Module): Derive from `ModuleBase'.
	(Module.ModuleGroup): New public property.
	(Module.HideFromUser): New public property.
	(ModuleGroup): New public class.

2006-06-12  Martin Baulig  <martin@ximian.com>

	* classes/TargetVariable.cs
	(TargetVariable.IsInScope): New public abstract method.

	* classes/Method.cs
	(Method.GetVariableByName): Added `TargetAddress address' argument
	and check whether the variable is actually in scope.

	* classes/StackFrame.cs
	(StackFrame.Locals): Use `local.IsInScope()' rather than
	`local.IsAlive()'.	

2006-06-12  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationRuntimeInvoke.DoProcessEvent): Also push the rti frame
	if we hit a breakpoint at the invoke method.

	* test/testsuite/TestInvocation.cs: Added testcase for that.

2006-06-01  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine): Correctly handle the THROW_EXCEPTION /
	HANDLE_EXCEPTION notification.

2006-06-01  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(BreakCommand): Added `-local' argument; change default behaviour
	to `-global'.

2006-06-01  Martin Baulig  <martin@ximian.com>

	* backends/server/x86_64-arch.c
	(server_ptrace_push_registers): Properly align the stack.
	(server_ptrace_call_method_*): Likewise.

2006-06-01  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h
	(ServerCommandError): Add `COMMAND_ERROR_INTERNAL_ERROR'.

	* classes/TargetException.cs
	(TargetError): Added `InternalError'.

2006-05-31  Martin Baulig  <martin@ximian.com>

	* classes/Debugger.cs: Added error checking.

2006-05-31  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetNotification.cs
	(TargetState): Don't use all-capital letters.

2006-05-31  Martin Baulig  <martin@ximian.com>

	* classes/Thread.cs
	(Thread): Merge `Finish' and `FinishNative'.

	* backends/ThreadServant.cs
	(ThreadServant): Merge `Finish' and `FinishNative'.

2006-05-31  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(SteppingCommand.DoStep): Return a `CommandResult'.

	* frontend/Interpreter.cs
	(Interpreter.Wait): Added overloaded version which takes a
	`CommandResult'; check for exceptions.

	* backends/SingleSteppingEngine.cs
	(CommandResult): Moved to classes/Thread.cs and made public.

	* classes/Thread.cs (CommandResult): Moved here from
	SingleSteppingEngine.cs and made public.	
	(Thread.StepInstruction): Return a `CommandResult'.
	(Thread.StepNativeInstruction): Likewise.
	(Thread.NextInstruction): Likewise.
	(Thread.StepLine): Likewise.
	(Thread.NextLine): Likewise.
	(Thread.Finish): Likewise.
	(Thread.FinishNative): Likewise.
	(Thread.Continue): Likewise.
	(Thread.FinishNative): Likewise.

2006-05-30  Martin Baulig  <martin@ximian.com>

	* backends/server/x86_64-arch.c
	(server_ptrace_push_registers): Don't corrup the red zone.
	(server_ptrace_call_method_*): Likewise.

2006-05-24  Martin Baulig  <martin@ximian.com>

	* doc/GC-issues.txt: Added document describing the interface
	between the debugger and the GC.

2006-05-24  Martin Baulig  <martin@ximian.com>

	Released version 0.20 "Bruxelles" of the Mono Debugger :-)

2006-05-24  Martin Baulig  <martin@ximian.com>

	* backends/server/library.c
	(mono_debugger_server_set_notification): This is no longer a
	"static" method - different processes may have different
	notification addresses, so we need to make this per-target.

	* backends/server/x86-ptrace.c
	(InferiorHandle): Added `guint64 nofification_address'; replaces
	the static variable in x86_64-arch.c/i386-arch.c.
	(server_ptrace_set_notification): Moved here from x86_64-arch.c.

	* backends/Inferior.cs
	(Inferior.SetNotificationAddress): New internal method; call
	mono_debugger_server_set_notification().

	* backends/MonoThreadManager.cs
	(MonoThreadManager.ThreadCreated): Call SetNotificationAddress()
	on each newly created inferior.	

2006-05-24  Martin Baulig  <martin@ximian.com>

	* arch/bfdglue.c
	(bfd_glue_get_section_size): Added `raw_size' argument.
	(bfd_glue_get_section_contents): Take a pre-alloced buffer as
	argument rather than allocating it here.

2006-05-24  Martin Baulig  <martin@ximian.com>

	* backends/ProcessServant.cs
	(ProcessServant.Kill): Don't call Dispose().

	* backends/server/x86-linux-ptrace.c
	(server_ptrace_initialize_process): Don't use PTRACE_O_TRACEEXIT;
	we don't need this.

2006-05-24  Martin Baulig  <martin@ximian.com>

	* backends/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): Clear the `csharp_language' on
	`NofitifactionType.FinalizeManagedCode'.

2006-05-24  Martin Baulig  <martin@ximian.com>

	* configure.in: Check whether the Mono we're using is recent enough.

2006-05-24  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(BreakCommand.DoResolve): If our base class'es DoResolve() failed,
	try resolving the expression as an address.

	* frontend/Interpreter.cs
	(Interpreter.InsertBreakpoint): Added overloaded version which
	takes a `TargetAddress'.

	* classes/Process.cs
	(Process.InsertBreakpoint): Added overloaded version which takes a
	`TargetAddress'.	

2006-05-24  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h
	(ServerStatusMessageType): Added `MESSAGE_CHILD_CALLED_EXIT'.

	* backends/server/x86-ptrace.c
	(server_ptrace_dispatch_event): Use `MESSAGE_CHILD_CALLED_EXIT'
	for `PTRACE_EVENT_EXIT'.

2006-05-23  Martin Baulig  <martin@ximian.com>

	* backends/Inferior.cs
	(Inferior.PushRegisters): New public method.
	(Inferior.PopRegisters): New public method.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.AcquireThreadLock): Call
	inferior.PushRegisters() to push all registers onto the stack so
	the GC will see them.
	(SingleSteppingEngine.ReleaseThreadLock): Call
	inferior.PopRegisters() to remove them from the stack again.

	* backends/server/x86-linux-ptrace.c
	(server_ptrace_initialize_process): Add `PTRACE_O_TRACEEXIT'.

	* backends/server/x86_64-arch.c
	(server_ptrace_push_registers): New method.
	(server_ptrace_pop_registers): New method.

	* backends/server/i386-arch.c
	(server_ptrace_push_registers): New method.
	(server_ptrace_pop_registers): New method.

	* backends/server/library.c
	(mono_debugger_server_push_registers): New public method.
	(mono_debugger_server_pop_registers): New public method.

2006-05-20  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs
	(DwarfReader.DwarfTargetVariable.GetLocation): Add support for
	location lists.	

2006-05-20  Martin Baulig  <martin@ximian.com>

	* arch/DwarfFrameReader.cs: More 64-bit updates.

2006-05-20  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(SourceCommand.DoResolve): Also lookup native methods.
	(BreakCommand): Add `-global' argument as a shortcut for
	`-group global'.

2006-05-17  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.InsertHardwareWatchPoint): New public method.

	* frontend/Command.cs
	(WatchCommand): New command.

	* classes/Breakpoint.cs
	(BreakpointType): New public enum.
	(Breakpoint.Type): New public property.

	* classes/Process.cs
	(Process.InsertHardwareWatchPoint): New public method.

	* backends/ProcessServant.cs
	(ProcessServant.InsertHardwareWatchPoint): New public method.

2006-05-17  Martin Baulig  <martin@ximian.com>

	* backends/Inferior.cs
	(Inferior.HardwareBreakpointType): New internal enum.
	(Inferior.InsertHardwareWatchPoint): New public method.

	* backends/server/x86-linux-ptrace.c
	(_server_ptrace_set_dr): Use `guint64' for the `value' arg.
	(_server_ptrace_get_dr): Likewise.
	(server_ptrace_get_application): Fix compiler warnings.

	* backends/server/x86-arch.h
	(x86_arch_remove_hardware_breakpoints): New public function.

	* backends/server/x86_64-arch.c
	(ArchInfo): Use `guint64' for `dr_control' and `dr_status'.

	* backends/server/x86-ptrace.cs
	(server_ptrace_dispatch_event): Remove all hardware breakpoints if
	we stopped the first time.

	* backends/server/server.h
	(mono_debugger_server_insert_hw_breakpoint): Added `guint32 type'
	argument which is a `HardwareBreakpointType'.

	* backends/server/breakpoints.h
	(HardwareBreakpointType): New enum typedef.
	(BreakpointInfo): Added `HardwareBreakpointType type' field to
	support hardware watchpoints.

2006-05-15  Martin Baulig  <martin@ximian.com>

	* classes/SourceLocation.cs
	(SourceLocation.HasLine): New public property.

	* frontend/Command.cs
	(ListCommand.DoExecute): Only display the whole method if we
	didn't specify a line.

2006-05-15  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(SetCommand.SetEnvironmentCommand): Added "set env" command to set
	environment variables.

	* classes/DebuggerSession.cs
	(DebuggerOptions.UserEnvironment): New public property.
	(DebuggerOptions.SetEnvironment): New public method.

	* backends/ProcessStart.cs
	(ProcessStart.UserEnvironment): Removed; retrieve it from the
	`DebuggerOptions'.

2006-05-12  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-linux-ptrace.c
	(server_ptrace_global_wait): Restart the waiting on `stop_requested'.
	(server_ptrace_stop_and_wait): Fix a race condition;
	server_ptrace_global_wait() is now automatically restarted; also
	return the SIGSTOP which we expect.

	* backends/ThreadManager.cs
	(ThreadManager.RequestWait): Make this private and protect against
	being called multiple times; use RequestWait() everywhere instead
	of setting the `wait_event' directly to avoid race conditions.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.child_breakpoint): Call `bpt.CheckBreakpointHit()'
	directly rather than using an async handler.
	(SingleSteppingEngine.AcquireThreadLock): Don't call
	`manager.RequestWait()'.

2006-05-12  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationFinish.DoExecte): Use `do_next_native()', not
	`do_step_native().	

2006-05-12  Martin Baulig  <martin@ximian.com>

	* NEWS: Update: we need the latest Mono from SVN; just realized
	that 1.1.15 is too old and does not work.

2006-05-12  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs (FileCommand): Added error checking.
	(SetCommand.SetArgsCommand): Added `set args' command.
	(SetCommand.DoResolve): Properly handle the subcommands.

	* backends/ProcessStart.cs
	(ProcessStart.cs): `Options.InferiorArgs' no longer contains the
	target application; use `Options.File' for that.

2006-05-12  Martin Baulig  <martin@ximian.com>

	* configure.in: Bump version number to 0.20.

	* NEWS: Updated NEWS.

2006-05-11  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(PointerDereferenceExpression): Allow dereferencing arbitrary
	pointer expressions.

2006-05-11  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs
	(ThreadManager.WaitTimeout): Increase to 5 seconds.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.OnThreadExited): Use `TargetExited' and not
	`TargetSignaled' if we were previously Kill()ed.

	* backends/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): Kill the target on
	`NotificationType.MainExited'.	

2006-05-11  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.Start): Properly handle errors.
	(Interpreter.Attach): Likewise.
	(Interpreter.OpenCoreFile): Likewise.

	* frontend/Main.cs
	(CommandLineInterpreter.RunMainLoop): Properly handle errors.

2006-05-11  Martin Baulig  <martin@ximian.com>

	* backends/server/remoting.[ch]: Removed.

2006-05-11  Martin Baulig  <martin@ximian.com>

	* arch/Architecture.cs
	(Architecture.AdjustReturnAddress): New protected method; adjust
	the return address, so we report the line of the call and not the
	return address in stack traces.
	(Architecture.CreateFrame): Call AdjustReturnAddress().

	* test/testsuite/TestException.cs: Added test case for it.

2006-05-10  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerMarshalByRefObject.cs
	(DebuggerMarshalByRefObject): New public class; we now use this
	everywhere instead of `MarshalByRefObject'.
	(DebuggerMarshalByRefObject.InitializeLifeTimeService): Override
	this and return null.

2006-05-10  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs (BinaryOperator): Make this work again.

	* frontend/CSharpExpressionParser.jay: Add support for binary
	operators.

2006-05-10  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerSession.cs
	(DebuggerOptions.JitArguments): New public field.

	* frontend/Main.cs: Add `-jit-arg' command line argument to pass
	additional arguments to the inferior `mono'.

2006-05-10  Martin Baulig  <martin@ximian.com>

	* backends/server/x86_64-arch.c: Use proper alignment when calling
	methods.

2006-05-09  Martin Baulig  <martin@ximian.com>

	The big method lookup cleanup :-)

	* frontend/Expression.cs (LocationType): Added `Constructor'.
	(Expression.EvaluateSource): Removed.
	(Expression.DoEvaluateSource): Removed.
	(Expression.ResolveMethod): Added a `LocationType' argument and
	return a `MethodExpression'.
	(Expression.DoResolveMethod): Likewise; return null by default.
	(SimpleNameExpression.DoResolveMethod): Handle all the different
	kinds of method lookups here.
	(MethodExpression): New public abstract class.
	(MethodExpression.EvaluateSource): New public abstract method; use
	this instead of `Expression.EvaluateSource()'.
	(MethodGroupExpression): Derive from `MethodExpression'.
	(MethodGroupExpression.DoResolveMethod): Add support for the
	different LocationType's here.
	(InvocationExpression): Derive from `MethodExpression'.

	* frontend/Command.cs
	(SourceCommand.Ctor): Added `-ctor' argument to lookup ctors.
	(SourceCommand.DoResolve): We now use `Expression.ResolveMethod()'
	to get a `MethodExpression' and then call EvaluateSource() on it.

	* test/src/testsuite/TestMethodLookup.cs: New test.  This test is
	really huge and should cover all the cases.

2006-05-05  Martin Baulig  <martin@ximian.com>

	* languages/TargetFunctionType.cs
	(TargetFunctionType.IsConstructor): New public property.

	* frontend/Expression.cs
	(InvocationExpression.DoInvoke): Make invoking ctors work.

2006-05-05  Martin Baulig  <martin@ximian.com>

	* languages/TargetFunctionType.cs
	(TargetFunctionType.IsStatic): New public property.

	* frontend/Expression.cs
	(InvocationExpression.DoResolve): Use `method_expr.ResolveMethod()'
	since we may be called from SourceLocation.DoResolve()'.
	(InvocationExpression.DoInvoke): Don't allow invoking instance
	methods with a type reference.

2006-05-05  Martin Baulig  <martin@ximian.com>

	* classes/SourceLocation.cs
	(SourceLocation.HasMethod): New public property.
	(SourceLocation.Function): New public property.
	(SourceLocation.ctor): Add a ctor taking a `SourceFile' and a
	line number.

	* classes/SourceInfo.cs
	(SourceInfo.FindLine): Allow line numbers outside methods; return
	a `SourceLocation' without a method in this case.

	* frontend/Command.cs
	(SourceCommand.DoResolve): If the argument is now a valid number,
	try parsing it as an expression and create a function location.
	(SourceCommand.EvaluateMethod): Removed.
	(BreakCommand.DoExecute): If we're a function breakpoint,
	`Location.HasFunction' is true.

2006-05-05  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs
	(ScriptingContext.ListSourceCode): Removed; moved the
	functionality into `ListCommand'.

	* frontend/Command.cs
	(SourceCommand.Location): New public property.
	(SourceCommand.DoResolve): Make sure we have a valid `Location'.
	(ListCommand.DoExecute): Moved the functionality here.

2006-05-03  Martin Baulig  <martin@ximian.com>

	* classes/Debugger.cs
	(Debugger.Kill): Wait for the target to exit before returning.

2006-05-03  Martin Baulig  <martin@ximian.com>

	* backends/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): Fix a race condition: call
	`inferior.InitializeModules ()' before resuming the target.

2006-05-03  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs (DebuggerCommand.Execute): Always resolve
	the command before executing it; also when repeating it.

2006-05-03  Martin Baulig  <martin@ximian.com>

	* backends/Inferior.cs (Inferior.Kill): Check errors.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.OnThreadExited): New internal method; we're
	called from the ThreadManager when the target exited.
	(SingleSteppingEngine.Kill): Correctly implement this.
	(SingleSteppingEngine.Dispose): Correctly implement this.
	(SingleSteppingEngine.DoDispose): Don't call `inferior.Kill ()'.

	* backends/ProcessServant.cs
	(ProcessServant.OnThreadExitedEvent): Call OnProcessExited() if
	the last thread exited.
	(ProcessServant.KillThread): Removed.

	* backends/DebuggerServant.cs
	(DebuggerServant.OnProcessExitedEvent): Call OnTargetExitedEvent()
	if the last process exited.

	* backends/server/x86-ptrace.c
	(server_ptrace_kill): Don't send a SIGKILL to the target; just use
	`ptrace (PTRACE_KILL)'.

2006-05-02  Martin Baulig  <martin@ximian.com>

	* test/testsuite/NUnit.cs
	(DebuggerEvent): New public class.
	(DebuggerEventType): New public enum.
	(NUnitInterpreter): New public class; derive from `Interpreter'.
	(TestSuite): Rewrite the testsuite: instead of parsing the
	debugger output we're now listening directly for the events.

2006-05-02  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(Command.Execute): Changed return type from `void' to `object'.
	(Command.DoExecute): Likewise.

	* frontend/ScriptingContext.cs
	(ScriptingContext.Error): Removed; throw a `ScriptingException'
	instead.

2006-05-02  Martin Baulig  <martin@ximian.com>

	* backends/DebuggerServant.cs
	(DebuggerServant.OnThreadCreatedEvent): Don't send the event for
	daemon threads.
	(DebuggerServant.OnThreadExitedEvent): Likewise.
	(DebuggerServant.OnTargetEvent): Don't send a `TargetExited' or
	`TargetSignaled' event for daemon threads.

2006-04-26  Martin Baulig  <martin@ximian.com>

	* classes/Report.cs (Report.ReportWriter): Make this field public
	and don't initialize it.

	* backends/DebuggerServant.cs
	(DebuggerServant.ctor): Added `ReportWriter' argument and assign
	it to `Report.ReportWriter'.

2006-04-26  Martin Baulig  <martin@ximian.com>

	* arch/bfdglue.h (BfdGlueSection): Removed.

	* arch/bfdglue.c (bfd_glue_get_sections): Removed.
	(bfd_glue_get_first_section): New function.
	(bfd_glue_get_next_section): New function.
	(bfd_glue_get_section_name): New function.
	(bfd_glue_get_section_vma): New function.
	(bfd_glue_get_section_size): New function.
	(bfd_glue_get_section_flags): New function.

	* arch/Bfd.cs (Bfd.InternalSection): Removed.
	(Bfd.Section): Operate directly on the `asection *' pointer.

2006-04-25  Martin Baulig  <martin@ximian.com>

	* classes/Process.cs
	(Process.SaveSession, Process.LoadSession): Moved the session
	handling into the `ProcessServant'.

	* classes/Debugger.cs
	(Debugger.ctor): Create the `DebuggerServant' in another appdomain.

2006-04-25  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.StartThread): Added `do_attach' argument.
	(SingleSteppingEngine.GetThreadID): Removed.
	(SingleSteppingEngine.Attached): Removed.
	(SingleSteppingEngine.Attach): Removed.
	(SingleSteppingEngine.Detach): When detaching from a managed
	application, start an `OperationDetach'.
	(OperationDetach): New operation.
	(OperationGetThreadId): Renamed into `OperationGetCurrentThread'.

	* backends/ThreadServant.cs
	(ThreadServant.DetachThread): New internal abstract method.

2006-04-25  Martin Baulig  <martin@ximian.com>

	* backends/BreakpointManager.cs
	(BreakpointManager.RemoveAllBreakpoints): New public method.

2006-04-25  Martin Baulig  <martin@ximian.com>

	* backends/MonoThreadManager.cs
	(MonoMetadataInfo): New internal struct; splitted out from
	`MonoBuiltinTypeInfo' in MonoLanguageBackend.cs.

2006-04-25  Martin Baulig  <martin@ximian.com>

	* arch/Architecture.cs
	(Architecture.IsSyscallInstruction): New public abstract method.

2006-04-20  Martin Baulig  <martin@ximian.com>

	* backends/Inferior.cs
	(Inferior.Attach): Removed the `is_main' argument.

	* backends/server/server.h
	(mono_debugger_server_attach): Removed the `is_main' argument.

2006-04-20  Martin Baulig  <martin@ximian.com>

	* backends/ProcessServant.cs
	(ProcessServant.MainThread): Changed type into `ThreadServant'.
	(ProcessServant.Initialize): Major code cleanup in here; call
	Inferior.InitializeProcess() if we're called the first time.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.ctor): A SingleSteppingEngine is now created
	with an operation - it's either executing `OperationStart' or
	`OperationRun'; moved the `reached main' magic into `OperationStart'.
	(SingleSteppingEngine.OperationStart): New operation.

	* backends/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): No longer read the TID from
	the notification on `ThreadCreated' and `ThreadExited'; always use
	the SingleSteppingEngine which received the notification.

	* backends/server/Inferior.cs
	(Inferior.InitializeProcess): New method; this needs to be called
	the first time the target is stopped.
	(Inferior.Initialize): Renamed into InitializeThread().
	(Inferior.GlobalStop): Removed.
	(Inferior.TID): Removed.

2006-04-20  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-linux-ptrace.c
	(_server_ptrace_setup_inferior): Don't attempt to read the
	registers and also don't call do_wait().  We may now be called
	before the target is stopped.
	(_server_ptrace_setup_thread_manager): Renamed into
	server_ptrace_initialize_process(); we're now called from
	ProcessServant.Initialize() after the managed `ThreadManager'
	received the first event.
	(server_ptrace_global_wait): `first_status' and `first_ret' is
	gone; don't do anything special if we're called the first time.

	* x86-ptrace.c (InferiorHandle): Removed `tid'; no longer attempt
	to compute the TID here.

	* x86-arch.h (x86_arch_get_tid): Removed.

	* backends/server/server.h
	(mono_debugger_server_initialize): Renamed into
	mono_debugger_server_initialize_process() and removed the `tid'
	argument.	
	(mono_debugger_server_initialize_process): New function.
	(mono_debugger_server_attach): Removed the `tid' argument.
	(mono_debugger_server_global_stop): Removed.

	* backends/server/x86-ptrace.h: New file; replaces i386-ptrace.h
	and x86_64-ptrace.h.

2006-04-19  Martin Baulig  <martin@ximian.com>

	* backends/ThreadServant.cs: New file.
	(ThreadServant): New internal abstract class.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine): Derive from `ThreadServant'.

	* arch/CoreFile.cs
	(CoreFile.CoreFileThread): Derive from `ThreadServant'.

2006-04-19  Martin Baulig  <martin@ximian.com>

	Split `Process' into `Process' and `ProcessServant'.

	* backends/ProcessServant.cs: New file.
	(ProcessServant): New internal class.

2006-04-19  Martin Baulig  <martin@ximian.com>

	Split `Debugger' into `Debugger' and `DebuggerServant'.

	* backends/DebuggerServant.cs: New file.
	(DebuggerServant): New internal class.

2006-04-19  Martin Baulig  <martin@ximian.com>

	* test/testsuite/testnativeattach.cs: New test.

2006-04-19  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs
	(ThreadManager.start_wait_thread): Catch `ThreadAbortException'
	and reset the abort.  See the comment in the source code.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs (ProcessCommand): New public abstract class.
	(DetachCommand): New command.  Note that we can only detach from a
	process if we previously attached to it.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.Kill): Send a SIGKILL to the target.
	(SingleSteppingEngine.Dispose): Call `inferior.Kill()' if we still
	have an inferior.

	* classes/TargetException.cs
	(TargetError.CannotDetach): New error.

	* classes/Debugger.cs
	(Debugger.Detach): New public method.

	* classes/Process.cs
	(Process.Detach): New public method.

	* classes/Thread.cs
	(Thread.Detach): New public method.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-ptrace.cs
	(x86_ptrace_kill): Send a SIGKILL to the process before using
	`ptrace (PTRACE_KILL)' so we actually kill it.

	* backends/ThreadManager.cs
	(ThreadManager.Dispose): Call `wait_thread.Abort()' prior to
	`wait_thread.Join()'.	

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs: Moved to ../classes/
	* backends/Process.cs: Moved to ../classes/
	* backends/Thread.cs: Moved to ../classes/

2006-04-18  Martin Baulig  <martin@ximian.com>

	* classes/SymbolTableManager.cs: Moved to ../backends/
	* classes/ModuleManager.cs: Moved to ../backends/

	* backends/Process.cs
	(Process.ModuleManager): Make this internal.
	(Process.SymbolTableManager): Make this internal.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/classes/*TargetLocation.cs: Moved to languages/
	* backends/classes/MonoVariableLocation: Moved to languages/mono/.

	* backends/classes/: Removed.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/TargetReader.cs: Moved here from backends/classes/.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/Inferior.cs
	(Inferior.GetFileContents): New public static method; obsoletes
	the `Utils' class form backends/classes/Utils.cs.

	* backends/classes/Utils.cs: Removed.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/EventQueue.cs: New file; merged classes/Threading.cs
	and backends/classes/EventQueue.cs here.

	* classes/ObjectContainer.cs: Removed.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* classes/BreakpointHandle.cs: Moved into ../backends/.
	* backends/BreakpointHandle.cs: Moved here from ../classes/.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* arch/Architecture.cs (Architecture): Make this internal.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/TargetMemoryAccess.cs
	(TargetMemoryAccess.Architecture): Make this internal.

	* backends/Thread.cs
	(Thread.PrintRegisters): New public method.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ISourceBuffer.cs: Removed.
	(ISourceBuffer): Removed this interface; `SourceBuffer' is the
	only class implementing it.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs: Removed.
	(ITargetMemoryAccess): Removed.

	* backends/TargetMemoryAccess.cs: New file.
	(TargetMemoryAccess): New public abstract class.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetInfo): Removed.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryAccess): Removed all the writing methods.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* classes/TargetBinaryAccess.cs
	(TargetInfo): Moved here from ../backends/classes/TargetReader.cs
	and made it public.

	* backends/TargetAccess.cs
	(TargetAccess.TargetInfo): Return a `TargetInfo'.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryInfo): Removed.

	* backends/classes/TargetReader.cs
	(TargetMemoryInfo): Removed.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/Thread.cs
	(Thread.TargetMemoryAccess): Removed; just use `Thread' directly.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryAccess): Only implement `ITargetInfo'.
	(ITargetMemoryAccess.TargetMemoryInfo): Removed.
	(ITargetMemoryAccess.Architecture): New property.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryInfo.AddressDomain): Moved into `ITargetInfo'.
	(ITargetInfo.AddressDomain): Moved here from `ITargetMemoryInfo'.

	* backends/classes/TargetReader.cs
	(TargetReader): Don't implement `ITargetMemoryInfo'.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/Inferior.cs
	(Inferior.GetTargetInfo): New public static method.

	* arch/CoreFile.cs: Don't create an Inferior here and make core
	files work again.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* backends/ThreadBase.cs: Renamed into TargetAccess.cs.
	(ThreadBase): Renamed into `TargetAccess'.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryInfo): Make this interface internal.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryAccess): Make this interface internal.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* classes/AddressDomain.cs
	(AddressDomain): Make the .ctor internal.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryReader): Removed this interface; `TargetReader' is
	the only class implementing it.

2006-04-18  Martin Baulig  <martin@ximian.com>

	* classes/ExceptionCatchPoint.cs
	(ExceptionCatchPoint): Make this class sealed and rename
	`CheckBreakpointHit' into `CheckException'.

	* classes/Event.cs
	(Event.CheckBreakpointHit): Moved into the `Breakpoint' class.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.child_breakpoint): Run
	`breakpoint.CheckBreakpointHit()' asynchronously.

2006-04-17  Martin Baulig  <martin@ximian.com>

	Bump version number to 0.14 and require Mono >= 1.1.15.

2006-04-17  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs: Cosmetic cleanups in the
	process-related messages.

2006-04-17  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.AcquireGlobalThreadLock): Check the
	`stop_event' and don't do anything if we just died.
	(SingleSteppingEngine.Start): Set `main_method_stackptr' to the
	current stack pointer.

	* backends/server/x86_64-arch.c
	(server_ptrace_get_frame): Call x86_arch_get_registers() first.

	* backends/server/i386-arch.c
	(server_ptrace_get_frame): Call x86_arch_get_registers() first.

2006-04-13  Martin Baulig  <martin@ximian.com>

	* backends/ProcessStart.cs
	(ProcessStart.SetupEnvironment): Add a `MONO_INSIDE_MDB' 
	environment variable; this is required if the target fork()s
	another mono process.

2006-04-13  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoLanguageBackend.cs: Use the new
	`MonoDefaults' offsets.

2006-04-13  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs
	(Process.ChildExecd): Don't create a new process here.

2006-04-12  Martin Baulig  <martin@ximian.com>

	* test/testsuite/testnativeexec.cs: New test.

2006-04-11  Martin Baulig  <martin@ximian.com>

	* test/testsuite/TestRestart.cs: New test.

2006-04-11  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs
	(Debugger.ProcessReachedMainEvent): Removed.

	* classes/DebuggerSession.cs
	(DebuggerSession): We're not a static class anymore.

	* frontend/Interpreter.cs: Save the session on exit and load it
	when we restart.

2006-04-11  Martin Baulig  <martin@ximian.com>

	* classes/SimpleBreakpoint.cs: Removed.

	* classes/Breakpoint.cs (Breakpoint): Don't make this abstract.

	* backends/Process.cs
	(Process.InsertBreakpoint): Create and return a new `Breakpoint'.
	(Process.InsertExceptionCheckPoint): Likewise.

2006-04-11  Martin Baulig  <martin@ximian.com>

	* classes/Event.cs (Event): New public abstract class.  This
	replaces the old `EventHandle' class.

	* classes/Breakpoint.cs (Breakpoint): Derive from `Event'.

	* classes/ExceptionCatchPoint.cs
	(ExceptionCatchPoint): New public class; derives from `Event'.

	* classes/EventHandle.cs: Removed.
	* classes/CatchpointHandle.cs: Removed.

	* classes/SourceLocation.cs
	(SourceLocation): We can now also operate on a
	`TargetFunctionType'.
	(SourceLocation.HasFunction): New public property.
	(SourceLocation.InsertBreakpoint): New internal method.

	* classes/BreakpointHandle.cs
	(BreakpointHandle): This is now private.

2006-04-11  Martin Baulig  <martin@ximian.com>

	* classes/BreakpointHandle.cs
	(BreakpointHandle): Make this internal.

	* backends/Process.cs
	(Process.InsertBreakpoint): Don't take a `Thread' argument and
	don't enable the breakpoint.

	* frontend/Interpreter.cs
	(Interpreter.InsertBreakpoint): Process.InsertBreakpoint() no
	longer enables the breakpoint; do this here.

2006-04-11  Martin Baulig  <martin@ximian.com>

	* classes/Module.cs (ILoadHandler): New internal interface.
	(SymbolFile.RegisterLoadHandler, Module.RegisterLoadHandler):
	Return an `ILoadHandler', not an `IDisposable'.	

2006-04-11  Martin Baulig  <martin@ximian.com>

	* classes/SourceLocation.cs
	(SourceLocation.SourceBuffer): Removed.

2006-04-11  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs
	(Process.SaveSession, LoadSession): New public methods; moved the
	session handling code here from `DebuggerSession'.
	(Process.Session): Removed.

	* classes/DebuggerSession.cs
	(DebuggerSession): Make this a static class for the moment; all
	the session handling code is now in `Process'.

2006-04-11  Martin Baulig  <martin@ximian.com>

	* classes/ThreadGroup.cs
	(ThreadGroup.Global, ThreadGroup.System): New public static
	properties; the "global" and "system" groups are now static and
	immutable.

	* backends/BreakpointManager.cs
	(BreakpointManager.RemoveBreakpointsAfterFork): Renamed into
	InitializeAfterFork().	

2006-04-11  Martin Baulig  <martin@ximian.com>

	* classes/Breakpoint.cs (Breakpoint.Clone): Removed.

	* backends/BreakpointManager.cs
	(BreakpointManager.RemoveBreakpointsAfterFork): Create a new
	`BreakpointHandle' for all global user-defined breakpoints.

2006-04-11  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs (Process): Moved the breakpoint/event code
	here from `DebuggerSession'.

	* backends/DebuggerSession.cs (DebuggerSession): Moved the
	breakpoint/event code into `Process'.

2006-04-10  Martin Baulig  <martin@ximian.com>

	* backends/BreakpointManager.cs
	(BreakpointManager.RemoveBreakpointsAfterFork): Remove all
	non-global breakpoints after a fork().

	* backends/Inferior.cs
	(Inferior.InitializeAfterFork): Call it here.

	* frontend/Interpreter.cs
	(Interpreter.GetThreadGroup): Default to `main', not `global'.

2006-04-10  Martin Baulig  <martin@ximian.com>

	* backends/ILanguageBackend.cs
	(NotificationType): Added `ThreadExited'.

	* backends/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): If we receive a
	`ThreadExited' notification, clear `engine.EndStackAddress'.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.ReleaseThreadLock): Resume the target if we
	stopped it.

2006-04-10  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-ptrace.c
	(server_ptrace_dispatch_event): Clear `inferior->last_signal' if
	we don't send a `MESSAGE_CHILD_STOPPED'.

2006-04-10  Martin Baulig  <martin@ximian.com>

	Released version 0.13 "Luxemburg" of the Mono Debugger :-)

2006-04-10  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs
	(Debugger.DebuggerSession): Moved into `Process'.

	* backends/Process.cs
	(Process.DebuggerSession): Moved here from `Debugger'.

	* classes/DebuggerSession.cs
	(DebuggerSession): Make this per-process, not per-debugger.

2006-04-09  Martin Baulig  <martin@ximian.com>

	* test/testsuite/testnativefork.cs: New test.
	* test/src/testnativefork.c: Test case for the test.

2006-04-09  Martin Baulig  <martin@ximian.com>

	* backends/Threadmanager.cs
	(ThreadManager.HandleChildEvent): Pass SIGCHLD to the target
	without stopping it.

	* backends/server/x86-ptrace.c
	(server_ptrace_dispatch_event): Return a normal
	MESSAGE_CHILD_STOPPED on SIGCHLD.

2006-04-07  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-ptrace.c (server_ptrace_spawn): Set the
	child's core-file limit to zero after forking.

2006-04-07  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-ptrace.c
	(io_thread): Fix a very old race condition: keep our data in a
	separate `IOThreadData' structure since the inferior could have
	been disposed.

2006-04-07  Martin Baulig  <martin@ximian.com>

	* test/: Clean up this directory a bit.

	* test/mono-debugger.tests/: Removed.
	* test/mdb.exp: Removed.

2006-04-06  Martin Baulig  <martin@ximian.com>

	* frontend/CL.cs (Engine.ctor): Take an `Interpreter' argument.
	(Engine.Run): Moved the exception handling here.

	* frontend/Command.cs
	(Command.Execute): Changed return type to `void'; don't catch any
	exceptions here.
	(Command.Repeat): Changed return type to `void'.
	(Command.Resolve): Don't catch any exceptions here.

2006-04-06  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter): Implement `IDisposable'.

2006-04-05  Martin Baulig  <martin@ximian.com>

	* wrapper/: Renamed to `build'.

2006-04-05  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs (DebuggerEngine.ctor): Register all the
	commands here.

	* frontend/Interpreter.cs (Interpreter): Make this a sealed class
	and add a public .ctor.

	* frontend/Main.cs (CommandLineInterpreter): Don't derive from
	`Interpreter' anymore.

	* frontend/ScriptingContext.cs
	(ScriptingContext.PrintObject): Renamed into FormatObject().
	(ScriptingContext.PrintType): Renamed into FormatType().

2006-04-05  Martin Baulig  <martin@ximian.com>

	* test/testsuite/: New directory.  Started to migrate the
	testsuite to NUnit.

	* test/src/: New directory.  The test sources will be moved here.	

2006-04-04  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-linux-ptrace.c
	(_server_ptrace_setup_inferior): Check whether we're already
	stopped before blocking on do_wait().

2006-04-04  Martin Baulig  <martin@ximian.com>

	* NEWS: Updated NEWS.

2006-04-04  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs
	(Process.AcquireGlobalThreadLock): Moved here from ThreadManager.
	(Process.ReleaseGlobalThreadLock): Likewise.

2006-04-03  Martin Baulig  <martin@ximian.com>

	HEADS UP: The debugger no longer works with the stable Mono from
	the 1.1.13 branch, sorry.

	* configure.in: Require Mono >= 1.1.14.

2006-04-03  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs
	(Debugger.TargetOutputEvent): Moved here from `Thread'.

2006-04-03  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs: Inform the user about newly created and
	exited processes.

2006-04-03  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.MainProcess): Removed.
	(Interpreter.CurrentProcess): New public property.

	* backends/Debugger.cs
	(Debugger.TargetExitedEvent): New public event.
	(Debugger.OnProcessExitedEvent): Kill all other processes if the
	main process exited.
	(Debugger.Kill): New public method.

2006-04-03  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs
	(Process.Initialize): Set `main_thread' and `main_engine' here.

	* backends/Debugger.cs
	(Debugger.Run): It's now safe to use `process.MainThread' on the
	returned Process immediately.

2006-04-03  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.start_event): Removed.

2006-04-03  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.Threads): Removed; we don't keep a separate hash
	table here anymore, but use `Process.Threads' instead.
	(Interpreter.Processes): New public property.

	* frontend/Command.cs
	(Show.ShowProcessesCommand): Added `show processes' command.

2006-04-03  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs
	(Process.ID): New public property.
	(Process.Threads): New public property.
	(Process.TargetApplication): New public property.
	(Process.CommandLineArguments): New public property.

2006-04-03  Martin Baulig  <martin@ximian.com>

	* classes/Breakpoint.cs (Breakpoint): Implement ICloneable.
	(Breakpoint.Clone): New public method.

2006-04-03  Martin Baulig  <martin@ximian.com>

	* backends/server/breakpoints.c
	(mono_debugger_breakpoint_manager_clone): New public function.

2006-04-02  Martin Baulig  <martin@ximian.com>

	* backends/server/breakpoints.h
	(BreakpointInfo): Merge this with `X86BreakpointInfo'.

	* backends/server/x86-arch.h
	(X86BreakpointInfo): Merged into `BreakpointInfo'.

2006-04-02  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs: Correctly dispose the `Debugger', so we
	don't hang on exit.

2006-04-01  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs: Implement follow-fork and follow-exec.

	* backends/Debugger.cs
	(Debugger.ProcessReachedMainEvent): New public event.

2006-04-01  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-linux-ptrace.c
	(_server_ptrace_setup_thread_manager): Add `PTRACE_O_TRACEFORK',
	`PTRACE_O_TRACEVFORK' and `PTRACE_O_TRACEEXEC'.

	* backends/server/server.h (ServerStatusMessageType): Added
	`MESSAGE_CHILD_FORKED' and `MESSAGE_CHILD_EXECD'.

	* backends/server/library.c
	(mono_debugger_server_init_after_fork): New public function.

	* backends/server/i386-arch.c
	(do_disable, do_enable): Don't modify `breakpoint->info.enabled';
	this is now done by our caller.

	* backends/server/x86_64-arch.c
	(do_disable, do_enable): Don't modify `breakpoint->info.enabled';
	this is now done by our caller.

2006-04-01  Martin Baulig  <martin@ximian.com>

	* languages/native/NativeLanguage.cs
	(NativeLanguage.StringType): Implemented.

	* languages/native/NativePointerObject.cs
	(NativePointerObject.Print): Check whether we're a string.

2006-04-01  Martin Baulig  <martin@ximian.com>

	* backends/ProcessStart.cs
	(ProcessStart.SetupEnvironment): Set `MONO_SHARED_HOSTNAME=mdb'.

2006-03-29  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs
	(Debugger.InitializedEvent): Renamed to `ProcessCreatedEvent'.
	(Debugger.TargetExitedEvent): Renamed to `ProcessExitedEvent'.

2006-03-29  Martin Baulig  <martin@ximian.com>

	* backends/remoting/: Removed.

2006-03-29  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs (Debugger): Don't make this abstract and
	added a public .ctor.

	* backends/DebuggerSession.cs: Take a `Debugger' argument, not a
	`DebuggerClient' one.

	* backends/remoting/DebuggerClient.cs: Removed.
	* backends/remoting/DebuggerServer.cs: Removed.

2006-03-29  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(DebuggerCommand.Execute): Don't create a new `ScriptingContext'
	if we're repeating.

2006-03-28  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(DebuggerCommand.Execute): Create a new `ScriptingContext'.
	(DebuggerCommand.Resolve): Call DoResolveBase() before
	DoResolve().
	(ThreadCommand.DoResolveBase): Set `context.CurrentThread' here.
	(ThreadCommand.ResolveThread): Removed; use `CurrentThread' instead.
	(ThreadCommand.CurrentThread): New public property.
	(FrameCommand.DoResolveBase): Set `context.CurrentFrame' here.
	(FrameCommand.ResolveFrame): Removed; use `CurrentFrame' instead.
	(FrameCommand.CurrentFrame): New public property.
	(UpCommand, DownCommand): We now use `backtrace.CurrentFrameIndex'.

2006-03-28  Martin Baulig  <martin@ximian.com>

	* classes/Backtrace.cs
	(Backtrace.CurrentFrame): New public property.
	(Backtrace.CurrentFrameIndex): Likewise.

	* languages/Language.cs
	(Language.Process): New public porperty.

2006-03-14  Martin Baulig  <martin@ximian.com>

	Released version 0.12 "Portland" of the Mono Debugger :-)

2006-03-14  Martin Baulig  <martin@ximian.com>

	* configure.in: Require Mono >= 1.1.13.

2006-03-13  Wade Berrier <wberrier@novell.com>

	* arch/Makefile.am backends/remoting/Makefile.am backends/Makefile.am:
	Update EXTRA_DIST to fix make dist and make distcheck

2006-03-04  Martin Baulig  <martin@ximian.com>

	* backends/MonoThreadManager.cs
	(MonoThreadManager.Initialize): The notification function is not
	dynamically allocated at runtime; we need to insert a breakpoint
	on the `initialize' function in the `MONO_DEBUGGER_debugger_info'
	vtable and read the notification address once we hit that bpt.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* backends/TargetAccess.cs: Removed.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* languages/*.cs: Use `Thread' everywhere instead of `TargetAccess'.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* languages/Language.cs
	(Language.CreateObject): Take a `Thread' argument, not a `TargetAccess'.
	(Language.CreateInstance): Likewise.
	(Language.CreateNullObject): Likewise.

	* classes/Breakpoint.cs
	(Breakpoint.CheckBreakpointHit): Take a `Thread' argument, not a
	`TargetAccess'.

	* classes/SimpleBreakpoint.cs
	(BreakpointCheckHandler): Take a `Thread' argument, not a `TargetAccess'.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* backends/TargetAccess.cs
	(TargetAccess.DisassembleInstruction): Removed.
	(TargetAccess.DisassembleMethod): Removed.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* backends/TargetAccess.cs
	(TargetAccess.InsertBreakpoint): Removed.
	(TargetAccess.RemoveBreakpoint): Removed.
	(TargetAccess.AddEventHandler): Removed.
	(TargetAccess.RemoveEventHandler): Removed.

	* backends/Debugger.cs
	(Debugger.InsertBreakpoint): Removed.
	(Debugger.InsertExceptionCatchpoint): Removed.

	* backends/BreakpointHandle.cs
	(BreakpointHandle): We now operate directly on the `Thread'
	instead of the `TargetAccess'.

	* classes/DebuggerSession.cs
	(DebuggerSession.InsertBreakpoint): Take a `Thread' argument
	instead of a `TargetAccess'.
	(DebuggerSession.InsertExceptionCatchPoint): Likewise.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* classes/Breakpoint.cs
	(Breakpoint.GetNextBreakpointIndex): New internal static method.

	* classes/EventHandle.cs (EventHandle..ctor): We now take an
	`index' argument; we use `Breakpoint.Index' for breakpoints and
	generate a new unique index for catchpoints.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* backends/remoting/DebuggerContext.cs: Removed.

	* backends/remoting/DebuggerManager.cs: Removed.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* backends/TargetAccess.cs (ClientTargetAccess): Removed.
	(TargetAccessHelper): Removed; we now share the same
	`TargetAccess' between client and server.

	* backends/remoting/DebuggerContext.cs
	(DebuggerContext.GetTargetAccess): Removed.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs
	(Process): Manage thread groups here and not in `DebuggerManager'.

	* backends/remoting/DebuggerManager.cs
	(DebuggerManager): Moved all the thread groups related code into
	the new `Process' class.

2006-02-28  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs: New file.
	(Process): New internal class.  This class holds all the
	information about one instance of a target application; ie. the
	target application's threads, breakpoints, modules and symbol
	tables.

	* backends/ThreadManager.cs
	(ThreadManager): The `ThreadManager' can now persist across
	multiple invocations of a target application; all the state is in
	the new `Process' class.

2006-02-24  Martin Baulig  <martin@ximian.com>

	The big `Process' -> `Thread' rename.

	* backends/Process.cs: Renamed to Thread.cs
	(Process): Renamed to Thread.

	* frontend/Command.cs
	(ProcessCommand): Renamed to `ThreadCommand'.
	(ThreadCommand.ResolveProcess): Renamed to `ResolveThread'.
	(FrameCommand.Process): Renamed the property to `Thread'.
	(SelectProcessCommand): Renamed to `SelectThreadCommand'.
	(BackgroundProcessCommand): Renamed to `SelectThreadCommand'.
	(StopProcessCommand): Renamed to `StopThreadCommand'.

	* frontend/Main.cs
	(CommandLineInterpreter.SetupEngine): Renamed the "process"
	command to "thread".

2006-02-24  Martin Baulig  <martin@ximian.com>

	* backends/Thread.cs: Renamed to ThreadBase.cs.
	(Thread): Renamed to `ThreadBase'.

2006-02-23  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs (Process): Derive from `Thread'.

2006-02-23  Martin Baulig  <martin@ximian.com>

	* backends/server/library.c
	(mono_debugger_server_get_application): Return the currently
	running application, its current working directory and command
	line arguments; we use this after attaching to a process.

	* backends/Inferior.cs (Inferior.GetApplication): New public
	method to get the currently running application.
	(Inferior.Attach): Call GetApplication() after attaching and setup
	the `ProcessStart' accordingly.

	* backends/ProcessStart.cs
	(ProcessStart.SetupApplication): New public method; we use this
	after attaching, so the user doesn't need to specify the application.

2006-02-23  Martin Baulig  <martin@ximian.com>

	Support multiple appdomains; this is only used when attaching to a
	process which is running without `-O=shared'; the API to insert a
	breakpoint in another appdomain is intentionally undocumented and
	will change in near future.

	* classes/SourceInfo.cs (SourceMethod.IsLoaded): Removed.
	(SourceMethod.Method): Replaced the property with a new
	GetMethod() method which takes a `domain' argument.
	(SourceMethod.GetMethod): New public method.
	(SourceMethod.Lookup): Removed.

	* classes/DebuggerSession.cs
	(DebuggerSession.InsertBreakpoint): Added `int domain' argument.

	* classes/Module.cs
	(SymbolFile.GetMethod): Added `int domain' argument.

	* classes/SourceLocation.cs
	(SourceLocation.GetAddress): Added `int domain' argument to
	support multiple application domains.

	* classes/BreakpointHandle.cs: Support multiple appdomains.

	* languages/mono/MonoSymbolFile.cs: Support multiple appdomains.

2006-02-08  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.c: Use `guint32' instead of `long'
	everywhere to correctly handle "negative" values.

2006-02-02  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(AttachCommand): New command.
	(OpenCoreFileCommand): New command.

	* frontend/Interpreter.cs
	(Interpreter.Attach): New public method.
	(Interpreter.OpenCoreFile): New public method.

2006-02-02  Martin Baulig  <martin@ximian.com>

	* backends/ProcessStart.cs
	(ProcessStart.CoreFile): New public readonly field.
	(ProcessStart.PID): New public readonly field

	* backends/Debugger.cs
	(Debugger.Attach): New public method.
	(Debugger.OpenCoreFile): New public method.

2006-02-02  Martin Baulig  <martin@ximian.com>

	* backends/Thread.cs: New file.
	(Mono.Debugger.Backends.Thread): New public abstract class.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine): Derive from `Thread'.

	* arch/CoreFile.cs (CoreFile): Derive from `Thread'.

	* backends/Process.cs (Process): Use a new `Thread thread' field
	to perform non-stepping operations so we can talk both to a
	`SingleSteppingEngine' and a `CoreFile'.

2006-02-02  Martin Baulig  <martin@ximian.com>

	* backends/MonoThreadManager.cs: The big API cleanup.
	(MonoDebuggerInfo): Moved this here from MonoLanguageBackend.

	* languages/mono/MonoLanguageBackend.cs
	(MonoDebuggerInfo): Moved into MonoThreadManager.

2006-02-02  Martin Baulig  <martin@ximian.com>

	* arch/bfdglue.h (BfdGlueSection): Added `name'.

	* arch/bfdglue.c (bfd_glue_core_file_failing_command): New
	function.

	* arch/Bfd.cs: Added core file support.

	* arch/CoreFile.cs: New file.
	(Mono.Debugger.Backends.CoreFile): New internal class.

	* arch/Architecture.cs (Architecture.CreateFrame): Added
	overloaded version taking a `Registers' argument.

2006-02-02  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-linux-ptrace.c
	(server_ptrace_get_threads): New function.

	* backends/server/x86-ptrace.c
	(server_ptrace_initialize): Renamed into `server_ptrace_create_inferior'.
	(server_ptrace_attach): Renamed into `server_ptrace_initialize'
	and created a new `server_ptrace_attach' to actually attach to a process.
	Note that If we "attach" to a thread after receiving a PTRACE_EVENT_CLONE,
	we are in fact already attached to that thread and don't need another
	PT_ATTACH call.

	* backends/server/library.c
	(mono_debugger_server_initialize): Use this to "attach" to a new
	thread of the application we're already debugging; this is used
	after receiving a PTRACE_EVENT_CLONE.
	(mono_debugger_server_attach): Use this to actually attach to a
	new process.
	(mono_debugger_server_get_threads): Get all threads of the process.

2006-01-25  Martin Baulig  <martin@ximian.com>

	* backends/MonoThreadManager.cs: Started to clean this up; removed
	the `thread_hash'.

	* backends/Inferior.cs (Inferior.TID): Make this a `long', not `int'.
	* backends/Process.cs (Process.TID): Likewise.

	* backends/server/library.c
	(mono_debugger_server_attach): `tid' is now a `guint64 *'.
	(mono_debugger_server_peek_word): `word' is now a `guint64 *'.

	* backends/server/x86-arch.h (x86_arch_get_tid): Return a `guint64'.

2006-01-21  Martin Baulig  <martin@ximian.com>

	The debugger is now using the normal `mono' instead of its own
	`mono-debugger-mini-wrapper' to execute managed code.  You need to
	use the latest SVN version of Mono from either HEAD or the
	mono-1-1-13 branch for this.

	* frontend/Main.cs: Added `-mono' command line argument to
	specify the `mono' which should be used to execute managed code.

	* wrapper/Makefile.am: The `mono-debugger-mini-wrapper' is gone.

	* wrapper/wrapper.c: Removed.
	* wrapper/mono-debugger-jit-wrapper.h: Removed.

2006-01-21  Martin Baulig  <martin@ximian.com>

	* wrapper/wrapper.c, thread-manager.c: Merge wrapper.c and
	thread-manager.c into wrapper.c.

	* wrapper/thread-manager.c: Removed.
	* wrapper/icall.c: Removed.

2006-01-19  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.do_continue): Only insert the temporary
	breakpoint if we're not stepping over a breakpoint; otherwise
	OperationStepOverBreakpoint takes care of that.

	* tests/mono-debugger.tests/TestBreakpoint.exp: Added some more
	test cases; this also addresses the underlying problem of #77056.

2006-01-19  Martin Baulig  <martin@ximian.com>

	Fix #77056.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.ProcessChildEvent): Don't remove the
	temporary breakpoint here unless we actually hit it.
	(SingleSteppingEngine.step_over_breakpoint): The `trampoline'
	argument is either null or the same than `until'; so change its
	type into a `bool'.
	(Operation.ResumeOperation): New protected virtual method; we're
	called if the operation got interrupted by a non-breaking
	breakpoint and we need to resume it.

	* backends/server/x86_64-arch.cx
	(86_arch_get_registers): Also read `DR_STATUS' here to make
	hardware breakpoints actually work.

2006-01-05  Hans Kratz <kratz@omnicore.com>

	* backends/ProcessStart.cs: Search for the for the wrapper in 
	the directory where mscorlib.dll is located instead.   This is
	used so other clients can work (X-Develop for example).

2005-12-21  Wade Berrier <wberrier@novell.com>

	* wrapper/mdb.in: Modify wrapper to match more closly the wrappers in mono

2005-12-15  Martin Baulig  <martin@ximian.com>

	Released version 0.11 "Guam" of the Mono Debugger :-)

2005-12-14  Martin Baulig  <martin@ximian.com>

	* wrapper/Mono.Debugger.Cecil.dll: Added this to SVN.

	* wrapper/Makefile.am: Don't build Mono.Debugger.Cecil.dll.

2005-12-14  Martin Baulig  <martin@ximian.com>

	* configure.in: Require Mono 1.1.11.

2005-12-14  Martin Baulig  <martin@ximian.com>

	* backends/remoting/DebuggerClient.cs
	(DebuggerClient.IsRemote): Use another appdomain instead of
	another process.

2005-12-11  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(TypeExpr): New public abstract base class for `TypeExpression'.
	(PointerExpression): New public class.
	(CastExpression.DoEvaluateObject): Allow casting from a pointer
	expression of from a non-typesafe pointer to a native pointer.

	* frontend/CSharpExpressionParser.jay
	(variable_or_type_name): Add `NativeTypeName *' syntax for native
	pointers.	

2005-12-11  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs
	(Debugger.NativeLanguage): New public property.

2005-12-11  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoGenericInstanceType.cs: New file.
	(MonoGenericInstanceType): New public class; derives from
	`MonoClass'.  We still don't have full generics support, we treat
	the generic instance just like a normal class.

2005-12-11  Martin Baulig  <martin@ximian.com>

	* languages/TargetPointerType.cs
	(TargetPointerType.GetObject): New public method to create a
	pointer from an address.

2005-12-11  Martin Baulig  <martin@ximian.com>

	* languages/Language.cs
	(Language.CreatePointerType): New public method.

2005-12-11  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs: Improved the type support.

	* arch/BfdContainer.cs
	(BfdContainer.LookupType): We now use a type hashtable in the
	`BfdContainer' and keep track of incomplete structs: if there's a
	typedef entry for the same struct in more than one source file,
	return the actual definition.

2005-12-11  Martin Baulig  <martin@ximian.com>

	* backends/remoting/DebuggerClient.cs
	(DebuggerClient.ClientShutdown): New public event.

	* frontend/Interpreter.cs
	(Interpreter.Exit): Call Environment.Exit() in a `finally'
	handler; print, but ignore all exceptions.
	(Interpreter.InterpreterEventSink): Connect to the
	`DebuggerClient.ClientShutdown' event.

2005-12-07  Martin Baulig  <martin@ximian.com>

	Reworked the breakpoint code and added session management.

	* classes/DebuggerSession.cs
	(DebuggerSession): The new session management code.

	* classes/SourceFile.cs (SourceFile): Make this [Serializable].
	(SourceMethod): Likewise.

	* classes/SourceLocation.cs
	(SourceLocation): Make this [Serializable].

	* classes/EventHandle.cs
	(EventHandle): Don't implement `IEventHandle'; killed that
	interface.

	* arch/Bfd.cs (Bfd): Inherit from `SymbolFile', not `Module'.

	* languages/mono/MonoSymbolFile.cs
	(MonoSymbolFile): Inherit from `SymbolFile', not `Module'.

	* classes/CatchpointHandle.cs
	(CatchPointHandle): Don't use an `ExceptionCatchPoint' anymore; do
	everything in here instead.

	* classes/ThreadGroup.cs (ThreadGroup): Moved all the static
	methods into DebuggerManager.

	* classes/Module.cs
	(SymbolFile): New internal abstract class; replaces `ISymbolFile'.
	(Module): Don't make this abstract; split out all the
	functionality into `SymbolFile'.

	* classes/ExceptionCatchPoint.cs: Removed.

	* interfaces/IEventHandle.cs: Removed.

	* interfaces/ISymbolFile.cs: Removed.

2005-12-03  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs: Moved to ../backends/ProcessStart.cs;
	moved the `ProcessStart' class into the `Mono.Debugger.Backends'
	namespace; moved the `DebuggerOptions' class into the new
	DebuggerSession.cs.

	* classes/DebuggerSession.cs: New file.
	(DebuggerOptions): Moved here from ProcessStart.cs.

2005-12-03  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs
	(ProcessStart): Make this class internal.
	(DebuggerOptions): We're now [Serializable] and not a
	MarshalByRefObject anymore.	

2005-12-01  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs (ProcessHandle): Removed.

2005-12-01  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs
	(ProcessHandle): Removed some more stuff here and get ready to
	kill it.

2005-12-01  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(Command.SteppingCommand): New public abstract class; use this for
	all stepping commands.

	* frontend/ScriptingContext.cs (ProcessHandle.Step): Removed.

2005-12-01  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs (FrameHandle): Removed.
	(BacktraceHandle): Removed.

2005-12-01  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs
	(StackFrame.ExceptionObject): New public property.

	* frontend/Style.cs
	(StyleBase.UnhandledException): Don't take a `TargetObject exc'
	argument; it's now part of the `StackFrame'.
	(StyleBase.TargetEvent): New public abstract method.

	* frontend/ScriptingContext.cs
	(FrameHandle.TargetEvent): Removed; we now use `Style.TargetEvent'.

2005-12-01  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs
	(FrameHandle): Removed all the register stuff.

2005-12-01  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs
	(FrameHandle.Disassemble): Removed.
	(FrameHandle.DisassembleMethod): Removed.
	(FrameHandle.Language): Removed.
	(ScriptingContext.CurrentLanguage): New public property.

2005-11-30  Martin Baulig  <martin@ximian.com>

	* frontend/Style.cs (StyleMartin): Removed.
	(StyleBase.PrintFrame): Take a `StackFrame' instead of a
	`FrameHandle'.
	(StyleBase.TargetStopped): Likewise.
	(StyleBase.UnhandledException): Likewise.

2005-11-30  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.h: Move the hardware breakpoint stuff
	to x86-ptrace.h and rename the `I386_DR_*' macros to `X86_DR_*'.

	* backends/server/x86_64-arch.c: Implement hardware breakpoints.

2005-11-30  Martin Baulig  <martin@ximian.com>

	* frontend/Style.cs: Merge `StyleMono' and `StyleNative' into a
	new `StyleCLI'.

2005-11-30  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs (Process.DebuggerOutput): Removed.
	* backends/Process.cs (Process.DebuggerError): Removed.

2005-11-30  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.c
	(server_ptrace_call_method_invoke): Make this work again.

2005-11-29  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.c
	(server_ptrace_insert_breakpoint): You cannot have a hardware
	breakpoint and a normal breakpoint on the same address.
	(server_ptrace_insert_hw_breakpoint): Check whether we already
	have a breakpoint on the requested instruction.

2005-11-28  Martin Baulig  <martin@ximian.com>

	* classes/Report.cs (Report.Print): New public method.
	(Report.Error): New public method.

	* frontend/Interpreter.cs: Use Report.Print() and Report.Error()
	to print things.

2005-11-28  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.c: Make i386 support work again.

2005-11-11  Martin Baulig  <martin@ximian.com>

	* languages/native/NativeEnumObject.cs: Removed.
	* languages/mono/MonoEnumObject.cs: Removed.

	* languages/TargetEnumObject.cs
	(TargetEnumObject): Don't make this class abstract.
	(TargetEnumObject.Value): Implement this here.

	* languages/TargetEnumType.cs
	(TargetEnumType.GetValue): New internal method.

2005-11-11  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs
	(DwarfTargetVariable.GetLocation): Implemented a few more opcodes.

	* languages/TargetVariable.cs
	(TargetVariable.PrintLocation): New public abstract method.

	* frontend/Command.cs
	(ShowLocationCommand): Added `show location' command.

2005-11-11  Martin Baulig  <martin@ximian.com>

	* backends/server/library.c
	(mono_debugger_server_initialize): Print a warning that running
	mdb as root may be a security risk; see
	http://primates.ximian.com/~martin/blog/entry_150.html for details.

2005-11-11  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(Expression.EvaluateVariable): Renamed to `EvaluateObject'.
	(Expression.DoEvaluateVariable): Renamed to `DoEvaluateObject'.

2005-11-11  Martin Baulig  <martin@ximian.com>

	* arch/Architecture.cs
	(Architecture.CopyRegisters): New internal abstract method.

	* arch/DwarfFrameReader.cs: Use `arch.CopyRegisters()' to copy the
	registers; preserve callee saved registers.

	* classes/StackFrame.cs (Register.Name): New public field.

2005-11-11  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(Expression.EvaluateLocation): Renamed to `EvaluateSource'.
	(Expression.DoEvaluateLocation): Renamed to `DoEvaluateSource'.

2005-11-10  Martin Baulig  <martin@ximian.com>

	* arch/Architecture.cs
	(Architecture.Hack_ReturnNull): You don't wanna use this function.

	* arch/BfdContainer.cs: Some minor API cleanups; make sure to set
	the newly created Bfd's `MainBfd'.

	* classes/Breakpoint.cs
	(Breakpoint.BreakpointHandler): New internal function.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.child_breakpoint): Call the new
	`bpt.BreakpointHandler()' method before CheckBreakpointHit().

	* arch/Bfd.cs
	(Bfd.DynlinkBreakpoint): New private class; we use this for the
	dynlink breakpoints.
	(Bfd.module_loaded): Added big big hack for gnome-vfs: intercept
	any calls to `__nptl_setxid()' via the new `SetXidBreakpoint' and
	make it return 0.

2005-11-10  Martin Baulig  <martin@ximian.com>

	* backends/server/library.c
	(mono_debugger_server_initialize): Refuse to run as root.

2005-11-09  Martin Baulig  <martin@ximian.com>

	* languages/TargetClassType.cs
	(TargetClassType.Module): New public abstract property.

	* languages/TargetFunctionType.cs
	(TargetFunctionType.IsLoaded): New public abstract property.

	* classes/BreakpointHandle.cs
	(BreakpointHandle.EnableBreakpoint): When inserting a breakpoint
	on a function, first check whether that function is loaded and use
	a load handler if not.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.ExecuteOperation): New private method; use
	this in ProcessOperation() and PushOperation() rather than calling
	`operation.Execute (this)' directly; catch exceptions here.

2005-11-08  Martin Baulig  <martin@ximian.com>

	* languages/Language.cs
	(Language.LookupType): Removed the `StackFrame' argument.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.LookupMonoType): Use `LookupType' to lookup a
	`Cecil.ITypeReference'.	

2005-11-08  Martin Baulig  <martin@ximian.com>

	* backends/Inferior.cs
	(Inferior.CreateThread): Copy all the data to the new Inferior, so
	we don't need to call SetupInferior() on it.
	(Inferior.Attach): Don't call SetupInferior().
	(Inferior.Dispose): Don't dispose the `Bfd' as it's owned by the
	BfdContainer and will be disposed by the `Debugger' backend.

2005-11-02  Martin Baulig  <martin@ximian.com>

	* classes/Report.cs
	(Report): Make this a static class and remove everything except
	the `Debug' method.
	(ReportWriter): New public `MarshalByRefObject' class.

	* backends/remoting/DebuggerContext.cs
	(DebuggerContext.ReportWriter): New public property; share one
	`ReportWriter' instance between client and server so we can
	redirect debugging output to a file.

	* frontend/Main.cs (Main.ParseOption): The `-debug-flags' command
	line argument now takes an optional filename.

2005-11-02  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(CommandAttribute): Removed.
	(SingleSteppingEngine.SendCommand): New private method; call
	`manager.SendCommand' unless we're in the engine thread.
	(SingleSteppingEngine): Use `SendCommand' with an anonymous method
	everywhere instead of the [Command] attribute.

2005-10-29  Martin Baulig  <martin@ximian.com>

	Avoid using the `Process' in the server; instead use the
	`TargetAccess' to avoid unneccessary remoting round-trips.

	* backends/Process.cs (Process.CallMethod): Removed.

	* backends/TargetAccess.cs
	(ServerTargetAccess.CallMethod): Implemented.
	(TargetAccess.InsertBreakpoint): New internal method.
	(TargetAccess.RemoveBreakpoint): New internal method.
	(TargetAccess.AddEventHandler): New internal method.
	(TargetAccess.RemoveEventHandler): New internal method.

	* classes/BreakpointHandle.cs
	(BreakpointHandle): Operate on `TargetAccess' and not on
	`Process'.	

2005-10-29  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(CommandResult): Make this abstract.
	(SimpleCommandResult): New internal class.
	(Operation.Result): New public readonly field.
	(SingleSteppingEngine.operation_completed): Don't call
	`process.SendTargetEvent()' anymore; our `current_operation' now
	contains a `CommandResult' which has the completed event.

	* backends/Process.cs (Process.State): Return the SSE's state.
	(Process.SendTargetEvent): Removed.
	(Process): When calling methods on the SSE, don't wait on the
	`operation_completed_event' directly; use the `CommandResult'.

2005-10-26  Martin Baulig  <martin@ximian.com>

	* languages/TargetClassType.cs
	(TargetClassType.ResolveClass): Removed.

	* languages/TargetFunctionType.cs
	(TargetFunctionType.GetVirtualMethod): Removed.

	* backends/Process.cs
	(Process.RuntimeInvoke): Take a `TargetFunctionType' instead of a
	`TargetAddress' and added `bool is_virtual' argument.

	* backends/SingleSteppingEngine.cs
	(OperationRuntimeInvoke): Cleaned this up; box the instance and
	compute the (virtual) method address here.

2005-10-20  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(Convert.ImplicitConversion(Exists)): Add support for implicit
	reference conversions from a type to its parent.

	* test/mono-debugger.tests/TestInheritance.exp: Added testcase.

2005-10-20  Martin Baulig  <martin@ximian.com>

	* frontend/Style.cs
	(StyleNative.DoFormatObject): Added support for enums.

	* languages/TargetEnumType.cs
	(TargetEnumType.IsFlagsEnum): New public property.

	* languages/TargetMember.cs
	(TargetMemberInfo): Make this a MarshalByRefObject.
	(TargetFieldInfo.ConstValue): New public property; replaces
	GetConstValue().
	(TargetFieldInfo.GetConstValue): Removed.

	* test/mono-debugger.tests/TestEnum.exp: Added enum test.

2005-10-19  Martin Baulig  <martin@ximian.com>

	* languages/TargetFunctionType.cs
	(TargetFunctionType.GetMethodAddress): New public method.
	(TargetFunctionType.GetVirtualMethod): New public method.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.RuntimeInvoke): Take a `TargetAddress'
	instead of a `TargetFunctionType'.
	(OperationRuntimeInvoke): Don't compute the virtual method and
	also don't box the instance here; our caller is now responsible
	for doing that.

	* backends/Process.cs (Process.RuntimeInvoke): Take a
	`TargetAddress' instead of a `TargetFunctionType'.

	* frontend/ScriptingContext.cs
	(ScriptingContext.RuntimeInvoke): Compute the virtual method and
	box/unbox the instance object here.

2005-10-18  Martin Baulig  <martin@ximian.com>

	* languages/TargetObjectType.cs
	(TargetObjectType): New public abstract class.

	* languages/TargetObjectObject.cs
	(TargetObjectObject): New public abstract class.

	* languages/TargetObjectKind.cs
	(TargetObjectKind): Added `TargetObjectKind.Object'.

	* languages/mono/MonoObjectType.cs
	(MonoObjectType): Derive from `TargetObjectType'.

	* languages/mono/MonoObjectObject.cs
	(MonoObjectObject): Derive from `TargetObjectObject'.

	* frontend/Expression.cs
	(Convert.ToClassType): New public static method.
	(Convert.ToClassObject): Likewise.

2005-10-18  Martin Baulig  <martin@ximian.com>

	* languages/TargetClassObject.cs
	(TargetClassObject.GetCurrentObject): New public abstract method.

	* frontend/Expression.cs
	(Cast.TryCurrentCast): Make this actually work.

2005-10-18  Martin Baulig  <martin@ximian.com>

	* backends/server/x86_64-arch.c, i386-arch.c: Save and restore
	`inferior->last_signal' across invocations.

2005-10-17  Martin Baulig  <martin@ximian.com>

	* backends/classes/MonoVariableLocation.cs
	(MonoVariableLocation.WriteAddress): Correctly handle `is_byref'.

2005-10-17  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs (VariableAccessExpression.DoAssign): Call
	`Convert.ImplicitConversionRequired' on the object to convert it
	to the correct type.

2005-10-17  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(MethodGroupExpression.ctor): Take a `TargetFunctionType[]' array
	instead of an `ArrayList'.
	(PropertyGroupExpression): Removed.
	(InvocationExpression.DoResolve): Do overload resolution here.
	(InvocationExpression.DoResolveType): Override this.
	(InvocationExpression.Invoke): Return `void'.
	(ArrayAccessExpression.DoResolveVariable, DoAssign): Use an
	`InvocationExpression' to invoke indexers.

2005-10-17  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs (Convert): New public static class.
	(Convert.ImplicitConversion): New public method.
	(Convert.ImplicitConversionExists): Likewise.
	(Convert.ImplicitConversionRequired): Likewise.
	(MethodGroupExpression.IsApplicable): New method to check whether
	a method is actually applicable.
	(MethodGroupExpression.OverloadResolve): Also check whether the
	method is applicable if there is just one single method; take a
	`TargetType[]' array instead of an `Expression[]' array as
	argument.
	(MethodGroupExpression.OverloadResolve): Make the overloaded
	version taking an `ArrayList candidates' private.
	(InvocationExpression.Invoke): Implicitly convert the arguments to
	the actual parameter types.
	(NewExpression.Invoke): Create an InvocationExpression to avoid
	some code duplication.

2005-10-16  Martin Baulig  <martin@ximian.com>

	* backends/classes/ClientSuppliedTargetLocation.cs
	(ClientSuppliedTargetLocation): New internal class.

	* languages/TargetFundamentalType.cs
	(TargetFundamentalType.CreateInstance): Use the new
	`ClientSuppliedTargetLocation' as the object's location rather
	than using the heap.

	* languages/Language.cs (Language.AllocateMemory): Removed.

	* languages/mono/Heap.cs: Removed.

2005-10-16  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationAbortInvocation): New operation to abort a runtime
	invoke; this unwinds the stack and calls all `finally' handlers.
	(SingleSteppingEngine.AbortInvocation): New function.

2005-10-16  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (StackFrame.ctor): Don't take a `level'
	argument; we compute this automatically when adding the frame to
	the Backtrace.

2005-10-16  Martin Baulig  <martin@ximian.com>

	* test/TestAbort.cs, test/mono-debugger.test/TestAbort.exp: New
	test for the stack unwinding and `return'.

2005-10-16  Martin Baulig  <martin@ximian.com>

	* backends/server/server.c
	(mono_debugger_server_abort_invoke): New public method.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.Return): Check whether we're crossing a
	runtime invoke boundary and abort the invocation if neccessary.
	(SingleSteppingEngine.ProcessChildEvent): We now receive a
	`CHILD_CALLBACK_COMPLETED' event when completing a debugging
	runtime invoke.

	* backends/Inferior.cs
	(Inferior.ChildEventType): Added `CHILD_CALLBACK_COMPLETED'.

	* backends/server/x86_64-arch.c
	(x86_arch_child_stopped): Send `STOP_ACTION_CALLBACK_COMPLETED' if
	we completed a debugging runtime invoke.

2005-10-16  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (StackFrame): Don't implement IDisposable.
	(StackFrame.FrameInvalidEvent): Removed.
	(ObjectInvalidHandler): Removed.

	* classes/Backtrace.cs (Backtrace): Don't implement IDisposable.
	(Backtrace.BacktraceInvalidEvent): Removed.

2005-10-16  Martin Baulig  <martin@ximian.com>

	Added the `return' command to make the current stack frame return.

	* wrapper/mono-debugger-jit-wrapper.h
	(MonoDebuggerInfo): Added `run_finally'.

	* backends/server/server.c
	(mono_debugger_server_call_method_2): New public method; invoke a
	function which takes a `MonoContext *' (private mini data structure)
	argument; we use this to call mono_debugger_run_finally().

	* backends/SingleSteppingEngine.cs
	(OperationReturn): New operation; run the current frame's
	`finally' handlers.
	(SingleSteppingEngine.Return): New public method; make the current
	stack frame return.

	* frontend/Command.cs (ReturnCommand): Added a `return' command to
	make the current stack frame return.

2005-10-14  Martin Baulig  <martin@ximian.com>

	Only use a single AddressDomain per process.

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryInfo.GlobalAddressDomain): Removed; use
	`AddressDomain' instead.
	(ITargetMemoryAccess.ReadGlobalAddress): Removed; use
	`ReadAddress' instead.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (SimpleStackFrame): Removed.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* arch/Architecture.cs: The stack unwinding methods now operate on
	`StackFrame's instead of `SimpleStackFrame's.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs
	(StackFrame.SourceAddress): Create this lazily.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* classes/SymbolTableManager.cs
	(SymbolTableManager.SymbolTable): Removed.
	(SymbolTableManager): Make some API entry points `internal'.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* interfaces/ISymbolTable.cs (ISimpleSymbolTable): Removed.

	* arch/Disassembler.cs (Disassembler.SymbolTable): Removed.

	* classes/SimpleSymbolTableCollection.cs: Removed.

	* classes/Module.cs (Module.SimpleSymbolTable): Removed.
	(Module.SimpleLookup): New public abstract method.

	* classes/SymbolTableManager.cs
	(SymbolTableManager.Lookup): New public method.
	(SymbolTableManager.SimpleLookup): New public method.
	(SymbolTableManager.SimpleSymbolTable): Removed.

	* backends/Process.cs
	(Process.SimpleLookup): Made this public.
	(Process.Lookup): New public method.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* arch/Disassembler.cs
	(Disassembler): New internal abstract class; replaces the
	`IDisassembler' interface.

	* interfaces/IDisassembler.cs: Removed.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs
	(SimpleStackFrame): Make this `internal', not `public'.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* classes/MethodBase.cs: Renamed to Method.cs.
	(MethodBase): Renamed to `Method'.

	* classes/Method.cs (Method): This abstract base class now
	replaces the `IMethod' interface.

	* interfaces/IMethod.cs: Removed.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* interfaces/IArchitecture.cs (IArchitecture): Replaced this
	interfaces with the abstract class `Architecture'.

	* arch/Architecture.cs (Architecture): New public abstract class;
	replaces the `IArchitecture' interface.  Make a few API entry
	points `internal' instead of `public'.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* arch/Architecture_PowerPC.cs: Removed.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* arch/*.cs: Removed the `Mono.Debugger.Architecture' namespace;
	use `Mono.Debugger.Backends' instead.

2005-10-11  Martin Baulig  <martin@ximian.com>

	* interfaces/IArchitecture.cs
	(IArchitecture.TrySpecialUnwind): New method.

	* arch/Architecture_X86_64.cs
	(Architecture_X86_64.TrySpecialUnwind): Support sigreturn trampolines.	

2005-10-10  Martin Baulig  <martin@ximian.com>

	* backends/server/x86_64-arch.c
	(x86_arch_child_stopped): Send a `CHILD_HIT_BREAKPOINT' event if
	we completed a debugging runtime-invoke.

	* backends/server/i386-arch.c (x86_arch_child_stopped): Likewise.

	* backends/MonoThreadManager.cs
	(MonoThreadManager.thread_abort): Don't kill the thread.

	* frontend/Expression.cs
	(RegisterExpression): Derive from PointerExpression.

2005-10-08  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationRuntimeInvoke): If we're invoking a method from
	System.Object or System.ValueType on a valuetype instance, we need
	to box it.

2005-10-07  Martin Baulig  <martin@ximian.com>

	* languages/TargetClassType.cs
	(TargetClassType.GetStaticField): Take a `TargetFieldInfo' instead
	of an `int'.
	(TargetClassType.SetStaticField): Likewise.

	* languages/TargetClassObject.cs
	(TargetClassObject.GetField): Take a `TargetFieldInfo' instead of
	an `int'.
	(TargetClassObject.SetField): Likewise.

2005-10-07  Martin Baulig  <martin@ximian.com>

	* test/TestToString.cs: New test.
	* test/mono-debugger.test/TestToString.exp: New test.

2005-10-07  Martin Baulig  <martin@ximian.com>

	* languages/TargetObject.cs
	(TargetObject.HasAddress): Moved here from TargetPointerObject.
	(TargetObject.Address): Likewise.

2005-10-07  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs
	(Command.PrintCommand.format): Default to `DisplayFormat.Object'.

	* languages/Language.cs (Language.ObjectType): New property.

	* backends/SingleSteppingEngine.cs
	(OperationRuntimeInvoke): Don't call the `GetVirtualMethodFunc' if
	our instance is a valuetype.

2005-10-05  Martin Baulig  <martin@ximian.com>

	* frontend/ScriptingContext.cs
	(ScriptingContext.PrintObject): Try calling a MonoObject's
	"ToString()" method for `DisplayFormat.Object'.

2005-10-05  Martin Baulig  <martin@ximian.com>

	* classes/Style.cs (DisplayFormat): New public enum.
	(Style.FormatObject): Added `DisplayFormat format' argument.

2005-09-29  Martin Baulig  <martin@ximian.com>

	* languages/TargetEnumType.cs (TargetEnumType.GetMember): Removed.

	* languages/Language.cs
	(Language.CreateInstance): Removed the overloaded version taking a
	`StackFrame' and an `object'; the other one is now taking a
	`TargetAccess' and an `object'.

	* languages/mono/MonoEnumTypeInfo.cs: Removed.

	* languages/mono/MonoEnumType.cs: This is now working again.
	* languages/mono/MonoEnumObject.cs: This is now working again.

2005-09-29  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoClassType.cs
	(MonoClassType.ResolveClass): Resolve our parent first.

2005-09-28  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(Expression.ResolveMethod): New method.
	(MemberAccessExpression.ResolveMemberAccess): Allow accessing an
	instance member in static context if we're doing a method lookup.

	* frontend/Command.cs (SourceCommand.EvaluateMethod): use
	`expr.ResolveMethod ()' instead of `expr.Resolve ()'.

	* tests/mono-debugger.tests/TestBreakpoint.exp: Added test case
	for inserting a breakpoint on an instance method.

2005-09-28  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoPointerType.cs: New file.
	* languages/mono/MonoPointerObject.cs: New file.

	* languages/mono/MonoDebuggerSupport.cs
	(MonoDebuggerSupport.GetTypeFromSignature): Added support for
	`MONO_TYPE_PTR' and `MONO_TYPE_BYREF'.

	* languages/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.LookupMonoType): Create a `MonoPointerType'
	for `byref' types.

2005-09-28  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationRuntimeInvoke.DoProcessEvent): Stop if we're in debug
	mode.	

2005-09-28  Martin Baulig  <martin@ximian.com>

	* tests/TestInheritance.cs: Added tests for abstract classes.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* backends/TargetAccess.cs
	(TargetAccess.RuntimeInvoke): Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs
	(ThreadManager): Made this `internal'.
	(ThreadEventHandler): Moved to Debugger.cs and renamed to
	`DebuggerEventHandler'.
	(ThreadManager): Moved the `InitializedEvent',
	`MainThreadCreatedEvent', `ThreadCreatedEvent',
	`ThreadExitedEvent', `TargetExitedEvent' and `TargetEvent' into
	the `Debugger' class.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs
	(DebuggerBackend): Renamed to `Debugger'.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* languages/TargetClassObject.cs
	(TargetClassObject.Parent): Replaced the property with a
	`GetParentObject()' method.

	* languages/TargetObject.cs
	(TargetObject.GetDynamicSize): Added `TargetAccess' argument.

	* backends/classes/TargetLocation.cs
	(TargetLocation.TargetAccess): Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* languages/TargetClassObject.cs
	(TargetClassObject.GetField): Added `TargetAccess' argument.
	(TargetClassObject.SetField): Likewise.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* languages/TargetPointerObject.cs
	(TargetPointerObject.CurrentType): Replaced the property with a
	`GetCurrentType()' method.
	(TargetPointerObject.DereferencedObject): Replaced the property
	with a `GetDereferencedObject()' method.
	(TargetPointerObject.DereferencedContents): Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* backends/ptrace/PTrace.cs: Removed.
	(PTraceInferior): Merged with `Inferior'.

	* backends/Inferior.cs
	(Inferior): Don't make this abstract.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetAccess.cs: Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguage.cs: Removed.

	* languages/Language.cs: New file.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* interfaces/TargetObjectKind.cs: Moved to
	languages/TargetObjectKind.	

2005-09-25  Martin Baulig  <martin@ximian.com>

	* interfaces/IVariable.cs: Removed.

	* languages/TargetVariable.cs: New file.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetType.cs: Removed.

	* interfaces/ITargetObject.cs: Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetTypeAlias.cs: Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* languages/TargetClassType.cs: New file.
	* languages/TargetClassObject.cs: New file.

	* interfaces/ITargetStructType.cs: Removed.
	* interfaces/ITargetStructObject.cs: Removed.
	* interfaces/ITargetClassType.cs: Removed.
	* interfaces/ITargetClassObject.cs: Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* languages/TargetEnumType.cs: New file.
	* languages/TargetEnumObject.cs: New file.

	* interfaces/ITargetEnumType.cs: Removed.
	* interfaces/ITargetEnumObject.cs: Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* langauges/TargetMember.cs: New file.
	(TargetMemberInfo): New public abstract class.
	(TargetFieldInfo): New public abstract class.
	(TargetPropertyInfo): New public abstract class.
	(TargetEventInfo): New public abstract class.
	(TargetMethodInfo): New public abstract class.

	* interfaces/ITargetStructType.cs
	(ITargetStructType.ITargetMemberInfo): Removed.
	(ITargetStructType.ITargetFieldInfo): Removed.
	(ITargetStructType.ITargetPropertyInfo): Removed.
	(ITargetStructType.ITargetEventInfo): Removed.
	(ITargetStructType.ITargetMethodInfo): Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* languages/TargetPointerType.cs: New file.
	* languages/TargetPointerObject.cs: New file.

	* interfaces/ITargetPointerType.cs: Removed.
	* interfaces/ITargetPointerObject.cs: Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFundamentalType.cs: Removed.
	* interfaces/ITargetFundamentalObject.cs: Removed.
	* interfaces/ITargetFunctionType.cs: Removed.
	* interfaces/ITargetArrayType.cs: Removed.
	* interfaces/ITargetArrayObject.cs: Removed.

2005-09-25  Martin Baulig  <martin@ximian.com>

	* languages/TargetArrayType.cs: New file.
	* languages/TargetArrayObject.cs: New file.

2005-09-24  Martin Baulig  <martin@ximian.com>

	* languages/TargetType.cs (TargetType): Made this public.

	* languages/TargetObject.cs (TargetObject): Made this public.
	(TargetObject.Location): Replaced the `location' field and the
	`Location' property with an `internal readonly' field `Location'.
	(TargetObject.GetDynamicSize): Made this `internal', not
	`protected'.	

	* languages/TargetFundamentalObject.cs
	(TargetFundamentalObject): Made this public.

	* languages/TargetFundamentalType.cs
	(TargetFundamentalType): Made this public.

	* languages/TargetFunctionType.cs
	(TargetFunctionType): Made this public.

2005-09-24  Martin Baulig  <martin@ximian.com>

	* backends/classes/TargetLocation.cs
	(TargetLocation.StackFrame): Removed.

	* backends/classes/MonoVariableLocation.cs
	(MonoVariableLocation..ctor): Take an `ITargeAccess' and a
	`Register' argument instead of a `StackFrame'.

2005-09-24  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFundamentalObject.cs
	(ITargetFundamentalObject.SetObject): Added `ITargetAccess' arg.

2005-09-24  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetPointerObject.cs
	(ITargetPointerObject.GetArrayElement): Added `ITargetAccess' arg.

	* backends/classes/TargetLocation.cs
	(TargetLocation.GetLocationAtOffset): Removed the `bool
	dereference' argument.
	(TargetLocation.GetDereferencedLocation): New method.
	
2005-09-24  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetArrayObject.cs
	(ITargetArrayObject.this): Replaced the indexer with a
	`GetElement()' and a `SetElement()' method; both taking an
	`ITargetAccess' argument.

2005-09-24  Martin Baulig  <martin@ximian.com>

	* interfaces/IVariable.cs (IVariable.IsValid): Removed.

	* languages/TargetType.cs (TargetType.GetObject): Made this
	`internal', not `public'.

2005-09-24  Martin Baulig  <martin@ximian.com>

	* languages/TargetFunctionType.cs: New file.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* languages/native/NativeFundamentalType.cs: Removed; use
	`TargetFundamentalType' instead.

	* languages/native/NativeFundamentalObject.cs: Removed; use
	`TargetFundamentalObject' instead.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoFundamentalType.cs: Moved to
	languages/TargetFundamentalType.cs
	(MonoFundamentalType): Renamed to `TargetFundamentalType'.

	* languages/mono/MonoFundamentalObject.cs: Moved to
	languages/TargetFundamentalObject.cs
	(MonoFundamentalObject): Renamed to `TargetFundamentalObject'.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoFundamentalObjectBase.cs
	(MonoFundamentalObjectBase): Merged into `MonoFundamentalObject'.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* languages/native/NativeType.cs: Removed; use `TargetType' instead.

	* languages/native/NativeObject.cs: Removed; use `TargetObject' instead.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* arch/StabsReader.cs: Removed for the moment until someone fully
	implements PowerPC support.

	* arch/Bfd.cs: Disabled PowerPC support.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* languages/mono/MonoType.cs: Moved to languages/TargetType.cs.
	(MonoType): Renamed to `TargetType'.

	* languages/mono/MonoObject.cs: Moved to languages/TargetObject.cs.
	(MonoObject): Renamed to `TargetObject'.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* languages/: New directory.

	* backends/mono/: Moved to languages/mono/.
	* backends/native/: Moved to languages/native/.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoFundamentalType.cs
	(MonoFundamentalType.ctor): Just take an `ILanguage' instead of a
	`MonoSymbolFile'; removed the `klass_address' argument.

	* backends/mono/MonoObjectType.cs
	(MonoObjectType.ctor): Removed the `klass_address' argument.

	* backends/mono/MonoStringType.cs
	(MonoStringtype.ctor): Removed the `klass_address' argument.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguage.cs
	(ILanguage.TargetInfo): New property.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguage.cs
	(ILanguage.AllocateMemory): New method.

	* backends/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.DataHeap): removed; use AllocateMemory()
	instead.	

2005-09-23  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetType.cs (ITargetType.IsByRef): New property.

	* backends/mono/MonoObject.cs
	(MonoObject.Type): Return an `ITargetType' instead of a
	`MonoType'.

	* backends/mono/MonoType.cs
	(MonoType.File): Removed.
	(MonoType..ctor): Take an `ILanguage' instead of a
	`MonoSymbolFile'.	

2005-09-23  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFundamentalObject.cs
	(ITargetFundamentalObject.HasObject): Removed.
	(ITargetFundamentalObject.Object): Replaced the property with a
	`GetObject (ITargetAccess target)' method.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetObject.cs
	(ITargetObject.IsValid): Removed.
	(ITargetObject.RawContents): Removed.
	(ITargetObject.DynamicSize): Removed.
	(ITargetObject.GetRawDynamicContents): Removed.
	(ITargetObject.Print): Take an `ITargetAccess' argument.

2005-09-23  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationRun): Derive from `Opeartion', not `OperationStepBase'.
	(OperationCompileMethod): Killed the nested operation.
	(OperationRuntimeInvoke.DoProcessEvent): Step over breakpoints
	during runtime-invoke.

	* test/mono-debugger.tests/TestBreakpoint.exp: Added test case: we
	step over breakpoints during runtime-invoke.

2005-09-22  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetStructType.cs
	(ITargetStructType.SetStaticField): New method.

	* interfaces/ITargetStructObject.cs
	(ITargetStructObject.SetField): New method.

	* frontend/Expression.cs (MemberExpression): New abstract class.
	(MethodGroupExpression): Derive from MemberExpression.
	(StructAccessExpression): Derive from MemberExpression.
	(StructAccessExpression.FindMember): Big cleanup; take
	`bool search_instance' and a `bool search_static' args, save the
	`ITargetStructObject instance' as `MemberExpression.InstanceObject'.

2005-09-22  Martin Baulig  <martin@ximian.com>

	* backends/remoting/DebuggerServer.cs: Big big FIXME; set the
	lease timeout to 3 hours to prevent the debugger from dying.

2005-09-22  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationCallback): New operation; this replaces the old
	`Callback' mechanism.
	(Callback): Removed.
	(SingleSteppingEngine.ProcessChildEvent): Correctly emit the
	`TargetEventType.TargetHitBreakpoint' event when hitting a
	breakpoint instead of just `TargetEventType.TargetStopped'.
	(OperationStepOverBreakpoint): Improved and fixed a couple of
	problems.

	* test/mono-debugger.tests/*.exp: Reflect latest
	TargetHitBreakpoint changes.

	* test/mono-debugger.tests/TestBreakpoint.exp: Added some more
	test cases for stepping over breakpoints.

2005-09-21  Martin Baulig  <martin@ximian.com>

	* test/TestBreakpoint.cs: New test.
	* test/mono-debugger.tests/TestBreakpoint.exp: New test.

2005-09-21  Martin Baulig  <martin@ximian.com>

	* test/TestProperty.cs: New test.
	* test/mono-debugger.tests/TestProperty.exp: New test.

2005-09-20  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetStructType.cs
	(ITargetStructType.ResolveClass): New method.

	* interfaces/ITargetFunctionType.cs
	(ITargetFunctionType.DeclaringType): New property.

	* backends/mono/MonoLanguageBackend.cs
	(MonoDebuggerInfo.LookupClass): New field.
	(MonoLanguageBackend.LookupClass): New method.

	* wrapper/mono-debugger-jit-wrapper.h
	(MonoDebuggerInfo): Added `lookup_class'.

	* backends/mono/MonoClassType.cs
	(MonoClassType.ResolveClass): If we don't already have a
	`type_info', create it via MonoLanguageBackend.LookupClass();
	this'll effectively call `mono_class_get (image, token)' in the
	target and use the returned `MonoClass *' address.

	* frontend/ScriptingContext.cs (ProcessHandle.RuntimeInvoke): Call
	`func.DeclaringType.ResolveClass (process.TargetAccess)'.

2005-09-20  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoEnumType.cs: Unused; disable for the moment.
	* backends/mono/MonoEnumTypeInfo.cs: Likewise.
	* backends/mono/MonoEnumObject.cs: Likewise.

	* backends/mono/MonoTypeInfo.cs: Removed.

	* backends/mono/MonoType.cs
	(MonoType.GetTypeInfo): Removed.
	(MonoType.DoGetTypeInfo): Removed.
	(MonoType.Size): Made this abstract.
	(MonoType.GetObject): New public abstract method.

	* backends/mono/MonoClassInfo.cs
	(MonoClassInfo): Killed the `MonoTypeInfo' base classs; derive
	directly from `MarshalByRefObject'.

	* backends/mono/MonoObject.cs
	(MonoObject): `IMonoTypeInfo' is gone; use the `MonoType' directly.

2005-09-20  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoLanguageBackend.cs
	(MonoBuiltinTypeInfo): Added some fields.

	* backends/mono/MonoArrayTypeInfo.cs: Removed.

	* backends/mono/MonoArrayType.cs
	(MonoArrayType): Implement IMonoTypeInfo.

	* backends/mono/MonoClassType.cs
	(MonoClassType.ReadMonoClass): New public static method; reads a
	`MonoClass' from the target address space and creates a `MonoType'
	for it.

2005-09-19  Martin Baulig  <martin@ximian.com>

	* interfaces/IArchitecture.cs
	(IArchitecture.DwarfFrameRegisterMap): New property.

	* arch/DwarfFrameReader.cs: Make this portable and actually work.

	* arch/bfdglue.c (bfd_glue_get_symbol): Don't return weak symbols.

	* backends/Debugger.cs
	(DebuggerBackend.UpdateSymbolTable): Added `ITargetMemoryAccess'
	argument; call `MonoLanguage.Update (target)' if it's not null.

2005-09-15  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.TryFindImage): Don't use reflection here.

2005-09-15  Martin Baulig  <martin@ximian.com>

	* classes/MonoDebuggerSupport.cs
	(MonoDebuggerSupport): Removed the old reflection-based delegates.

2005-09-15  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs
	(ProcessStart.IsMonoAssembly): New protected method; does a
	quick check whether something is an assembly or not.
	(ProcessStart..ctor): Don't try to load the assembly; use
	IsMonoAssembly() instead.

2005-09-15  Martin Baulig  <martin@ximian.com>

	* cecil/: When compiling from SVN, you must checkout cecil here to
	make things work.

	* wrapper/Makefile.am: Build `Mono.Debugger.Cecil.dll' and install
	it in the GAC.

2005-09-15  Martin Baulig  <martin@ximian.com>

	The big Cecil port :-)

	* backends/mono/MonoDebuggerSupport.cs: New file.
	(MonoDebuggerSupport): Moved here from MonoLanguageBackend.cs.
	(MonoDebuggerSupport.GetLocalTypeFromSignature): New method.

	* backends/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.LookupMonoType): Take a
	`Cecil.ITypeReference' instead of a `Type.
	(MonoLanguageBackend.GetFundamentalType): New method.

	* backends/mono/MonoSymbolFile.cs
	(MonoSymbolFile.LookupMonoType): Take a `Cecil.ITypeReference'
	instead of a `Type'.
	(MonoSymbolFile.AddCoreType): Take a `Cecil.ITypeDefinition'
	instead of a `MonoType'.
	(MonoSymbolFile.AddType): Take a `MonoClassType' instead of a
	`MonoType'.
	(MonoSymbolFile.GetTypeInfo): Take a `Cecil.ITypeDefinition'
	instead of a `MonoType'.

	* backends/mono/MonoClassType.cs
	(MonoClassType.Type): New public property.

	* backends/mono/MonoType.cs
	(MonoType.Type): Removed; the .ctor also doesn't take a `type'
	argument anymore.
	(MonoType.Name): Made this abstract.
	(MonoType.DoGetTypeInfo): Removed the `TargetBinaryReader' arg.

2005-09-14  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(StructAccessExpression.FindMember): Improved this; also search
	for fields in the base class; don't allow accessing static members
	through an instance.

2005-09-14  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFunctionType.cs
	(ITargetFunctionType.Invoke): Removed.

	* interfaces/ITargetStructType.cs
	(ITargetStructType.GetStaticProperty): Removed.

	* interfaces/ITargetStructObject.cs
	(ITargetStructObject.GetProperty): Removed.

2005-09-14  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoSymbolFile.cs
	(MonoSymbolFile.MonoMethod.get_variables): Use the
	`C.LocalVariableEntry's index to point into the MethodAddress.

2005-09-14  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(ArrayAccessExpression.DoEvaluateVariable, DoAssign): Add support
	for indexers.

	* test/TestIndexer.cs: New test.
	* test/mono-debugger.tests/TestIndexer.exp: New test.

2005-09-14  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(ArrayAccessExpression.GetIntIndex): Allow variables as indices.

2005-09-14  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs (Command.NeedsProcess): Removed.
	(Command.Execute): Protect the whole method in a try...catch
	block; handle ScriptingException' separately.

	* frontend/Interpreter.cs (Interpreter.CurrentProcess): Removed.

	* frontend/ScriptingContext.cs (ScriptingContext.CurrentProcess):
	Check whether the process is still alive.

	* backends/ThreadManager.cs (ThreadManager): Don't block on Kill().

2005-09-13  Martin Baulig  <martin@ximian.com>

	Reworked the ThreadManager's event queue to make it more robust
	and catch deadlocks.

	* interfaces/ITargetAccess.cs (ITargetAccess): Splitted this out
	from ITargetMemoryAccess.cs.

	* classes/TargetEvent.cs
	(TargetEventHandler): Added `ITargetAccess' argument; use this to
	access the target inside the event handler.

	* backends/Process.cs (Process.TargetEvent): Removed.

	* backends/ThreadManager.cs
	(ThreadManager.TargetEvent): Moved the event here from `Process'.
	(ThreadManager): Reworked the event queue to make it more robust
	and catch deadlocks.

	* backends/mono/MonoObjectObject.cs
	(MonoObjectObject.GetCurrentType): Don't catch exceptions here.

	* frontend/Interpreter.cs
	(Interpreter.ProcessEventSink): New protected [Serializable]
	class; handle the `ThreadManager.TargetEvent' here.

	* frontend/ScriptingContext.cs
	(FrameHandle.TargetEvent): Moved all the frame-related stuff here
	from the `ProcessHandle'.
	(ProcessHandle): Moved all the frame-related stuff to the
	`FrameHandle'.	

2005-09-10  Martin Baulig  <martin@ximian.com>

	* classes/SourceLocation.cs
	(SourceLocation.InsertBreakpoint): Removed; use
	DebuggerBackend.InsertBreakpoint() instead.

	* classes/EventHandle.cs: New file.

	* classes/BreakpointHandle.cs
	(BreakpointHandle): Derive from EventHandle.

	* backends/Debugger.cs
	(DebuggerBackend.InsertBreakpoint): New public method
	(DebuggerBackend.InsertBreakpoint): Added overloaded version which
	takes an `ITargetFunctionType' instead of a `SourceLocation'.

	* backends/Process.cs
	(Process.InsertBreakpoint): Added overloaded version which takes
	an `ITargetFunctionType'.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.ProcessChildEvent): Also do the normal
	frame_changed() stuff if we hit a breakpoint.
	(SingleSteppingEngine.InsertBreakpoint): Added overloaded version
	which takes an `ITargetFunctionType'.

	* frontend/Expression.cs (LocationType): Added `DelegateInvoke'.
	(Expression.EvaluateMethod): New abstract method.
	(StructAccessExpression.DoEvaluateMethod): Added delegate support.

	* frontend/Command.cs (BreakCommand): Started to cleanup the mess
	here; use Expression.EvaluateMethod() when evaluating expressions.

	* tests/mono-debugger.tests/TestDelegate.exp: Added test case to
	set a breakpoint on an event invocation.

2005-09-09  Martin Baulig  <martin@ximian.com>

	* frontend/Command.cs (BreakCommand): Don't silently fail if we
	cannot find the method.

2005-09-09  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationWrapper.DoProcessEvent): Step into non-trampoline
	method calls.

	* tests/mono-debugger.tests/TestDelegate.exp: Added test case for
	that.

2005-09-09  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguage.cs
	(ILanguage.DelegateType): New property.
	(ILanguage.ExceptionType): Changed type from `ITargetType' to
	`ITargetClassType'.

	* interfaces/ITargetType.cs
	(ITargetType.Language): New property.

	* frontend/Expression.cs
	(CastExpression.TryCast): Make this static method public.
	(InvocationExpression.ResolveDelegate): New protected method.
	(InvocationExpression.DoResolve): If the `method_expr' did not
	resolve to a `MethodGroupExpression', call ResolveDelegate() and
	try to resolve it as a delegate.

	* tests/mono-debugger.tests/TestDelegate.exp: Added tests for
	event invocations.

2005-09-09  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetStructObject.cs
	(ITargetFunctionObject.GetEvent): Removed.

2005-09-09  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFunctionObject.cs: Removed.

2005-09-09  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetStructObject.cs
	(ITargetStructObject.GetMethod): Removed.

	* interfaces/ITargetStructType.cs
	(ITargetStructType.GetMethod): Removed.
	(ITargetStructType.GetStaticMethod): Removed.
	(ITargetStructType.GetConstructor): Removed.
	(ITargetStructType.GetStaticConstructor): Removed.
	(ITargetStructType.Invoke): New method.

	* interfaces/ITargetMemoryAccess.cs
	(ITargetAccess.RuntimeInvoke): Take an `ITargetFunctionType'
	instead of an `ITargetFunctionObject'.

	* backends/Process.cs (Process.RuntimeInvoke): Take an
	`ITargetFunctionType' instead of an `ITargetFunctionObject'.

	* frontend/Expression.cs
	(MethodGroupExpression.OverloadResolve): Return an
	`ITargetFunctionType' instead of an `ITargetMethodInfo'.

2005-09-08  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.c (server_ptrace_get_target_info):
	Make `target_long_size' 4 bytes, not 8.

	* backends/classes/TargetReader.cs
	(TargetReader.ReadLongInteger): Read either 4 or 8 bytes,
	depending on the `TargetLongIntegerSize'.

2005-09-08  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (StackFrame): Make this a
	MarshalByRefObject; this is required if we want to modify
	registers.

	* tests/mono-debugger.tests/TestManagedType.exp, TestNull.exp:
	Added tests to modify variables.

2005-09-08  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetObject.cs
	(ITargetObject.IsNull): New property.

	* interfaces/ILanguage.cs
	(ILanguage.CreateNullObject): New method.

	* backends/mono/MonoNullObject.cs: New file.

	* backends/mono/MonoVariable.cs (MonoVariable.GetObject): Return a
	`MonoNullObject' if the location is null.

	* frontend/CSharpExpressionParser.jay (constant): Added `NULL'.

	* frontend/Expression.cs (NullExpression): New expression.

	* test/TestNull.cs, test/mono-debugger.test/TestNull.exp: Added
	tests for `null' handling.

2005-09-08  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetArrayObject.cs (ITargetArrayObject.this): Take
	an `int[] indices' arguments (not a `params' one) and added setter.

	* backends/mono/MonoType.cs (MonoType.SetObject): New method.

	* frontend/Expression.cs (ArrayAccessExpression.DoAssign): Support
	modifying multi-dimensional arrays.

	* tests/mono-debugger.test/TestManagedTypes.exp: Added a bunch of
	array modification tests.	

2005-09-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetArrayType.cs
	(ITargetArrayType.Rank): New property.
	(ITargetArrayType.ElementType): Do the right thing here.

	* interfaces/ITargetArrayObject.cs
	(ITargetArrayObject.LowerBound): Renamed to GetLowerBound(); now
	takes a dimension argument.
	(ITargetArrayObject.UpperBound): Renamed to GetUpperBound(); now
	takes a dimension argument.
	(ITargetArrayObject.this): Take a `params int[] indices'.

	* frontend/Expression.cs
	(ArrayAccessExpression.DoEvaluateVariable): Use C# syntax and
	behavior to access multi-dimensial arrays.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetStructType.cs
	(ITargetStructType.PrintObject): Removed.
	
2005-09-07  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.throw_exception): Always ignore the
	exception if we're in an OperationRuntimeInvoke.

	* backends/server/x86_64-arch.cs (x86_arch_child_stopped): On
	runtime invoke, we must read the exception object from the
	exception address.

	* tests/mono-debugger.tests/TestException.exp: Added testcase.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.ProcessChildEvent): Handle exceptions first.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFunctionObject.cs
	(ITargetFunctionObject.Invoke): Removed the `bool debug' argument.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetAccess.RuntimeInvoke): Take an `ITargetFunctionObject'
	instead of a `TargetAddress'.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFunctionObject.cs
	(ITargetFunctionObject.Invoke): Added `ITargetAccess target' and
	`ITargetObject instance' arguments.

	* interfaces/ITargetStructType.cs
	(ITargetStructType.GetStaticProperty): Take an `ITargetAccess',
	not a `StackFrame'.
	(ITargetStructType.GetStaticConstructor): Likewise.
	(ITargetStructType.GetStaticMethod): Likewise.
	(ITargetStructType.GetMethod): New method.
	(ITargetStructType.GetConstructor): New method.

	* interfaces/ITargetFunctionType.cs
	(ITargetFunctionType.InvokeStatic): Removed.

	* interfaces/ITargetMemoryAccess.cs
	(ITargetAccess.RuntimeInvoke): New method.

	* backends/Inferior.cs (Inferior.RuntimeInvoke): Take
	`MonoObject's as arguments instead of `TargetAddress'es and
	marshal the objects here.

	* backends/server/library.c
	(mono_debugger_server_call_method_invoke): Copy valuetype
	arguments on the stack instead of using the heap hack.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetType.cs (ITargetType.GetTypeInfo): Removed.

	* interfaces/ITargetTypeInfo.cs: Removed.
	(ITargetTypeInfo): This is now an internal implementation detail
	and not exposed to the client.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetObject.cs (ITargetObject.TypeInfo): Removed.
	(ITargetObject.Type): New property.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetType.cs
	(ITargetType.Size): New property; moved here from ITargetTypeInfo.
	(ITargetType.HasFixedSize): Likewise.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoFunctionType.cs (MonoFunctionType):
	Implement IMonoTypeInfo and merged with MonoFunctionTypeInfo.

	* backends/mono/MonoFunctionTypeInfo.cs: Removed.

2005-09-07  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoFundamentalType.cs (MonoFundamentalType):
	Implement IMonoTypeInfo and merged with MonoFundamentalTypeInfo.

	* backends/mono/MonoStringType.cs (MonoStringType):
	Implement IMonoTypeInfo and merged with MonoStringTypeInfo.

	* backends/mono/MonoObjectType.cs (MonoObjectType):
	Implement IMonoTypeInfo and merged with MonoObjectTypeInfo.

	* backends/mono/MonoFundamentalTypeInfo.cs: Removed.
	* backends/mono/MonoStringTypeInfo.cs: Removed.
	* backends/mono/MonoObjectTypeInfo.cs: Removed.

2005-09-06  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoTypeInfo.cs
	(IMonoTypeInfo): New internal interface.
	(MonoTypeInfo): Implement IMonoTypeInfo.

	* backends/mono/: Use `IMonoTypeInfo' instead of `MonoTypeInfo'
	everywhere.

2005-09-06  Martin Baulig  <martin@ximian.com>

	* classes/TargetLocation.cs: Moved to backends/classes/.
	* classes/AbsoluteTargetLocation.cs: Moved to backends/classes/.
	* classes/RelativeTargetLocation.cs: Moved to backends/classes/.

2005-09-06  Martin Baulig  <martin@ximian.com>

	* classes/TargetLocation.cs (TargetLocation): Make this internal
	and don't mark it as [Serializable].

	* interfaces/ITargetObject.cs (ITargetObject.Location): Removed.

	* interfaces/IVariable.cs (IVariable.GetLocation): Removed.

	* interfaces/ITargetTypeInfo.cs
	(ITargetTypeInfo.GetObject): Removed.

	* frontend/Expression.cs
	(PointerExpression.EvaluateAddress): Return a `TargetAddress'
	instead of a `TargetLocation'.
	(VariableAccessExpression): Derive from Expression, not
	PointerExpression.
	(RegisterExpression): Likewise.

2005-09-06  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFundamentalType.cs
	(FundamentalKind): New public enum.
	(ITargetFundamentalType.Type): Removed.
	(ITargetFundamentalType.FundamentalKind): New property.

2005-09-05  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoMember.cs (MonoMember.Position): Removed.

	* backends/mono/MonoLanguageBackend.cs
	(MonoDebuggerSupport.GetMethodIndex): Removed.

2005-09-05  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoLanguageBackend.cs
	(MonoDebuggerSupport): Moved here from the symbol writer.

2005-09-05  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetType.cs (ITargetType.TypeHandle): Removed.

2005-09-02  Martin Baulig  <martin@ximian.com>

	* classes/TargetLocation.cs (TargetLocation.IsValid): Removed.

2005-09-02  Martin Baulig  <martin@ximian.com>

	* classes/TargetLocation.cs
	(TargetLocation): Don't implement ICloneable.
	(TargetLocation.Clone): Removed.

2005-09-02  Martin Baulig  <martin@ximian.com>

	* classes/TargetLocation.cs
	(TargetLocation): Removed the `offset' - we're now using the
	RelativeTargetLocation for this.
	(TargetLocation.ctor): Don't take an `offset' argument anymore.
	(TargetLocation.Clone): Likewise.

	* classes/RelativeTargetLocation.cs (RelativeTargetLocation): This
	is now a location with an offset.

2005-09-02  Martin Baulig  <martin@ximian.com>

	Use a `TargetBlob' instead of an `ITargetMemoryReader' wherever
	possible to save serialization costs; this reduces the time to run
	the test suite from 35s to 17s!.	

	* interfaces/ITargetMemoryAccess.cs
	(ITargetAccess.TargetInfo): New property.
	(ITargetMemoryAccess.ReadMemory): Return a `TargetBlob' instead of
	an `ITargetMemoryReader'.

	* classes/TargetBinaryAccess.cs
	(TargetBlob.GetReader): New public method; returns a
	TargetBinaryReader to read this blob.

	* classes/TargetLocation.cs (TargetLocation.ReadMemory): Return a
	`TargetBlob' instead of an `ITargetMemoryReader'.

	* backends/mono/MonoObject.cs (MonoObject.GetDynamicContents):
	Return a `TargetBlob' instead of an `ITargetMemoryReader'.
	(MonoObject.GetDynamicSize): Take a `TargetBlob' instead of an
	`ITargetMemoryReader'.	

	* backends/mono/MonoFundamentalObjectBase.cs
	(MonoFundamentalObjectBase.GetObject): Take a `TargetBlob' instead
	of an `ITargetMemoryReader'.

	* backends/native/NativeObject.cs (NativeObject.GetDynamicContents):
	Return a `TargetBlob' instead of an `ITargetMemoryReader'.
	(NativeObject.GetDynamicSize): Take a `TargetBlob' instead of an
	`ITargetMemoryReader'.	

	* backends/native/NativeFundamentalObject.cs
	(NativeFundamentalObject.GetObject): Take a `TargetBlob' instead
	of an `ITargetMemoryReader'.

2005-09-02  Martin Baulig  <martin@ximian.com>

	* classes/TargetBinaryAccess.cs
	(TargetBlob.TargetInfo): New readonly field; the .ctor now also
	takes in ITargetInfo argument.

	* backends/TargetAccess.cs
	(TargetAccess.TargetInfo): New public property; returns an
	ITargetInfo instead of an ITargetMemoryInfo - use this if you
	don't need the extra data from the ITargetMemoryInfo to save
	serialization costs.

2005-08-31  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(CommandResult): New internal class
	(CallMethodData, RuntimeInvokeData): Removed.

	* interfaces/ITargetMemoryAccess.cs
	(TargetAccessDelegate): New public delegate.
	(ITargetAccess.Invoke): New method.

2005-08-31  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.init_trampolines): Add support for delegate
	trampolines.	

2005-08-31  Martin Baulig  <martin@ximian.com>

	* classes/Style.cs: Moved some of frontend/Style.cs here.
	(Style): This is now an abstract [Serializable] class and not an
	interface.  It allows us to do some things in the server's
	background thread instead of in the client to avoid unneccessary
	remoting round-trips.

	* frontend/Style.cs
	(StyleBase): New abstract base class for all the user styles.

	* interfaces/IMethod.cs (IMethod.GetVariableByName): New method.

	* interfaces/ITargetObject.cs: Added some properties from
	ITargetType to avoid unneccessary remoting round-trips.
	(ITargetObject.TypeName): New property.
	(ITargetObject.Kind): New property.

	* interfaces/ILanguage.cs (ILanguage.CreateInstance): Added
	overloaded version which takes an `ITargetAccess'.

	* interfaces/ITargetMemoryAccess (ITargetMemoryAccess.ReadMemory):
	Remove the overloaded version which took a `byte[] buffer'.
	(ITargetAccess): Don't derive from ITargetMemoryAccess.

	* classes/StackFrame.cs (Register): Make it [Serializable].
	(Registers, StackFrame): Likewise.

	* classes/TargetEvent (TargetEventArgs): Make it [Serializable].

	* backends/Inferior.cs (Inferior): Implement ITargetAccess, not
	ITargetMemoryAccess.

	* backends/Process.cs
	(Process): Implement ITargetAccess, not ITargetMemoryAccess.
	(Process.PrintObject): New public method.  This is now called from
	`Style.PrintObject()' to do all the computations in the engine's
	background thread.
	(Process.PrintType): Likewise.

	* backends/SingleSteppingEngine.cs (CommandAttribute): Make this a
	public, non-nested class so we can also use this attribute outside
	the SingleSteppingEngine.

	* backends/TargetAccess.cs (TargetAccess): New public abstract
	class; this is now used to access the target in the client and on
	the server and it'll know how to "do the right thing".

	* tests/mdb.exp (mdb_send_and_expect): New proc which also
	measures the time elapsed.

2005-08-25  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryAcess.TargetMemoryInfo): New property.

	* classes/TargetAccess.cs (TargetAccess): Make this
	[Serializable], not MarshalByRefObject.

	* backends/Process.cs (Process): Maintain a local copy of the
	serializable ITargetMemoryInfo and use it instead of doing a
	remote invocation on the SingleSteppingEngine.

	* backends/SingleSteppingEnginge.cs
	(SingleSteppingEngine): Don't implement ITargetMemoryInfo.

2005-08-25  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs
	(DebuggerBackend): Make this class abstract protected.
	(DebuggerBackend.ctor): Take a `DebuggerManager' argument.
	(DebuggerBackend.DebuggerExit): New protected abstract method.
	(DebuggerBackend.DebuggerExitedEvent): Removed.

	* backends/ThreadManager.cs
	(ThreadManager.Kill): Kill the main thread last.
	(ThreadManager.HandleChildEvent): When the main thread exited,
	send the `TargetExitedEvent' first, then call Kill(), dispose the
	backend and return true.

	* backends/remoting/DebuggerServer.cs
	(DebuggerServer.ctor): Take a `DebuggerManager' and a
	`DebuggerClient' argument.
	(DebuggerServer.DebuggerExited): Override this and call
	`client.Shutdown()'.

	* backends/remoting/DebuggerClient.cs
	(DebuggerClient.Shutdown): Mark this as [OneWay].

	* backends/remoting/DebuggerManager.cs
	(DebuggerManager.TargetExited): Just remove the client from the
	hash table, don't call Shutdown().

2005-08-25  Martin Baulig  <martin@ximian.com>

	* classes/Breakpoint.cs
	(BreakpointEventHandler): Removed.
	(Breakpoint.HandlerNeedsFrame): Removed.
	(Breakpoint.CheckBreakpointHit): Removed the `StackFrame' arg.
	(Breakpoint.BreakpointHit): Removed.

	* classes/SimpleBreakpoint.cs
	(BreakpointHitHandler): Removed.
	(BreakpointCheckHandler): Don't take a `StackFrame' arg.

2005-08-25  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguage.cs (ILanguage.CreateObject): Take an
	`ITargetAccess' instead of a `StackFrame'.

	* classes/TargetEvent.cs
	(TargetEventHandler): Removed the `object sender' argument.

	* backends/Process.cs
	(Process.State): Maintain the `target_state' here and not in the
	SingleSteppingEngine.
	(Process.SendTargetEvent): Merge this with OperationCompleted()
	and make it [OneWay].

2005-08-24  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.SyncCommandAttribute): Renamed to
	CommandAttribute and also use it for async commands.
	(SingleSteppingEngine.SendAsyncCommand): Removed.

2005-08-24  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.Stop): Replaced with the former contents of
	the Interrupt() method.
	(SingleSteppingEngine.Interrupt): Renamed to Stop().

	* backends/Process.cs (ProcessExitedHandler): Removed.
	(Process.TargetExitedEvent): Removed.
	(Process.ProcessExitedEvent): Removed.

	* backends/ThreadManager.cs (ThreadManager.HandleChildEvent): Only
	raise a `TargetExitedEvent' if the main thread exited.

2005-08-23  Martin Baulig  <martin@ximian.com>

	* frontend/libedit/mono-debugger-readline.c
	(mono_debugger_readline_static_init): Don't catch SIGINT.

	* backends/classes/Semaphore.cs: Moved to classes/Semaphore.cs and
	made it a public static class.

	* backends/Process.cs (Process.WaitHandle): New public property.
	(Process): Removed the `bool wait' argumetns from all async
	commands; always return immediately.

	* backends/remoting/DebuggerManager.cs
	(DebuggerManager.Wait): Wait for a Process'es WaitHandle here.
	(DebuggerManager.Interrupt): Interrupt this waiting.

	* frontend/Main.cs: Catch SIGINT here, run the mainloop in a
	separate thread and abort commands on SIGINT.

2005-08-21  Martin Baulig  <martin@ximian.com>

	Rewrote the event handling for async commands; the `Process' now
	sends the command and waits for its completion.

	* backends/Process.cs (Process.SendAsyncCommand): New method;
	start all async commands here and also wait here for their
	completion.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.StartOperation): Removed.
	(SingleSteppingEngine.AbortOperation): Removed.
	(SingleSteppingEngine.SendAsyncCommand): Just start the command,
	don't wait for its completion.

2005-08-21  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.OperationFinish): Handle both native and
	non-native finish here.

2005-08-21  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.Operation): Make this class protected.
	(CommandType): Make this serializable and provide an entry for
	each operation type.
	(Command): Removed the `Operation' field and make it serializable.

2005-08-20  Martin Baulig  <martin@ximian.com>

	Drop support for not running the debugger out-of-proc.

	* classes/ScriptingContext.cs
	(FrameHandle, BacktraceHandle): Mark this [Serializable] and not
	MarshalByRefObject.

	* classes/TargetLocation.cs
	(TargetLocation): Mark this [Serializable].
	(TargetLocation.LocationInvalidEvent): Removed.

	* backends/Process.cs (Process): Don't implement IDisassembler.
	(Process.SendTargetEvent): Mark this as [OneWay].

	* backends/remoting/DebuggerManager.cs: Make sure we only create
	on instance of this.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.SyncCommandAttribute): New attribute.
	(SingleSteppingEngine.ProcessCommand): Removed - mark all
	synchronous commands with the [SyncCommand] attribute - the
	remoting framework will call ThreadManager.SendSyncCommand() for us.
	(SingleSteppingEngine.CommandResult): Removed.

	* backends/remoting/DebuggerServerDispatchSink.cs
	(DebuggerServerDispatchSink.ProcessEvent): Check whether we're
	invoking a method with the [SyncCommand] attribute and call
	ThreadManager.CallSyncCommand().

	* backends/ThreadManager.cs
	(ThreadManager.SendSyncCommand): We're now called from the
	remoting framework.

2005-08-20  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs: Moved the implementation of all methods
	starting commands to the SingleSteppingEngine, duplicate the API
	entry points here and just call the corresponding method there.

2005-08-20  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs (Process.ctor): Removed the Inferior and
	ProcessStart arguments.

	* backends/SingleSteppingEngine.cs (SingleSteppingEngine.ctor):
	Catch the inferior's TargetOutput, DebuggerOutput and
	DebuggerError events here.

2005-08-18  Martin Baulig  <martin@ximian.com>

	* backends/remoting/DebuggerManager.cs
	(DebuggerManager): New public class; this now takes care of our
	DebuggerClients and manages them.

	* frontend/Interpreter.cs (Interpreter): Don't use a global
	`backend' and `modules' anymore; use a global `DebuggerManager'
	instead.  Moved some stuff into the ScriptingContext.

	* frontend/ScriptingContext.cs
	(ScriptingContext): Moved some more stuff here from the `Interpreter'.
	(ScriptingContext.GetDebuggerBackend): New public method; gets the
	backend from our current process.

	* backends/remoting/DebuggerServer.cs: Use client activation.
	* backends/remoting/DebuggerClient.cs: Moved here from ./backends/.

	* backends/Debugger.cs
	(Debugger.DebuggerManager): New public property.

2005-08-17  Martin Baulig  <martin@ximian.com>

	* backends/remoting/Server.cs: Moved to ./wrapper/Server.cs.

	* backends/remoting/DebuggerClient.cs: Moved to
	./backends/DebuggerClient.cs.

	* backends/Debugger.cs (DebuggerBackend): Make the .ctor
	protected internal.

	* backends/remoting/DebuggerServer.cs (DebuggerServer): Derive
	from DebuggerBackend.

	* wrapper: Merge Mono.Debugger.Remoting.dll and Mono.Debugger.dll.

2005-08-17  Martin Baulig  <martin@ximian.com>

	* frontend/Interpreter.cs
	(Interpreter.Start): Don't take any arguments; parse the
	`InferiorArgs' in our `DebuggerOptions', start the target and
	return a `Process'.
	(Interpreter.Run): Make this protected.

	* classes/ProcessStart.cs
	(ProcessStart.ctor): Make the ctors protected.
	(ProcessStart.Create): Make this internal.

	* backends/Debugger.cs
	(DebuggerBackend.Run): Take a `DebuggerOptions' and a `string[]'
	as arguments; create and return the `ProcessStart' here.

2005-08-15  Martin Baulig  <martin@ximian.com>

	* backends/remoting/: Update to support multiple connections and
	also correctly exit when we're done.

2005-08-15  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs
	(DebuggerBackend.TargetExited): Removed this event.
	(DebuggerBackend.DebuggerExitedEvent): New event; this is called
	from Dispose() when everything is disposed.

2005-08-11  Martin Baulig  <martin@ximian.com>

	* backends/remoting/DebuggerClient.cs
	(DebuggerClient.CreateConnection): Register a lease sponsor and
	always renew the lease for another 5 minutes.

2005-08-11  Martin Baulig  <martin@ximian.com>

	* backends/remoting/mono-debugger-remoting.[ch]: Renamed to
	backends/server/remoting.[ch] and include it in the
	libmonodebuggerserver.la.	

2005-08-11  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs
	(ThreadManager.OnTargetExitedEvent): Call `backend.Dispose()' here.

	* frontend/Interpreter.cs
	(Interpreter.TargetExited): Don't call `backend.Dispose()' here.

	* classes/Threading.cs
	(DebuggerWaitHandle.CurrentThread): Include the pid.

	* backends/server/library.c
	(mono_debugger_server_get_current_pid): New function.

2005-08-11  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs (DebuggerOptions.IsRemote): New option.

	* frontend/Main.cs
	(CommandLineInterpreter.ParseOption): Added `-remote' option.

	* frontend/Interpreter.cs
	(Interpreter): Make this a MarshalByRefObject.
	(Interpreter.InterpreterEventSink): New protected class; moved all
	the event handling in here.
	(Interpreter.Initialize): Use `DebuggerClient.CreateConnection ()'
	if `options.IsRemote' is set.

	* frontend/ScriptingContext.cs
	(FrameHandle, BacktraceHandle, ProcessHandle, ScriptingContext):
	Make them MarshalByRefObject's.

	* backends/remoting/: New directory.

	* wrapper/Makefile.am: Create `Mono.Debugger.Remoting.Dll' and
	`mdb-server.exe'.	

2005-08-11  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend): Make this a MarshalByRefObject.

	* arch/Architecture_I386.cs
	(Architecture_I386): Make this a MarshalByRefObject.

	* arch/Architecture_X86_64.cs
	(Architecture_X86_64): Make this a MarshalByRefObject.

2005-08-11  Martin Baulig  <martin@ximian.com>

	* classes/SourceBuffer.cs (SourceBuffer): Mark [Serializable].
	* classes/AssemblerMethod.cs (AssemblerLine): Mark [Serializable].
	* classes/ThreadGroup.cs (ThreadGroup): Mark [Serializable].
	* classes/TargetException.cs (TargetException): Mark [Serializable].

	* classes/Module.cs (Module): Make this a MarshalByRefObject.

2005-07-28  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(OperationWrapper.TrampolineHandler): Allow `DelegateInvocation'
	wrappers inside the wrapper.

2005-07-28  Martin Baulig  <martin@ximian.com>

	* interfaces/IMethod.cs (WrapperType): New public enum.
	(IMethod.IsWrapper, IMethod.WrapperAddress): Removed.
	(IMethod.WrapperType): New property.

	* classes/Module.cs
	(Module.DebuggerBackend): New public abstract property.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.TrampolineHandler): New internal delegate.
	(SingleSteppingEngine.method_has_source): Renamed to `MethodHasSource'
	and made it static and protected.
	(SingleSteppingEngine.do_trampoline): Added `TrampolineHandler'
	argument; this callback tells us whether or not we should enter
	the trampoline.
	(OperationStepBase.CheckTrampoline): Moved here from OperationStep.
	(OperationWrapper): New operation.

2005-07-27  Martin Baulig  <martin@ximian.com>

	* classes/MethodSource.cs (MethodSource.Lookup): Improved this;
	don't check `address >= method_end' anymore since the JIT may put
	code after the `ret' instruction.

2005-07-26  Martin Baulig  <martin@ximian.com>

	Added support for stepping into interncalls and wrappers (like
	delegate invocations, for example).

	* classes/MethodSource.cs
	(MethodSource.Module): New public property.
	(MethodSource.Lookup): Make this work for methods with just one
	single source line.

	* classes/SourceAddress.cs (SourceAddress.Location): This is now
	also supported for dynamic methods.

	* classes/SourceLocation.cs
	(SourceLocation.HasSourceFile): New public property.
	(SourceLocation.SourceBuffer): New public property.
	(SourceLocation.ctor): Added a .ctor taking a `Module', an
	`ISourceBuffer' and an `int' for dynamic methods.

	* backends/Debugger.cs
	(DebuggerBackend.MonoLanguage): Removed.
	(DebuggerBackend.AddLanguage): New public function.
	(DebuggerBackend.Languages): New public property.

	* arch/BfdContainer.cs
	(BfdContainer.AddFile): Call `backend.AddLanguage (bfd)' to
	register the language with the backend.

	* wrapper/mono-debugger-jit-wrapper.h
	(MonoDebuggerInfo): Replaced the `guint8
	**generic_trampoline_code' with `guint8 ***mono_trampoline_code' -
	which is pointing to the new `mono_trampoline_address' array.

	* backends/mono/MonoSymbolFile.cs
	(MonoSymbolFile.AddWrapperEntry): New public method.
	(MonoSymbolFile.WrapperEntry): New private class; deal with
	wrappers here.

	* backends/mono/MonoLanguageBackend.cs
	(MonoDebuggerInfo.GenericTrampolineCode): Replaced with
	`MonoTrampolineCode', which is now pointing to the new
	`mono_trampoline_address' array.

	* backends/ILanguageBackend.cs
	(ILanguageBackend): Implement `IDisposable'.

	* backends/SingleSteppingEngine.cs
	(OperationStep.CheckTrampoline): New protected method; check for
	trampolines here.  We now check in all registered languages for
	trampolines.

	* frontend/ScriptingContext.cs (ScriptingContext.ListSourceCode):
	Support dynamic source locations.

2005-07-26  Martin Baulig  <martin@ximian.com>

	* arch/Architecture_X86_64.cs
	(Architecture_X86_64.GetCallTarget): Added support for the new
	call opcodes.

2005-07-23  Martin Baulig  <martin@ximian.com>

	* frontend/Main.cs (CommandLineInterpreter.ReadInput): Don't use
	readline if we're executing a script.

2005-07-23  Martin Baulig  <martin@ximian.com>

	* glue/mono-debugger-readline.[ch]: Moved to frontend/libedit/.

	* configure.in: Don't check for readline anymore; we now use the
	included libedit.  Only check for termcap.

2005-07-23  Martin Baulig  <martin@ximian.com>

	* frontend/libedit/: Imported libedit from NetBSD 2.0.2.

	* configure.in: Added `termcap.h' and `termcap/termcap.h' checks.

2005-07-23  Martin Baulig  <martin@ximian.com>

	* arch/opcodes/Makefile.am (arch_cflags): Add `-DBFD64' on x86_64.

2005-07-22  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.GetTrampoline): Implemented.

2005-07-22  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs
	(ThreadManager.start_wait_thread): Reap all children before exiting.
	(ThreadManager.NextProcessID): New internal property.
	(Process.ctor): Set the process ID on a per-thread manager basis,
	so we start counting at 1 after restarting the target.

2005-07-22  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetNotification.cs
	(ITargetNotification): Remove the `TargetExited' event.

	* backends/SingleSteppingEngine.cs (SingleSteppingEngine.Dispose):
	Don't set `process = null'.

2005-07-21  Martin Baulig  <martin@ximian.com>

	* classes/TargetLocation.cs
	(TargetLocation.Print): New public abstract method; provides a
	human-readable description of the location.

	* frontend/Command.cs
	(Show.ShowLocationCommand): Added `show location' command to
	display the location of an expression.

	* frontend/Expression.cs
	(AddressOfExpression.DoEvaluateVariable): Check whether we
	actually have an address before trying to use it.
	(AddressOfExpression.EvaluateAddress): Allow address-less
	expressions here.

2005-07-21  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoArrayTypeInfo.cs (MonoArrayTypeInfo.ctor): Use
	`4 x TargetAddressSize' to get proper alignment.

2005-07-19  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-ptrace.c
	(io_thread): Don't abort if we get an EINTR.

2005-07-19  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (handle_exception): Correctly
	step over exceptions; check all catchpoints, not just the first one.

	* classes/ExceptionCatchPoint.cs
	(ExceptionCatchPoint.CheckBreakpointHit): Call `exception.GetTypeInfo()'
	before trying to create the object.

	* tests/TestException.cs: New tests.
	* tests/mono-debugger.tests/TestException.exp: Added testcase.

	* tests/mdb.exp (mdb_expect_catchpoint): New proc.
	(mdb_expect_exception): New proc.

2005-07-19  Martin Baulig  <martin@ximian.com>

	* backends/server/x86_64-arch.c
	(server_ptrace_call_method_invoke): Correctly marshal the
	parameters.

	* backends/server/i386-arch.c (server_ptrace_call_method_invoke):
	Don't leak memory here.

2005-07-19  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (Operation): Make this class
	abstract and nest it inside the `SingleSteppingEngine'.
	(SingleSteppingEngine.Operation): We're now an abstract class.
	(SingleSteppingEngine.OperationStepOverBreakpoint): Move the "step
	over breakpoint" code here; clean it up and check for trampolines.
	(SingleSteppingEngine.step_over_breakpoint): Check whether the
	breakpoint is actually enabled.
	(SingleSteppingEngine.DoStep): Moved into `OperationStep.Step()'.
	(OperationType): Removed.

	* backends/StepFrame.cs (StepMode): Added `NativeInstruction',
	`SourceLine' and `NextLine'.

	* backends/BreakpointManager.cs
	(BreakpointManager.LookupBreakpoint): Added `out bool is_enabled'.

	* backends/server/breakpoints.c
	(mono_debugger_breakpoint_info_get_is_enabled): New public function.

2005-07-19  Martin Baulig  <martin@ximian.com>

	* classes/ObjectCache.cs (ObjectCache.Shutdown): New method; this
	is some kind of a "static finalizer", it kills the timer just
	before exiting.

	* backends/Debugger.cs
	(DebuggerBackend.Dispose): Call ObjectCache.Shutdown().	

2005-07-18  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs (NumberExpression.Value): Allow `val' to
	be `uint' or `ulong'.

2005-07-18  Martin Baulig  <martin@ximian.com>

	* ThreadManager.cs
	(ThreadManager.Kill): New private method; kill all threads here.
	(ThreadManager.HandleChildEvent): Call Kill() before
	OnTargetExitedEvent().
	(ThreadManager.ctor): Use `DebugFlags.Wait' for the `command_mutex'.

2005-07-15  Chris Toshok  <toshok@ximian.com>

	* classes/StackFrame.cs (Register, Registers, StackFrame):
	subclass from MarshalByRefObject.
	(SimpleStackFrame): make [Serializable]

	* classes/TargetEvent.cs classes/AddressDomain.cs
	classes/MethodBase.cs classes/SourceAddress.cs
	classes/MethodSource.cs classes/ProcessStart,
	classes/Backtrace.cs, classes/SourceInfo.cs,
	backends/mono/MonoObject.cs, backends/mono/MonoType.cs,
	backends/mono/MonoTypeInfo.cs, backends/mono/MonoVariable.cs,
	backends/ThreadManager.cs, backends/Debugger.cs: subclass from
	MarshalByRefObject.

	* classes/TargetAddress: make [Serializable]
	
	* backends/mono/MonoSymbolFile.cs (MonoSymbolFile.Dispose): only
	dispose File if it's non-null.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.send_target_event): only send the target
	event if the proc != null.

	* backends/Process.cs: subclass from MarshalByRefObject.

2005-07-14  Martin Baulig  <martin@ximian.com>

	* frontend/Expression.cs
	(MemberAccessExpression.ResolveMemberAccess): If `left' resolves
	to a type, use it as a type.

	* backends/mono/MonoClassType.cs: Correctly index the methods and
	static methods if we have a parent class.

	* backends/mono/MonoClassInfo.cs
	(MonoClassInfo.GetParentObject): New internal method.

	* backends/mono/MonoClassObject.cs
	(MonoClassObject.Parent): Implement this again, using
	MonoClassInfo.GetParentObject().	

2005-07-13  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-ptrace.c
	(server_ptrace_finalize): Don't call do_wait() here.
	(server_ptrace_kill): Add error checking; note that this function
	must only be called from the inferior thread, it is in no way
	different from the other ptrace() functions.
	(io_thread): exit on error.

	* backends/ThreadManager.cs (ThreadManager.Kill): Removed.
	(engine_thread_main): Call `the_engine.Kill' on `abort_requested';
	this'll actually kill the target and also make the wait thread
	wake up from waitpid().
	(ThreadManager.Dispose): Don't actually kill any processes here;
	just set the `abort_requested' flag and join the `inferior_thread'
	and the `wait_thread' - after they exited, the target is gone and
	we can Dispose() everything.

2005-07-12  Martin Baulig  <martin@ximian.com>

	* wrapper/Makefile.am: Install the `mono-debugger-mini-wrapper' in
	the same directory than the `Mono.Debugger.dll'
	($(prefix)/lib/mono/1.0).

	* classes/ProcessStart.cs: Assume that the wrapper is in the same
	directory than the Mono.Debugger.dll.

2005-07-07  Chris Toshok  <toshok@ximian.com>

	* configure.in, acinclude.m4: remove the optional nature of the
	readline dep.  you must either have readline or libedit.

2005-07-07  Chris Toshok  <toshok@ximian.com>

	* backends/SingleSteppingEngine.cs: switch a few things from
	referencing the ThreadManager directly.  Also, dispose of the
	Process in our Dispose() method.

	* backends/ThreadManager.cs (Dispose): let's just dispose of the
	BreakpointManager and SingleSteppingEngine while we're at it,
	shall we?

2005-07-07  Chris Toshok  <toshok@ximian.com>

	* backends/native/NativeStructType.cs (NativeStructMember.Handle):
	remove.

	* backends/mono/MonoMember.cs (MonoMember.Handle): remove.

	* interfaces/ITargetStructType.cs (ITargetMemberInfo): Remove the
	abstraction breaking Handle property.

2005-07-07  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoLanguageBackend.cs (TryFindImage): Rename
	FindImage to this, return true if loading the assembly was
	successful.

	* backends/Debugger.cs: push anything dealing with Assembly
	loading down into MonoLanguageBackend.

2005-07-06  Chris Toshok  <toshok@ximian.com>

	* backends/Debugger.cs (DebuggerBackend.Dispose): dispose of all
	our ILanguages.

	* backends/mono/MonoLanguageBackend.cs (MonoLanguageBackend): add
	IDisposable implementation, specifically disposing of the
	MonoSymbolFile's, which fixes bug #75201.

	* backends/native/NativeLanguage.cs (NativeLanguage): add
	IDisposable implementation.

	* interfaces/ILanguage.cs (ILanguage): languages must implement
	IDisposable.

2005-07-06  Chris Toshok  <toshok@ximian.com>

	* interfaces/ITargetStructType.cs (ITargetFieldInfo): add
	HasConstValue property and GetConstValue method to fix the build.

2005-07-05  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoMember.cs (MonoFieldInfo): add implementations
	of HasConstValue and GetConstValue from ITargetFieldInfo.

	* backends/native/NativeEnumType.cs (NativeEnumType..ctor): use
	the new NativeFieldInfo ctor.

	* backends/native/NativeStructType.cs (NativeFieldInfo): add a new
	ctor for fields that have constant values (right now only used by
	enums), and add the ITargetFieldInfo "HasConstValue" and
	"GetConstValue" implementations.

	* frontend/Style.cs (StyleBase): make interpreter protected.
	(StyleNative.FormatEnumMember): make this code work for both
	native and managed enum types (although the native backend doesn't
	provide the needed hooks as yet.)

2005-07-05  Chris Toshok  <toshok@ximian.com>

	* backends/native/Makefile.am (EXTRA_DIST): add
	NativeEnum{Object,Type}.cs

	* backends/native/NativeEnumObject.cs,
	backends/native/NativeEnumType.cs: barebones native support for
	enumerated types.

	* arch/DwarfReader.cs: add support for enumerator and
	enumeration_type DIE's.

2005-07-05  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoArrayTypeInfo.cs: remove unused using.

	* backends/mono/MonoClassInfo.cs: remove the MonoClassType. prefix
	from MonoFieldInfo, MonoMethodInfo, and MonoPropertyInfo.

	* backends/mono/MonoClassType.cs: split out all the
	Member/Field/Property/Event classes from here.

	* backends/mono/MonoMember.cs: and put them here.  Also,
	MonoStructMember -> MonoMember, and make MonoMember not depend on
	a MonoStructType, since it's also used for enums.

	* backends/mono/MonoSymbolFile.cs: return a MonoEnumType if
	type.IsEnum == true.

	* backends/mono/Makefile.am (EXTRA_DIST): add the new Enum files
	and MonoMember.cs.

	* backends/mono/MonoEnumTypeInfo.cs,
	backends/mono/MonoEnumType.cs, backends/mono/MonoEnumObject.cs:
	add new enum support.

2005-07-05  Chris Toshok  <toshok@ximian.com>

	* frontend/Style.cs (StyleNative.FormatObject): add (obj is
	ITargetEnumType) block, which calls FormatEnumType.
	(StyleNative.FormatEnumMember): new function, give both the
	symbolic and numeric value.
	(StyleNative.FormatType): add TargetObjectKind.Enum case.
	(StyleNative.FormatEnumType): just print "enum <etype.Name>"
	(StyleNative.DoFormatObject): add TargetObjectKind.Enum case.

	* interfaces/TargetObjectKind.cs (enum TargetObjectKind): add
	Enum.

	* interfaces/ITargetEnum{Type,Object}.cs: new interfaces for
	enumerated types/objects.

	* interfaces/Makefile.am (EXTRA_DIST): Add
	ITargetEnum{Type,Object}.cs

2005-07-05  Wade Berrier <wberrier@novell.com>

	* DllImport: (merged up r46954)
	Copy what gtk-sharp does for importing glib-2.0:
	- add dllmap to Mono.Debugger.dll.config
	Remove dllmap for monodebuggerderver since it will be located by 
	ldconfig's cache or LD_LIBRARY_PATH

2005-07-01  Chris Toshok  <toshok@ximian.com>

	* backends/classes/Utils.cs: rewrite this to remove the dep on
	g_file_get_contents.

2005-06-28  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoFundamentalObjectBase.cs
	(MonoFundamentalObjectBase.SetObject): remove workaround for
	75270.

	* backends/mono/MonoStringObject.cs (MonoStringObject.SetObject):
	remove workaround for 75270.
	
2005-06-25  Chris Toshok  <toshok@ximian.com>

	* frontend/Expression.cs (SimpleNameExpression.DoResolve): use a
	gdb message here since it's a little clearer (and doesn't contain
	a typo, to boot).

	* frontend/Style.cs (StyleNative.DoFormatObject): clean up the
	array formatting a bit so it doesn't look so jammed together.

2005-06-22  Chris Toshok  <toshok@ximian.com>

	* backends/native/Makefile.am (EXTRA_DIST): add NativeArrayType.cs
	/ NativeArrayObject.cs

	* arch/DwarfReader.cs (DwarfReader.DwarfTag): add the rest of the
	DWARF tags.
	(DwarfReader.DwarfInline): add this enum.
	(DwarfReader+LineNumberEngine.GetSource): change the type of the
	first arg to DieSubprogram.
	(DwarfReader+Die.CreateDie): add support for array_type and
	subrange_type.
	(DwarfReader+DieSubrangeType): new class.
	(DwarfReader+DieArrayType): new class.
	(backends/native/NativeArrayType,
	backends/native/NativeArrayObject): add support for native arrays.
	
2005-06-20  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoSymbolFile.cs: Add IDisposable interface so we
	can explicitly deallocate things.  Dispose of the
	CompilerServices.MonoSymbolFile in the implementation.

2005-06-20  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoStringObject.cs (MonoStringObject.SetObject):
	fix bug #75272 by extending the workaround for #75270.  Cut and
	paste the implementation from MonoObject here, as the empty NYI
	implementation in MonoFundamentalObjectBase (which is the
	workaround for 75270) overrides the MonoObject impl.

2005-06-14  Chris Toshok  <toshok@ximian.com>

	* arch/DwarfReader.cs (DwarfReader.DwarfAttributes): flesh out the
	rest of the attributes from the spec.

2005-06-14  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoFundamentalObjectBase.cs
	(MonoFundamentalObjectBase.SetObject): new method, here only as a
	workaround for bug #75270.

	* interfaces/ITargetFundamentalObject.cs
	(ITargetFundamentalObject.SetObject): new method.

	* frontend/Expression.cs (StructAccessExpression.SetStaticField,
	StructAccessExpression.SetField): setters for fields (fundamental
	types only for now.)
	(StructAccessExpression.DoAssign): implement for fields.
	(ArrayAccessExpression.DoAssign): implement for array[int].

2005-06-11  Chris Toshok  <toshok@ximian.com>

	* backends/native/NativeFundamentalObject.cs:
	(NativeFundamentalObject.SetObject): implement using RawContents,
	ala the mono backend.

	* arch/DwarfReader.cs (TargetVariable.CanWrite): return true if
	the variable is of a fundamental type.
	(TargetVariable.SetObject): assuming a fundamental type, set the
	variable.

2005-06-09  Chris Toshok  <toshok@ximian.com>

	* backends/Debugger.cs (DebuggerBackend..ctor): clean up this and
	DoInitialize/Initialize.  There's no need for the complex
	initialization stuff that was here before.  Put it all in the
	.ctor.
	(DebuggerBackend.CreateDebuggerHandler): comment on the awful name
	of this function.

2005-06-09  Chris Toshok  <toshok@ximian.com>

	* frontend/Makefile.am, arch/Makefile.am, interfaces/Makefile.am,
	test/Makefile.am, wrapper/Makefile.am, jay/Makefile.am,
	classes/Makefile.am, Makefile.am, backends/server/Makefile.am,
	backends/mono/Makefile.am: make dist work.

2005-06-09  Chris Toshok  <toshok@ximian.com>

	* classes/TargetBinaryReader.cs (TargetBinaryReader.PeekAddress,
	TargetBinaryReader.ReadAddress): Patch from Hans Kratz
	<kratz@omnicore.com>.  Use unsigned 32 bit numbers for addresses,
	so sign extension doesn't break things when the addresses are >
	2**31.

2005-05-31  Peter Williams  <peter@newton.cx>

	* frontend/CSharpTokenizer.cs (ReadDigit): Return Token.ERROR on
	parse errors to actually get the parse error reported. Add new
	code to parse hex numbers as unsigned ints always; it's illegal to
	try and parse a double with hex digits as we were trying before.

	* configure.in (AC_OUTPUT): Reflect the rename of backends/mono
	from backends/mono-csharp.

	* backends/Makefile.am (SUBDIRS): Same here.

	* frontend/Interpreter.cs (Initialize): Compile fix for removal
	of TargetOutputEvent from ThreadManager

	* frontend/Main.cs (SetupEngine): Add 'k' as an alias for
	'kill' a la gdb.

2005-05-31  Raja R Harinath  <rharinath@novell.com>

	* test/mdb.exp (mdb_start): Find the 'start-mdb.sh' script in
	$srcdir.

	* configure.in (pkg_config_path): Rename from PKG_PATH, so as to
	work with newer versions of pkg-config.
	* frontend/Makefile.am (CSharpExpressionParser.cs): Pick
	'skeleton' from $(srcdir).
	* wrapper/Makefile.am (LANGUAGE_SPECIFIC_FILES): Look for
	CSharpExpressionParser in $(top_builddir).

2005-05-27  Chris Toshok  <toshok@ximian.com>

	* backends/server/breakpoints.c
	(mono_debugger_breakpoint_manager_insert): use GSIZE_TO_POINTER
	instead of GUINT_TO_POINTER.
	(mono_debugger_breakpoint_manager_lookup): same.
	(mono_debugger_breakpoint_manager_lookup_by_id): same.
	(mono_debugger_breakpoint_manager_remove): same.

	* backends/server/i386-arch.c (x86_arch_child_stopped): use
	GPOINTER_TO_SIZE instead of a guint32 cast (which is wrong anyway
	- the function takes a guint64).

	* backends/server/x86_64-arch.c (x86_arch_child_stopped): same.

	* backends/server/x86-ptrace.c (server_ptrace_peek_word): make
	retval gsize* instead of guint64*.
	(server_ptrace_write_memory): use GSIZE_TO_POINTER instead of a
	naked gpointer cast.  Also, in the case of the calls to
	server_ptrace_read_memory, just pass addr uncasted (since the
	method takes a guint64 anyway.  This change thanks to
	peter@newton.cx).

2005-05-27  Chris Toshok  <toshok@ximian.com>

	* backends/ThreadManager.cs: remove some dead code.

2005-05-27  Chris Toshok  <toshok@ximian.com>

	* backends/Process.cs (Process.ReadLongInteger): fix c&p error.
	(Process.ReadAddress): same.
	(Process.ReadGlobalAddress): same.
	
2005-05-23  Martin Baulig  <martin@ximian.com>

	* arch/Architecture_I386.cs (Architecture_I386.unwind_method):
	Consider %esi and %edi as valid if they're not saved.

	* backends/classes/MonoVariableLocation.cs
	(MonoVariableLocation.GetAddress): Check whether a register is
	valid before trying to access it.

2005-05-21  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.ProcessChildEvent): Use `arch.UnwindStack()'
	to compute the `main_method_retaddr'.

	* backends/Inferior.cs
	(Inferior.GetBacktrace): Removed; this wasn't used anymore since a
	couple of months.
	(Inferior.GetReturnAddress): Removed.

	* backends/server/library.c
	(mono_debugger_server_get_backtrace): Removed; we don't need this
	anymore since we have the new stack unwinding code.
	(mono_debugger_server_get_ret_address): Removed.

	* backends/server/x86-arch.h (x86_arch_get_frame): Removed.

2005-05-21  Martin Baulig  <martin@ximian.com>

	* arch/Architecture_X86_64.cs: Implemented stack unwinding.

2005-05-17  Chris Toshok  <toshok@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.check_method_operation): remove unnecessary
	cast.
	(SingleSteppingEngine.CreateStepFrame, both overloads): pass an
	ILanguageBackend.
	

	* backends/StepFrame.cs: all uses of this class pass it valid
	ILanguageBackend's at the proper spot, so make that explicit in
	the ctors and stop casting.

2005-05-17  Chris Toshok  <toshok@ximian.com>

	* arch/DwarfReader.cs: fix the annoying exception about not
	finding DWARF 2 debugging info, and add (ifdefed for now) language
	support.

	* classes/Report.cs (DebugFlags): add DwarfReader.

2005-05-17  Chris Toshok  <toshok@ximian.com>

	* backends/MonoThreadManager.cs: add a few comments, and add
	constants for the thread index magic numbers.

2005-05-17  Chris Toshok  <toshok@ximian.com>

	* backends/ThreadManager.cs: a little cleanup.

2005-05-17  Chris Toshok  <toshok@ximian.com>

	* frontend/Expression.cs (NumberExpression.DoEvaluateVariable):
	throw an exception with a reasonable message instead of returning
	null here (causing a much more cryptic message to be printed.)
	(StringExpression.DoEvaluateVariable): same.
	(BoolExpression.DoEvaluateVariable): same.
	(ConditionalExpression.DoEvaluate,
	ConditionalExpression.DoEvaluateVariable): reindent.

	* frontend/CSharpTokenizer.cs (Tokenizer.InitTokens): add "True"
	and "False" to the list of tokens.

2005-05-13  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.c (x86_arch_child_stopped): Don't
	return 64-bit values; were on 32-bit here.

2005-05-11  Martin Baulig  <martin@ximian.com>

	* classes/TargetAddress.cs (TargetAddress.ctor): Removed the ugly
	trim-to-32-bit hack.

2005-05-11  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-ptrace.c (server_ptrace_peek_word): Make
	this 64-bit safe.

	* backends/server/x86_64-arch.c: Implemented the missing bits.

2005-05-11  Martin Baulig  <martin@ximian.com>

	* wrapper/mono-debugger-jit-wrapper.h
	(MonoDebuggerInfo, MonoDebuggerManager): Changed the order of some
	fields to get proper alignment on 64-bit machines.

	* backends/mono/MonoSymbolFile.cs: Reflect latest JIT changes.
	* backends/mono/MonoLanguageBackend.cs: Likewise.

2005-05-10  Chris Toshok  <toshok@ximian.com>

	* frontend/GnuReadLine.cs: remove the Instance stuff.

	* frontend/Command.cs (RunCommand.DoResolve): if there's no
	executable file specified, error out and tell the user to use the
	"file" command, ala gdb.

2005-05-10  Chris Toshok  <toshok@ximian.com>

	* backends/ThreadManager.cs: track change to SingleSteppingEngine.

	* backends/Process.cs: track StepFrame -> FinishFrame, and use
	#regions instead of header comments for interface implementations.

	* backends/SingleSteppingEngine.cs: general clean-up.  move code
	around, rename some methods to make their purpose more apparent
	(i.e. get rid of some overloads), rename Operation.StepFrame to
	Operation.FinishFrame to make it more apparent what it's doing.

	* glue/mono-debugger-readline.c
	(mono_debugger_readline_static_init): set rl_readline_name and
	rl_terminal_name.

	* interfaces/ITargetMemoryAccess.cs: move ITargetMemoryInfo so
	it's more "in order" with the rest of the file.

2005-05-08  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs (EventHandleCommand.DoResolve): allow zero
	arguments.
	(BreakpointEnableCommand.DoExecute): if we have no handle, enable
	all breakpoints/catchpoints.
	(BreakpointDisableCommand.DoExecute): if we have no handle,
	disable all breakpoints/catchpoints.
	(BreakpointDeleteCommand.DoExecute): if we have no handle, delete
	all breakpoints/catchpoints (after prompting the user).
	(BreakCommand.DoExecute): change message printed from "Inserted
	breakpoint..." to "Breakpoint..."

	* frontend/Interpreter.cs (Interpreter.ShowBreakpoints): display
	"No breakpoints or catchpoints." if there are non registered.
	(Interpreter.get_Events): provide a way to get at a list (in this
	case an array) of all breakpoints/catchpoints.  used by the bulk
	disable/enable/delete commands.

	* frontend/Main.cs (CommandLineInterpreter.SetupEngine): add "fin"
	as an alias for "finish".
	(CommandLineInterpreter.ParseOption): fix handling of "-script",
	which shouldn't have an argument.

2005-05-08  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoClassObject.cs (MonoClassObject.PrintObjcet):
	fix unitialized use of "func".

	* frontend/Expression.cs
	(MemberAccessExpression.ResolveMemberAccess): try to resolve left
	as a regular expression first, falling back to treating it as a
	type if that fails (reverse the way the code worked previously).
	This allows things like "print foo.a" when you've defined foo as
	"struct foo foo" in C.  This also points out that type names (in C
	at least), should include the "struct ".

2005-05-02  Chris Toshok  <toshok@ximian.com>

	* wrapper/Makefile.am: more mcs quieting.
	
2005-05-02  Chris Toshok  <toshok@ximian.com>

	* classes/TargetAddress.cs: provide Equals/GetHasCode
	implementations to quiet mcs.

2005-05-02  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoVariable.cs (MonoVariable.SetObject): Never
	accept rewrites of large portions of functionality without proper
	testing.  Implement this method again so it, oh, I dunno, actually
	*does* something?

	* backends/classes/MonoVariableLocation.cs
	(MonoVariableLocation.WriteBuffer): handle some more interesting
	value-in-register cases: 1. the buffer size is larger than the
	size we can stuff in a register (currently maxed at sizeof(long)?
	ugh.) 2. the buffer size is *smaller* than the TargetIntegerSize,
	as it is with things like booleans.  This makes "set ok = true"
	work while debugging mcs.

2005-05-02  Chris Toshok  <toshok@ximian.com>

	* backends/ThreadManager.cs (ThreadManager.Dispose): fix bug
	disposing of main_process.

2005-05-02  Chris Toshok  <toshok@ximian.com>

	* wrapper/Makefile.am (MCS_FLAGS): use -debug instead of -g, and
	turn off warnings about private things that are never used.

2005-05-02  Chris Toshok  <toshok@ximian.com>

	* frontend/ScriptingContext.cs (FrameHandle.GetRegister): Resolve
	-> GetTypeInfo.

	* frontend/Main.cs (CommandLineInterpreter.SetupEngine): register
	"l" as an alias for "list".

	* frontend/Expression.cs
	(PointerDereferenceExpression.DoEvaluateVariable): remove
	CurrentObject stuff.
	(ArrayAccessExpression.DoEvaluateVariable): Resolve ->
	GetTypeInfo.
	(CastExpression.TryCurrentCast): same.
	(CastExpression.DoEvaluateVariable): fix an error msg.

	* frontend/Command.cs (PrintExpressionCommand.Execute): nuke
	CurrentObject stuff.
	(PrintTypeCommand): nuke CurrentObject stuff.
	(CatchCommand): make sure to get the TypeInfo for the exception
	type.

	* backends/mono/MonoSymbolFile.cs (VariableInfo..ctor): use
	Report.Debug instead of Console.WriteLine.
	(MonoSymbolFile.AddCoreType): Resolve -> GetTypeInfo.

	* backends/mono/MonoLanguageBackend.cs
	(MonoBuiltinTypeInfo..ctor): Resolve -> GetTypeInfo.
	(MonoLanguageBackend.CreateObject): reimplement.

	* backends/mono/MonoType.cs: Resolve -> GetTypeInfo.
	
	* backends/mono/MonoClassInfo.cs (MonoClassInfo.GetField): Resolve
	-> GetTypeInfo.
	(MonoClassInfo.GetStaticField): same.
	(MonoClassInfo.GetMethod): same.

	* backends/mono/MonoArrayType.cs (MonoArrayType.DoGetTypeInfo):
	Resolve -> GetTypeInfo.

	* backends/mono/MonoStringType.cs
	(MonoStringObject.DoGetTypeInfo): Resolve -> GetTypeInfo.

	* backends/mono/MonoObjectType.cs (MonoObjectType.DoGetTypeInfo):
	Resolve -> GetTypeInfo.

	* backends/mono/MonoClassType.cs (MonoClassType.GetStaticField):
	Resolve -> GetTypeInfo.
	(.GetStaticMethod): same.
	(.DoGetTypeInfo): same.
	(MonoMethodInfo.Get): same.
	(MonoPropertyInfo.Get): same.

	* backends/mono/MonoFunctionTypeInfo.cs
	(MonoFunctionTypeInfo.Invoke): Resolve -> GetTypeInfo.

	* backends/mono/MonoFundamentalType.cs
	(MonoFundamentalType.DoGetTypeInfo): Resolve -> GetTypeInfo.

	* backends/mono/MonoObjectObject.cs
	(MonoObjectObject.GetCurrentType): Resolve -> GetTypeInfo.

	* backends/mono/MonoOpaqueType.cs (MonoOpaqueType.DoGetTypeInfo):
	Resolve -> GetTypeInfo.

	* backends/mono/MonoClassObject.cs: nuke .CurrentObject and
	.GetCurrentObject().

	* backends/mono/MonoFunctionType.cs (MonoFunctionType..ctor):
	remove redundant klass assignment.
	(MonoFunctionType.InvokeStatic): Resolve -> GetTypeInfo.
	(MonoFunctionType.DoGetTypeInfo): same.

	* backends/mono/MonoVariable.cs (MonoVariable.GetObject): Resolve
	-> GetTypeInfo.

	* backends/native/NativeType.cs (NativeType.Resolve): rename
	GetTypeInfo.

	* classes/ExceptionCatchPoint.cs
	(ExceptionCatchPoint.CheckBreakpointHit): track removal of
	ITargetClassObject.CurrentObject.

	* interfaces/ITargetType.cs: rename "Resolve" to "GetTypeInfo".
	I'm sick of "Resolve" being used to mean about 50 different things
	in the debugger code.

	* interfaces/ITargetClassObject.cs: remove CurrentObject.  I'll
	put it back in if someone can tell me what the purpose of it was -
	it's broken currently and removing code that uses it fixes the
	problem.

2005-04-27  Chris Toshok  <toshok@ximian.com>

	* classes/Threading.cs: remove the Debugger events - just use the
	stuff in corlib.

	* backends/server/mutex.c: remove the debugger event stuff.

	* backends/server/mutex.h: same.

	* backends/SingleSteppingEngine.cs: track change from Debugger
	events to corlib threading events.

	* backends/ThreadManager.cs: same.

	* classes/SymbolTableManager.cs: same.
	
2005-04-26  Chris Toshok  <toshok@ximian.com>

	* backends/Inferior.cs (Inferior.Dispose): don't call Kill here.

	* backends/ThreadManager.cs (ThreadManager.Dispose): use a
	two-stage method.  first we Kill all the processes, then we
	Dispose of them.

	* backends/SingleSteppingEngine.cs (SingleSteppingEngine.Dispose):
	don't Kill the inferior here, only Dispose of it.

	* backends/server/x86-ptrace.c (server_ptrace_finalize): only kill
	the pid in server_ptrace_kill.  in finalize we do_wait.
	(server_ptrace_kill): PT_KILL here as well, although i'm sure
	that's unnecessary.

	* backends/server/x86-freebsd-ptrace.[ch]: rename
	i386-freebsd-ptrace.[ch].

2005-04-26  Chris Toshok  <toshok@ximian.com>

	[ fixes bug #61196 ]
	* classes/SymbolTableManager.cs: rework the Dispose stuff so that
	it doesn't use Thread.Abort.

	* backends/ThreadManager.cs: same.

2005-04-24  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs (SetCommand): override DoResolve and
	DoExecute so we can both handle debugger settings as well as
	expressions representing assignments ("set lang auto" and "set x =
	3", respectively).

2005-04-22  Chris Toshok  <toshok@ximian.com>

	* backends/MonoThreadManager.cs (MonoThreadManager.ThreadCreated):
	fix for use with the new io-layer, which appears to create an
	additional thread at runtime startup.  This change is evil, and
	this code is also evil.  There has to be a better way for the
	debugger to figure out which is the main managed thread.

2005-04-19  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs (CdCommand.DoExecute): special handling for
	"." and "..", and use DirectoryInfo to make sure paths exist.
	Fixes bug #73247.

2005-04-19  Chris Toshok  <toshok@ximian.com>

	* frontend/CL.cs (LineParser.GetCommand): change the way commands
	are parsed so that "_" on the line is assumed to be a command
	(which doesn't exist, of course).  Fixes bug #73244.

2005-04-18  Chris Toshok  <toshok@ximian.com>

	* configure.in: fix BFD_TARGET_X86_64 AM_CONDITIONAL.  Thanks to
	Marvin Taylor for this one.

2005-04-13  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoLanguageBackend.cs: rather broken fix for
	74391.  call MonoDebuggerInfo.LookupType before looking up the
	type.

2005-04-13  Chris Toshok  <toshok@ximian.com>

	* interfaces/IMethod.cs: Add some docs.

	* interfaces/IArchitecture.cs: same.

2005-04-12  Martin Willemoes Hansen  <mwh@sysrq.dk>

	* autogen.sh: Corrected error messages to print Mono-debugger 
	  instead of Gtk#

2005-04-12  Chris Toshok  <toshok@ximian.com>

	* frontend/Interpreter.cs (Interpreter.ShowModules): clean up the
	module list.

2005-04-11  Chris Toshok  <toshok@ximian.com>

	* backends/Debugger.cs (DebuggerBackend.LoadLibrary): if the
	library we're loading is a managed assembly, call
	mono_language.FindImage on it.

	* backends/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.get_DebuggerBackend): nuke.
	(MonoLanguageBackend.get_SourceFileFactory): new property.
	(MonoLanguageBackend.FindImage): new function.  actually cause the
	assembly to be loaded by the inferior.
	
	* backends/mono/MonoSymbolFile.cs (MonoMethod.Load): pass the
	SourceFileFactory to MonoMethodSource..ctor instead of the
	DebuggerBackend, since the SourceFileFactory is all that's used
	anyway.
	(MonoMethod.get_DeclaringType): don't return null, return
	decl_type.
	(MonoMethodSource..ctor): take SourceFileFactory instead of
	DebuggerBackend.

2005-04-11  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs (EventHandleCommand): split out this
	behavior from BreakpointEnableCommand, since it really annoys me
	to have BreakpointDisableCommand subclassing from
	BreakpointEnableCommand.
	(BreakpointDisableCommand): subclass from EventHandleCommand.
	(BreakpointEnableCommand): same.
	(BreakpointDeleteCommand): same.

2005-04-11  Chris Toshok  <toshok@ximian.com>

	* configure.in: fix the AM_CONDITIONAL for BFD_TARGET_X86_64,
	which (for some unknown reason) was causing the debugger to
	configure in support for x86_64 on ubuntu 5.04 (on a p4).

2005-04-11  Chris Toshok  <toshok@ximian.com>

	* classes/TargetBinaryAccess.cs: new file, move the base class
	stuff out of TargetBinaryReader here, as well as TargetBlob.

	* classes/TargetBinaryReader.cs: inherit from TargetBinaryAccess.
	
	* classes/TargetBinaryWriter.cs: same.  stop inheriting from
	Reader.
	
2005-04-11  Chris Toshok  <toshok@ximian.com>

	* frontend/Expression.cs: clean up warnings.

	* frontend/CSharpTokenizer.cs: same.

	* frontend/GnuReadLine.cs: same.

	* frontend/Command.cs: same.

	* arch/DwarfFrameReader.cs: same.

	* arch/StabsReader.cs: same.

	* backends/Debugger.cs: same.

	* classes/ExceptionCatchPoint.cs: same.

	* classes/ProcessStart.cs: same.

	* classes/Module.cs: same.

2005-04-11  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs: Add support for x86_64.

	* arch/Bfd.cs (Bfd.GetTrampoline): Move arch-specific code into
	IArchitecture.

	* interface/IArchitecture.cs
	(IArchitecture.GetJumpTarget): New method.
	(IArchitecture.RegisterMap): New property.

	* backends/mono/MonoSymbolFile.cs (MonoVariable.register_map):
	Moved into IArchitecture.RegisterMap since it's arch-specific.	

2005-04-08  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs (UpCommand, DownCommand): oops, fix these so
	they continue to work with no arguments.

2005-04-08  Martin Baulig  <martin@ximian.com>

	* backends/Inferior.cs (Inferior.InsertHardwareBreakpoint): Allow
	TargetError.NotImplemented in addition to DebugRegisterOccupied.

2005-04-08  Martin Baulig  <martin@ximian.com>

	* arch/ArchitectureI386.cs: Renamed to Architecture_I386.cs.
	* arch/ArchitecturePowerPC.cs: Renamed to Architecture_PowerPC.cs.
	* arch/Architecture_X86_64.cs: New file.

2005-04-08  Martin Baulig  <martin@ximian.com>

	* backends/server/x86_arch.[ch]: New files.

2005-04-08  Martin Baulig  <martin@ximian.com>

	* backends/server/x86-linux-ptrace.h: Moved `INFERIOR_REGS_TYPE'
	and the `INFERIOR_REG_*' macros into i386-arch.h.

2005-04-08  Martin Baulig  <martin@ximian.com>

	* configure.in: Support x86_86 in the bfd.

	* arch/bfd: Added include/elf/x86-64.h, elf64-gen.c,
	elf64-target.h and elf64.c from Binutils 2.14.

2005-04-08  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-ptrace.c: Renamed to x86-ptrace.c.
	* backends/server/i386-linux-ptrace.c: Renamed to x86-linux-ptrace.c.
	* backends/server/i386-linux-ptrace.h: Renamed to x86-linux-ptrace.h.
	* backends/server/i386-arch.h: Renamed to x86-arch.h and moved the
	architecture-specific stuff to a new i386-arch.h.

	* backends/server/x86-arch.h: Renamed `I386BreakpointInfo' to
	`X86BreakpointInfo' and all the `i386_arch_*' functions to `x86_arch_*'.

2005-04-07  Chris Toshok  <toshok@ximian.com>

	* arch/StabsReader.cs (MyVariable..ctor): remove spew.

2005-04-07  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs (DownCommand, UpComand): add support for an
	argument.  in the up case, it increments
	process.CurrentFrameIndex.  In the down case, it decrements.

2005-04-06  Chris Toshok  <toshok@ximian.com>

	* backends/ThreadManager.cs (ThreadManager.wait_thread_main):
	remove the label 'again', as it's never used.

2005-04-06  Chris Toshok  <toshok@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.Interrupt): let's be a little less flowery,
	shall we?

2005-04-06  Chris Toshok  <toshok@ximian.com>

	* classes/StackFrame.cs (StackFrame.check_disposed): let's be a
	little less flowery, shall we?

2005-04-06  Chris Toshok  <toshok@ximian.com>

	[ fixes bug #74469 ]
	* frontend/Command.cs (HelpCommand.Execute): if there are no
	commands in a family, say that and return.  don't crash.
	(LibraryCommand.Complete): do arg/filename completion.

2005-04-04  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoFundamentalType.cs: use the protected
	"type_info" field instead of CreateTypeInfo, since the latter
	gives us hashtable assertions about duplicate key insertion.  This
	fixes passing fundamental objects (ints, floats, shorts, etc) to
	methods using the "call" command.

2005-04-02  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoLanguageBackend.cs
	(MonoLanguageBackend.CanCreateInstance): we can create an instance
	of any type we can lookup (really only fundamental types at the
	moment).
	(MonoLanguageBackend.CreateInstance): flesh out this method.

	* backends/mono/MonoFundamentalType.cs (.CreateInstance):
	reimplement this to create instances of fundamental types in the
	inferior from within the debugger.

	* backends/mono/MonoStringTypeInfo.cs: remove the CreateString
	stuff from here, and move it to MonoStringType.cs

	* backends/mono/MonoStringType.cs (.CreateObject,
	.CreateInstance): reimplement these, so that we can create string
	objects in the inferior process from inside the debugger.

2005-03-31  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoSymbolFile.cs (MonoMethod.get_variables): we
	need to attach liveness ranges to MonoVariables if they're defined
	in nested blocks regardless of whether or not local names are
	ambiguous.  This is so MonoDevelop can update the variable display
	and not show variables that aren't in scope.
	(MonoSymbolFile.GetMethod): remove spew.

	* backends/mono/MonoClassObject.cs (MonoClassObject.PrintObject):
	80% implementation.  still needs some more type checking on the
	method invoked.

	* backends/mono/MonoLanguageBackend.cs
	(MonoBuiltinTypeInfo..ctor): read in the Exception type from
	mono_defaults.
	(MonoLanguageBackend.get_ExceptionType): implement.

	* frontend/Command.cs (BreakpointEnableCommand,
	BreakpointDisableCommand, BreakpointDeleteCommand): switch from
	BreakpointHandle to IEventHandle and track api change in
	Interpreter, so we can deal with both catchpoints and breakpoints.

	* frontend/Interpreter.cs (Interpreter.ShowBreakpoints): loop over
	all IEventHandles now, and clean up the display a bit.
	(Interpreter.GetEvent): rename GetBreakpoint to this, so it can
	refer to both catchpoints and breakpoints.
	(Interpreter.DeleteEvent): rename DeleteBreakpoint to this, so it
	can refer to both catchpoints and breakpoints.
	(Interpreter.InsertExceptionCatchPoint): EventHandle ->
	CatchpointHandle.

	* classes/SourceLocation.cs (SourceLocation.InsertBreakpoint):
	track change to BreakpointHandle.

	* classes/CatchpointHandle.cs: the majority of the old code from
	EventHandle.cs, reorganized/renamed so as to implement
	IEventHandle.
	
	* classes/BreakpointHandle.cs: reorganize/rename things a bit so
	we implement IEventHandle.

	* interfaces/IEventHandle.cs: move classes/EventHandle.cs here,
	and make it a general interface, implemented by both
	classes/CatchpointHandle and classes/BreakpointHandle.

2005-03-24  Chris Toshok  <toshok@ximian.com>

	* configure.in (AC_OUTPUT): remove cslex/Makefile.

2005-03-23  Chris Toshok  <toshok@ximian.com>

	* cslex/ remove.
	
	* Makefile.am (SUBDIRS): remove cslex

	* frontend/Expression.cs (NumberExpression..ctor): add ctors for
	uint, long, ulong, float, double, and decimal.
	(PropertyGroupExpression): cut and paste job of
	MethodGroupExpression, for use in finding overloaded properties -
	i.e. indexers.
	(ArrayAccessExpression): allow multiple index expressions, and
	deal with indexers properly.

	* frontend/CSharpExpressionParser.jay: add many, many tokens.
	(constant): add more productions.
	(expression): make the array (foo[...]) production take multiple
	expressions, and pass them as an array to ArrayIndexExpression.

	* frontend/Makefile.am (noinst_DATA): remove CSharpTokenizer_lex.cs 
	(MAINTAINERCLEANFILES): same.
	(EXTRA_DIST): same.

	* frontend/CSharpTokenizer.lex: nuke this, cslex generated lexers
	can't deal with unicode.  which sucks.  hard.
	
	* frontend/CSharpTokenizer.cs: ressurect this, and make lots of
	improvements.  we can now deal with floats (courtesy of code
	ripped off of monodevelop), and lots of operator tokens were
	added.

2005-03-13  Chris Toshok  <toshok@ximian.com>

	* frontend/Makefile.am (MAINTAINERCLEANFILES): add
	CSharpTokenizer_lex.cs
	(CSharpTokenizer_lex.cs): add cslex rule to build this file.
	(EXTRA_DIST): add CSharpTokenizer_lex.cs/CSharpTokenizer.lex

	* frontend/ (svn:ignore): ignore CSharpTokenizer_lex.cs
	
	* frontend/CSharpTokenizer.lex: new file, lexer specification that
	implements the proper ifaces/properties that
	CSharpExpressionParser.jay expects.

	* frontend/CSharpExpressionParser.jay: clean up a little bit and
	make it work with the cslex generated lexer.

	* frontend/Expression.cs (NumberExpression..ctor): add a
	constructor for floats.  might not be the right place to put it,
	but it works.
	(BoolExpression): add a new type to represent boolean
	expressions. at the moment it can only deal with constant bool
	expressions like "true" and "false".
	(ConditionalExpression): add a new type to represent "a ? b : c".

	* Makefile.am (SUBDIRS): add cslex

	* configure.in (AC_OUTPUT): add cslex/Makefile

2005-03-09  Chris Toshok  <toshok@ximian.com>

	* acinclude.m4 (READLINE_TRYLINK): supply a function body calling
	a libreadline function.  This way, if libreadline is static, we'll
	pull in the archive and get undefined symbols if there are any.

2005-03-10  Martin Baulig  <martin@ximian.com>

	* interfaces/IVariable.cs (IVariable.GetLocation): New method.

	* frontend/Expression.cs (VariableAccessExpression): Derive from
	PointerExpression, not just Expression.
	(AddressOfExpression.EvaluateAddress): If `expr' is a
	PointerExpression, call EvaluateAddress() on it.

2005-03-09  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoLanguageBackend.cs (MonoLanguageBackend):
	Actually implement the ILanguage's type properties.

2005-03-02  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoClassType.cs (MonoClassType.get_events): new
	function.
	(MonoClassType.get_Events, MonoClassType.get_StaticEvents):
	implement.
	(MonoClassType.get_constructors): new function.
	(MonoClassType.get_Constructors,
	MonoClassType.get_StaticConstructors): implement.
	(MonoMethodInfo.Get): new function, returns the
	ITargetFunctionObject corresponding to this MonoMethodInfo.
	(MonoEventInfo): new class, more or less a c&p job from
	MonoPropertyInfo.
	
2005-03-02  Chris Toshok  <toshok@ximian.com>

	* backends/server/Makefile.am: clean this up substantially, since
	we're no longer building the orbit stuff.

	* backends/server/library.c (mono_debugger_server_initialize):
	remove the MARTIN_HACKS stuff.

	* configure.in: remove the MARTIN_HACKS orbit stuff.

	* backends/server/remote-server.c, backends/server/debugger-srv.c,
	backends/server/debugger-srv.h, backends/server/remote-client.c,
	backends/server/Debugger.idl: nuke.

2005-02-25  Chris Toshok  <toshok@ximian.com>

	* interfaces/ITargetObject.cs (ITargetObject.TypeInfo): rename
	Type to TypeInfo, to better reflect the type of the property.
	Also, I was getting sick of seeing obj.Type.Type everywhere.

	* frontend/Command.cs, frontend/Expression.cs, frontend/Style.cs,
	frontend/ScriptingContext.cs, backends/native/NativeObject.cs,
	backends/native/NativeFundamentalObject.cs,
	backends/mono/MonoVariable.cs, backends/mono/MonoObject.cs,
	backends/mono/MonoFundamentalObjectBase.cs: deal with the fallout
	of the above change.
	
2005-02-23  Chris Toshok  <toshok@ximian.com>

	Fix bug #72827.
	* backends/mono/MonoSymbolFile.cs (JitLexicalBlockEntry): add
	start and end IL Offsets here.  not sure we need them, but it
	makes things consistent with the line number entry.
	(MethodAddress..ctor): read in the lexical block entries.
	(MonoMethod.get_variables): fix the FIXME to use scope ranges for
	variables if local names are ambiguous.

2005-02-21  Martin Baulig  <martin@ximian.com>

	* backends/DaemonThreadRunner.cs: Removed this old file.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.DaemonEventHandler): Removed; this isn't
	used anymore.

2005-02-20  Chris Toshok  <toshok@ximian.com>

	* frontend/Makefile.am: track Tokenizer/ExpressionParser ->
	CSharpTokenizer/CSharpExpressionParser change.

	* wrapper/Makefile.am: same.

	* backends/native/NativeLanguage.cs: add implementation of
	ILanguage.SourceLanguage.

	* backends/mono/MonoLanguage.cs: same.
	
	* interfaces/ILanguage.cs: add "string SourceLanguage (StackFrame
	frame)".

	* frontend/Command.cs (Debugger.DoParseExpression): use
	context.Interpreter.GetExpressionParser to get our parser.
	(StyleCommand): nuke.
	(NestedCommand): new class that takes care of registering
	subcommands (for show, set, and threadgroup), and moves all the
	subcommand handling to one place.
	(SetCommand): new command for setting things.
	(SetCommand+SetLangCommand, SetCommand+SetStyleCommand): new
	private classes for the subcommands.
	(ShowCommand+*): move all the Show*Command subcommands to be
	private nested classes of ShowCommand, and change ShowCommand to
	inherit from NestedCommand.
	(ThreadGroup+*): same

	* frontend/Tokenizer.cs: rename to CSharpTokenizer.cs

	* frontend/ExpressionParser.jay: rename to CSharpExpressionParser.jay
	
	* frontend/CL.cs (Engine.Engine): re-indent.

	* frontend/Main.cs (CommandLineInterpreter.SetupEngine): remove
	the style command, add the set command, and add "info" as an alias
	for "show".

	* frontend/IExpressionParser.cs: interface that's used to
	communicate with any of the expression parsers.

	* frontend/Interpreter.cs: nuke ShortDescriptionAttribute since
	nothing uses it.
	(Interpreter.GetStyleNames): new function, so we can start
	thinking about autocompleting them.
	(Interpreter.CurrentLang, Interpreter.CurrentLangPretty,
	Interpreter.GetExpressionParser): the beginnings of new code to
	help implement the "set lang"/"show lang" commands, to help with
	mixed language debugging.

2005-02-17  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoClassType.cs, backends/mono/MonoClass.cs:
	essentially collapse these two into one class.  MonoClass was an
	abstract base class with 2 methods (1 of which was a ctor), and
	MonoClassType was the only subclass.

	* backends/mono/MonoFunctionType.cs: track MonoClass ->
	MonoClassType change.

	* backends/mono/MonoClassInfo.cs: same.
	
2005-02-16  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoSymbolFile.cs: rename "MonoType LookupType
	(...)" to "MonoType LookupMonoType (...)".

	* backends/mono/MonoLanguageBackend.cs: clean things up a little
	bit, rename "MonoType LookupType (...)" to "MonoType
	LookupMonoType (...)".
	
	* backends/mono/MonoFunctionType.cs: track LookupType ->
	LookupMonoType.

	* backends/mono/MonoArrayType.cs: same.

	* backends/mono/MonoClass.cs: same.

2005-02-16  Chris Toshok  <toshok@ximian.com>

	* backends/mono/MonoSymbolFile.cs,
	backends/mono/MonoLanguageBackend.cs: split out the MonoSymbolFile
	class and related machinery from MonoLanguageBackend.cs.
	
2005-02-15  Chris Toshok  <toshok@ximian.com>

	* classes/Makefile.am (EXTRA_DIST): remove ISymbolFile from here.
	
	* interfaces/Makefile.am (EXTRA_DIST): and add it here.

	* interfaces/ISymbolFile.cs: mv classes/ISymbolFile.cs here.
	
2005-02-15  Chris Toshok  <toshok@ximian.com>

	* backends/server/mutex.c (mono_debugger_event_trywait): fix
	warning.

	* backends/server/library.c: remove the #define for _GNU_SOURCE.
	gcc defines that for us.

	* backends/server/breakpoints.c: same.

	* backends/server/mutex.c: same.

	* backends/server/i386-arch.c: same.
	(server_ptrace_set_registers): fix type to remove compiler
	warning.

	* backends/server/i386-linux-ptrace.c (server_ptrace_global_init):
	no need to use g_static_mutex_init here since we initialize them
	when we declare them above.

2005-02-14  Chris Toshok  <toshok@ximian.com>

	* wrapper/Makefile.am (MDB_SRCLIST): remove Session.cs.

	* backends/mono/MonoLanguageBackend.cs: remove unused using.
	
	* classes/ExceptionCatchPoint.cs, classes/SourceInfo,
	classes/ProcessStart.cs, classes/SimpleBreakpoint.cs,
	classes/ModuleManager.cs, classes/ThreadGroup.cs,
	classes/Module.cs, classes/SourceLocation.cs,
	classes/EventHandle.cs, classes/Breakpoint.cs,
	classes/BreakpointHandle.cs, backends/Debugger.cs: remove
	serialization stuff.

	* arch/BfdContainer.cs: remove unused using.

	* arch/Bfd.cs: remove serialization stuff.

	* frontend/ScriptingContext.cs: remove unused usings.

	* frontend/Interpreter.cs (Interpreter.SaveSession,
	Interpreter.LoadSession, Interpreter.Restart): kill.

	* frontend/Command.cs (SaveCommand, LoadCommand, RestartCommand):
	kill.
	
	* frontend/Session.cs: nuke

	* frontend/Main.cs (CommandLineInterpreter.SetupEngine): remove
	registration of the load/save/restart commands.
	
2005-02-14  Chris Toshok  <toshok@ximian.com>

	* arch/DwarfReader.cs: add documentation for many of the Debugging
	Information Entries (DIEs), and add support for the Inheritance
	DIE.

2005-02-12  Chris Toshok  <toshok@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.setup_engine): use manager.DebuggerBackend
	to get at the symboltablemanager.

2005-02-12  Chris Toshok  <toshok@ximian.com>

	* backends/Inferior.cs (Inferior.Run): store off the delegates so
	they aren't gc'ed before passing them to
	mono_dbeugger_server_spawn.

2005-02-12  Chris Toshok  <toshok@ximian.com>

	* backends/ThreadManager.cs: remove unused SymbolTableManager
	property.

2005-02-12  Chris Toshok  <toshok@ximian.com>

	* backends/ILanguageBackend.cs (NotificationType): add AddModule
	to reflect change to unmanaged code.

2005-02-10  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs (Process.RuntimeInvoke): Don't throw an
	exception if the invoke failed; return the returned exception
	object instead.

2005-02-10  Martin Baulig  <martin@ximian.com>

	* backends/mono/*.cs: The new Mono debugging interface :-)

2005-02-10  Martin Baulig  <martin@ximian.com>

	* classes/TargetBinaryReader.cs (TargetBinaryReader.PeekBuffer):
	New public method.

2005-02-10  Martin Baulig  <martin@ximian.com>

	* backends/mono/MonoCSharpLanguageBackend.cs: Renamed to
	MonoLanguageBackend.cs.	

2005-02-10  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetTypeInfo.cs: New file.

	* interfaces/ITargetType.cs (ITargetType): Moved `HasFixedSize',
	`Size' and `GetObject' into ITargetTypeInfo.
	(ITargetType.Resolve): New method; returns an ITargetTypeInfo.

2005-02-10  Martin Baulig  <martin@ximian.com>

	* backends/: Renamed the `mono-csharp' directory to `mono'.
	* backends/mono/*.cs: Completely reworked the unmanaged debugger
	interface in the runtime.

2005-02-04  Chris Toshok  <toshok@ximian.com>

	* configure.in: add a mono dep to SERVER_DEPENDENCIES so we can
	use the metadata thread calls.

	* frontend/Interpreter.cs (Interpreter.Run): hook
	process.TargetOutput to the target_output delegate.
	(Interpreter.thread_created): same.

	* backends/server/i386-ptrace.c (child_setup_func): dup the
	inferior's output/error pipe fds over stdout/stderr.
	(server_ptrace_spawn): fill in the handlers and create the
	output/error pipes.  also, spawn our io thread.
	(io_thread): loop forever, proxying stdout/stderr to our
	delegates.

2005-02-03  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs: add "-all" to SourceCommand, and fix up
	BreakCommand to deal with it.  Also add some ifdefed-out pending
	breakpoint code here.

	* frontend/Expression.cs
	(MethodGroupExpression.DoEvaluateLocation): throw
	MultpleLocationsMatchException instead of a ScriptingException
	when multiple methods match.

	* frontend/ScriptingContext.cs
	(MultipleLocationsMatchException): as much as I hate to do it, add
	an exception class to allow location resolution to pass back
	multiple matches (and allow the caller to differentiate the two
	cases of "more than one location" and "multiple locations")
	(ScriptingContext.AddMethodSearchResult): add blurb about '-all'.
	Also only print when @print = true.
	(ScriptingContext.NumMethodSearchResults): new property.
	(ScriptingContext.ClearMethodSearchResults): new method, clear out
	both the hashtable and arraylist.
	
2005-02-03  Chris Toshok  <toshok@ximian.com>

	* backends/mono-csharp/MonoClass.cs (MonoEventInfo..ctor): pass
	the MonoSymbolField to the superclass's ctor.
	(MonoMethodInfo..ctor): same.
	(MonoPropertyInfo..ctor): same, and cache the typeinfo we use to
	look up our type (so we can look it up again in the Type getter.)
	(MonoFieldInfo..ctor): same.
	(MonoFieldInfo.get_Type): if our type is a MonoClassPlaceholder,
	attempt to resolve it again before passing it back to the caller.
	(MonoPropertyInfo.get_Type): if our type is a
	MonoClassPlaceholder, attempt to resolve it again before passing
	it back to the caller.
	(MonoStructMember): provide readonly access to the MonoSymbolFile
	we loaded this member's types from.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolTable.GetType): only cache the type in the types
	hashtable if it's not a placeholder.
	(MonoSymbolTable.GetTypeFromClas): return a placeholder object if
	there is no ClassEntry, not an OpaqueType.

2005-02-03  Chris Toshok  <toshok@ximian.com>

	* classes/MethodSource.cs: nuke unused comment.

2005-02-01  Chris Toshok  <toshok@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolTable.Update): add comment about the C structure this
	code reads.  Throw SymbolTableException instead of InternalError
	when the size of the struct isn't as expected, to be more in line
	with what we do when magic/version mismatches happen.
	(MonoSymbolTable.read_type_table): add comment about the C
	structure this code reads.
	(MonoSymbolTable.read_misc_table): add comment about the C
	structure this code reads.

2005-01-31  Chris Toshok  <toshok@ximian.com>

	* classes/ProcessStart.cs (DebuggerOptions.WorkingDirectory):
	default to Environment.CurrentDirectory instead of ".", so we get
	a full path when the user types "pwd".

	* frontend/Command.cs (CdCommand): new class, implements a
	gdb-like "cd" command.
	(PwdCommand): new class, implements a gdb-like "pwd" command.
	(FileCommand.Complete): use the filename completer.

	* frontend/Main.cs (CommandLineInterpreter.SetupEngine): register
	the "cd"/"pwd" commands.

2005-01-27  Chris Toshok  <toshok@ximian.com>

	* frontend/Completer.cs (StringsCompleter): simple completer to
	match against a static set of strings.

	* frontend/Command.cs (ShowCommand.Complete): complete against
	subcommand types.
	(ThreadGroupCommand.Complete): same.
	
2005-01-27  Chris Toshok  <toshok@ximian.com>

	* classes/Report.cs (DebugFlags): add SourceFiles.

	* classes/SourceFileFactory.cs (SourceFileFactory.read_file):
	quiet some spew and make it only show up for particular debug
	flags, and add a comment about the particular code page we use
	when reading the source file.

2005-01-25  Chris Toshok  <toshok@ximian.com>

	* glue/mono-debugger-readline.h: add prototype for
	mono_debugger_readline_get_columns.

	* glue/mono-debugger-readline.c
	(mono_debugger_readline_get_columns): new function, get the
	current screen width from readline.

	* frontend/GnuReadLine.cs (GnuReadLine.Columns): new property.
	the getter calls mono_debugger_readline_get_columns.

	* frontend/Style.cs (StructFormatter.Format): use
	GnuReadLine.Columns instead of hardcoding an assumed column width
	here.  also take into account the length of the header.
	
2005-01-25  Chris Toshok  <toshok@ximian.com>

	* frontend/Style.cs (Style): PrintVariable takes a FrameHandle now
	instead of StackFrame, and FormatObject also takes a FrameHandle
	arg.
	(StyleNative.FormatObject): If the object we're printing is a
	struct type, print out its static fields by calling
	NativeStyle.FormatStructType.
	(StyleNative.FormatStructType): print out the type's static
	fields (and their values).

	* frontend/ScriptingContext.cs (FrameHandle.ShowParameters,
	FrameHandle.ShowLocals): Style.PrintVariable takes a FrameHandle
	now, not a StackFrame.
	(ScriptingContext.PrintObject): pass the CurrentFrame in to this
	call so we can access static fields.

2005-01-25  Martin Baulig  <martin@ximian.com>

	* backends/native/NativePointerObject.cs
	(NativePointerObject.Print): Print a null pointer as "0x0".

2005-01-25  Martin Baulig  <martin@ximian.com>

	* frontend/Style.cs (StructFormatter): New public class.
	(StyleNative.DoFormatObject): Use the new StructFormatter.

2005-01-21  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs (SourceCommand.DoResolveExpression): don't
	require that people use -instance for SourceCommand's (like break,
	list, etc.) in order for instance methods to be included in the
	search.  It should jfw.

2005-01-21  Chris Toshok  <toshok@ximian.com>

	* doc/Makefile.am (update): track proper location of
	Mono.Debugger.dll.

2005-01-21  Chris Toshok  <toshok@ximian.com>

	* frontend/Main.cs: Fix command line parsing so that it correctly
	allows for all of the following forms: "/arg:value", /arg value",
	"-arg:value", "-arg value", "/arg", and "-arg" (and prints out a
	usage message if it fails to parse a particular arg/value).

2005-01-14  Chris Toshok  <toshok@ximian.com>

	* frontend/Completer.cs (Completer.SymbolCompleter): attempt to
	prepend the currently in-scope namespaces to the text so we don't
	have to enter fully qualified names for completion.

	* frontend/ScriptingContext.cs (ScriptingContext.GetNamespaces):
	add two overloaded methods for this, one that takes a FrameHandle
	and one with no args (to use the current frame).

	* frontend/Expression.cs (SimpleNameExpression.GetNamespaces):
	remove, and move to ScriptingContext.
	(SimpleNameExpression.Lookup, SimpleNameExpression.DoResolveType):
	use ScriptingContext.GetNamespaces.

2005-01-05  Chris Toshok  <toshok@ximian.com>

	* frontend/Interpreter.cs (Interpreter.Modules): add a property so
	Completer.SymbolCompleter can get at the module list.

	* frontend/Command.cs (BreakCommand.Complete): if it doesn't start
	with a '-' or contain a '/', try to complete it as a symbol.

	* frontend/Completer.cs (Completer.ComputeMCP): computer the
	maximal common prefix from a set of strings.
	(Completer.CommandCompleter, Completer.ArgumentCompleter,
	Completer.FilenameCompleter, Completer.SymbolCompleter): call
	ComputeMCP when inserting the first match so that readline will
	complete up to the point where the matches are different.
	(Completer.SymbolCompleter): new function.  use either of two ways
	to get a list of methods to complete against.  probably isn't
	100%, but it's close.
	
2004-12-15  Chris Toshok  <toshok@ximian.com>

	* glue/mono-debugger-readline.c: drop the #include of
	mono/metadata/debug-helpers.h.
	(mono_debugger_readline_set_completion_matches): set
	rl_attempted_completion_over to 1 here so we don't fall back to
	filename completion automatically (that's handled by the Command
	completers.)

	* glue/mono-debugger-readline.h: drop the #include of
	mono/jit/jit.h.

2004-12-14  Chris Toshok  <toshok@ximian.com>

	* configure.in: simplify the readline stuff - we force the dep on
	readline/libedit if the frontend is being built.  there's no
	reason to allow the user to disable it.

	* frontend/Main.cs: GnuReadLine is all static now, and it's
	assumed to be there.

	* glue/mono-debugger-readline.c (sigint_handler): remove the
	USE_READLINE ifdef.
	(mono_debugger_readline_static_init): same, and change the return
	type to void.  also call rl_set_signals so readline's signal
	handlers will get installed.
	(mono_debugger_readline_readline): remove the USE_READLINE ifdef.
	(mono_debugger_readline_add_history): same.
	(mono_debugger_readline_get_filename_completion_desired): new
	function.
	(mono_debugger_readline_set_filename_completion_desired): same.
	(mono_debugger_readline_enable_completion): remove the
	USE_READLINE ifdef.

	* glue/mono-debugger-readline.h: remove the USE_READLINE ifdefs
	- we assume it's there - and add prototypes for the filename
	completion stuff.

	* frontend/GnuReadLine.cs: make all methods/properties static.
	Also, remove the has_readline stuff.  from now on we'll just
	assume readline is there if we're building the frontend.  Also,
	add two more pinvoke functions, for getting/setting
	rl_filename_completion_desired.

	* frontend/Completer.cs (Completer.ArgumentCompleter): move the
	argument completion stuff here.
	(Completer.FilenameCompleter): new function, generate completions
	based on the path.
	
	* frontend/Command.cs: GnuReadLine is all static now.  remove the
	silly Instance() stuff.
	(Command.Complete): take all the code for argument completion and
	put it in Completer.ArgumentCompleter.
	(BreakCommand.Complete): if the text begins with
	Path.DirectorySeparatorChar, do filename completion.  This should
	probably be made a bit smarter and moved to SourceCommand.

2004-12-14  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs: nuke CommandError.

2004-12-14  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs (Command.Complete): add parameter completion
	here - for instance, you type "command -<tab><tab>" and it'll list
	"command"'s possible arguments.

2004-12-14  Chris Toshok  <toshok@ximian.com>

	* frontend/Completer.cs (Completer.CommandCompleter): this isn't
	*really* the right spot for it, but we need to insert the prefix
	of all matches as the first element in the matches array, so that
	readline will know to insert only that and display the rest of the
	list to the user so they can choose from it..

2004-12-12  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs (DebuggerOptions.StartTarget): New field.

	* frontend/Interpreter.cs (Interpreter.Start): New overloaded
	version taking a `DebuggerOptions'.

	* frontend/Main.cs (CommandLineInterpreter.ParseOption): Added
	`-run' command line argument to immediately start the target.

2004-12-11  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs (ThreadManager.HandleChildEvent): Set
	`abort_requested' if the child exited.

2004-12-09  Miguel de Icaza  <miguel@ximian.com>

	* glue/mono-debugger-readline.c
	(mono_debugger_readline_set_completion_matches): When there are no
	matches readline expects to get a NULL back, not a zero array.

2004-12-09  Chris Toshok  <toshok@ximian.com>

	* frontend/GnuReadLine.cs: deal with null matches.

2004-12-09  Chris Toshok  <toshok@ximian.com>

	* wrapper/Makefile.am (MDB_SRCLIST): add frontend/Completer.cs

2004-12-09  Chris Toshok  <toshok@ximian.com>

	* frontend/CL.cs (Engine..ctor): create our Completer.

	* frontend/Completer.cs: new file/class.  provides the completion
	delegate for GnuReadLine that does completion against commands at
	the start of the line, then defers to command specific completion
	(if possible) for the rest.

	* frontend/Main.cs (CommandLineInterpreter..ctor): add the call to
	enable completion, but comment it out for now, until I can figure
	out why it's crashing.

	* frontend/Command.cs (Command.Complete): base class impl, just
	call SetCompletionMatches(null).
	(HelpCommand.Complete): override the default behavior so we
	complete against command names.

2004-12-09  Chris Toshok  <toshok@ximian.com>

	* frontend/Command.cs: Move class CommandError, enum Command
	Family, interface IDocumentableCommand, and class Command from
	CL.cs here.

2004-12-09  Chris Toshok  <toshok@ximian.com>

	* glue/mono-debugger-readline.c
	(mono_debugger_readline_current_line_buffer): new function, return
	rl_line_buffer, dup'ed.
	(mono_debugger_readline_set_completion_matches): new functoin.
	(mono_debugger_readline_completion_function): new function, this
	is the one we register with libreadline, the one that calls our
	delegate.
	(mono_debugger_readline_enable_completion): new function, register
	our completion function and set the delegate.

	* frontend/Main.cs (CommandLineInterpreter..ctor): use
	GnuReadLine.Instance().

	* frontend/GnuReadLine.cs: make this a singleton class.
	(GnuReadLine.SetCompletionMatches): new method.  this must be
	called from the CompletionDelegate in order to communicate back to
	libreadline the matches for a given string.
	(GnuReadLine.EnableCompletion): new method, sets the
	CompletionDelegate.
	(GnuReadLine.CurrentLine): gets the contents of the current line,
	so we can do some rudimentary parsing if necessary.
	
2004-12-08  Chris Toshok  <toshok@ximian.com>

	* Makefile.am (SUBDIRS): frontends -> frontend.

2004-12-08  Chris Toshok  <toshok@ximian.com>

	* configure.in (AC_OUTPUT): remove the frontends/* subdirs.  we
	just build frontend/ now.

	* wrapper/Makefile.am (MDB_SRCLIST): track change in location of
	all frontend files.

        * frontends/*: move all files into frontend/ directory, and
	collapse the three (yes, three) namespaces down into 1.
	
2004-12-08  Martin Baulig  <martin@ximian.com>

	* configure.in: Add -D_GNU_SOURCE to `glue_cflags' and
	`server_cflags' on Linux.

	* wrapper/Makefile.am (WRAPPER_CFLAGS): Include `@glue_cflags@'.

	* wrapper/wrapper.c (debugger_event_handler): Reflect latest
	metadata changes; take two guint64 arguments.

	* backends/server/i386-arch.c (i386_arch_child_stopped): The
	notification function now takes two guint64 arguments.

2004-12-07  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (SourceCommand.Instance): Added
	`-instance' argument to include instance members in static
	context.

	* frontends/scripting/Expression.cs
	(MemberAccessExpression.ResolveMemberAccess): New public method;
	moved all the DoResolve() implementation here and added `bool
	allow_instance' argument.
	(MemberAccessExpression.DoResolve): Just call ResolveMemberAccess().
	(StructAccessExpression.FindMember): Added `bool allow_instance'
	argument to include instance members in static context.

2004-12-06  Chris Toshok  <toshok@ximian.com>

	* backends/server/powerpc-arch.c (powerpc_get_registers): we get
	all registers now, not just a subset of them.
	(powerpc_set_registers): same.
	(powerpc_get_pc): rename to powerpc_get_frame, and implement.
	(powerpc_insert_breakpoint):
	mono_debugger_breakpoint_manager_lock/unlock no longer take a
	pointer to a bpm.
	(powerpc_remove_breakpoint): same.
	(powerpc_enable_breakpoint): same.
	(powerpc_disable_breakpoint): same.
	(powerpc_get_breakpoints): same.
	(powerpc_current_insn_is_bpt): same.
	(check_breakpoint): same.

	* backends/server/powerpc-darwin.c (powerpc_get_target_info): fix
	signature and set is_bigendian.
	(powerpc_global_init): new function.
	(powerpc_darwin_inferior): add global_init and remove get_pc,
	renaming to get_frame.

2004-12-06  Chris Toshok  <toshok@ximian.com>

	* configure.in: nuke the LT_VERSION stuff, as it breaks the ppc
	build.

2004-12-06  Chris Toshok  <toshok@ximian.com>

	* backends/server/Makefile.am (libmonodebuggerserver_la_LDFLAGS):
	remove -module and -version-info, as it's unnecessary (for the
	moment, at the very least) and it breaks the ppc build.

	* glue/Makefile.am (libmonodebuggerreadline_la_LDFLAGS): remove
	-module, as it's unnecessary and breaks the ppc build.

	* autogen.sh: use glibtool if it's there.

	* acinclude.m4: add the LINUX_NPTL_CHECK here.

	* configure.in: and make use of it here, only if the platform is
	i386linux and server_only = no.

2004-12-06  Chris Toshok  <toshok@ximian.com>

	* glue/Makefile.am: change all the LIBEDIT stuff back to
	READLINE.  except now "READLINE" is a generic term, kinda like
	"Coke".

	* glue/mono-debugger-readline.c: LIBEDIT -> READLINE.

	* glue/mono-debugger-readline.h: include the right headers
	depending on whether we're readline or libedit.

	* README: add readline info to the dependency section.

	* configure.in (USE_READLINE): simplify the readline stuff here by
	using the macros that are in acinclude.m4.  the rest of this file
	(particularly the NPTL stuff) could stand a similar cleaning up.

	* acinclude.m4: new file.  put some macros dealing with
	readline/libedit here.  Make it deal with check readline and
	editline, and allow the user to specify either on the configure
	line.

2004-11-28  Miguel de Icaza  <miguel@ximian.com>

	* frontends/scripting/Command.cs (ListSourceCode): The symbol "-"
	means, list backwards, to be compatible with gdb. 

	* frontends/scripting/ScriptingContext.cs (ListSourceCode): Allow
	for count to be negative to list source code backwards.

	Fix off-by-one rendering of the line number.

2004-11-27  Chris Toshok  <toshok@ximian.com>

	* frontends/scripting/ScriptingContext.cs
	(ScriptingContext.AddMethodSearchResult): give a little helpful
	note about using "-id N".

	* frontends/command-line/Main.cs
	(CommandLineInterpreter.SetupEngine): add the "file" command, and
	remove the "start" command.
	(CommandLineInterpreter.ParseOption): new function to parse a
	command line arg.  Basically ripped from mcs and tweaked.
	(CommandLineInterpreter.ParseCommandLine): new function to parse
	the command line.  special handling for accumulating inferior args
	when the -args cmd line arg is present.
	(CommandLineInterpreter.Usage): new function.
	(CommandLineInterpreter.About): new function.
	(CommandLineInterpreter.Main): rework this to use ParseCommandLine
	instead of the GetOptions stuff.

	* frontends/scripting/Interpreter.cs (Interpreter): instead of
	duplicating fields of DebuggerOptions here, just save off the
	options passed to our ctor.
	(Interpreter.Interpreter): store off options, and don't attempt to
	initialize start here.  We do this when the user explicitly "run"s
	the executable.
	(Interpreter.IsScript): change the getter to use options.
	(Interpreter.Options): DebuggerOptions getter.
	(Interpreter.Start): we don't need to pass the DebuggerOptions
	here, as they were passed in to our ctor.
	(Interpreter.Query): new function to prompt the user for a 'y' or
	'n' response.
	
	* frontends/scripting/Command.cs (StartCommand): remove class.
	(FileCommand): new class, which allows setting and clearing
	DebuggerOptions.File.
	(RunCommand.DoResolve): Implement, and query the user if we're
	already debugging something (and we're interactive).
	(RunCommand.DoExecute): build up the inferior args array using the
	command args if they're present, or from the debugger options if
	they aren't.  Also, output the command line we're executing.
	(QuitCommand.NeedsProcess): override, return false.
	(QuitCommand.DoResolve): override, querying the user if there's a
	running inferior process.
	
	* classes/ProcessStart.cs (DebuggerOptions): remove the Options
	superclass.  This is still the place to look for options that
	effect execution of the debugger and of the inferior process, but
	parsing of the command line happens elsewhere now (Main.cs).
	Also, add File and InferiorArgs options, which constitute the
	inferior process's argv.
	(ProcessStart.Create): build up the args based on
	File/InferiorArgs.

2004-11-21  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetStructObject.cs (ITargetStructObject.Type):
	Fix compiler warning; the `new' modifier is required here.

	* interfaces/ITargetClassObject.cs: Likewise.
	* interfaces/ITargetPointerObject.cs: Likewise.
	* interfaces/ITargetStructType.cs: Likewise.

2004-11-18  Chris Toshok  <toshok@ximian.com>

	* backends/mono-csharp/MonoFundamentalType.cs
	(MonoFundamentalType.Supports): fix the debugger, after r36132
	(which makes IntPtr/UIntPtr primitive) broke it.

2004-11-17  Chris Toshok  <toshok@ximian.com>

	* frontends/scripting/Interpreter.cs (Interpreter.Start): accept a
	"string[] argv" argument, and pass that along to
	ProcessStart.Create.

	* frontends/scripting/Command.cs (StartCommand.DoExecute): pass
	the args directly to Interpreter.Start, so we don't parse them for
	debugger options (and don't expand @ args, etc.)

	* classes/ProcessStart.cs (ProcessStart.Create): add a new
	overloaded version that takes the argv as well as the
	DebuggerOptions.  This argv is used as is, without any processing.

2004-11-17  Chris Toshok  <toshok@ximian.com>

	* test/regress.exp: some changes - add pass/fail procs, keep track
	of the number of operations performed, and sometimes (rarely)
	choose "finish".

2004-11-17  Chris Toshok  <toshok@ximian.com>

	* test/regress.exp: add the current state of the "run the compiler
	compiling itself inside the debugger" regression test.  it has
	some hardcoded paths, and assumes you'll run it from the mcs/mcs
	dir, but it should work.

2004-11-15  Chris Toshok  <toshok@ximian.com>

	* frontends/command-line/Main.cs: remove some unused using
	directives.

2004-11-12  Chris Toshok  <toshok@ximian.com>

	* wrapper/wrapper.c (main_thread_handler): fix build.
	(mono_debugger_main): same.

2004-11-12  Chris Toshok  <toshok@ximian.com>

	* jay/: Add our own copy of jay from the mcs source.
	
	* configure.in (AC_OUTPUT): add jay/Makefile.

	* Makefile.am (SUBDIRS): add jay/

	* frontends/command-line/Makefile.am (JAY): use our jay, not
	mcs's.

2004-10-22  Chris Toshok  <toshok@ximian.com>

	* frontends/scripting/Command.cs: remove CommandParamAttribute.
	Duncan is a GOD.

2004-10-22  Chris Toshok  <toshok@ximian.com>

	* frontends/command-line/Main.cs: differentiate between commands
	and aliases (RegisterCommand/RegisterAlias).

	* frontends/scripting/Interpreter.cs: remove the HelpAttribute.

	* frontends/command-line/CL.cs: add the CommandFamily enum, and
	differentiate between "aliases" and "commands".  Also, expose the
	commands and aliases hashes as readonly so the HelpCommand can get
	at them.  Also, When commands are registered, build up the list of
	commands by family.

	* frontends/scripting/Command.cs: add help docs (rather spartan at
	the moment) for all commands, and make the HelpCommand generate
	all its output from these docs.

2004-10-22  Martin Baulig  <martin@ximian.com>

	* wrapper/wrapper.c (debugger_get_virtual_method): Don't call
	mono_object_get_virtual_method() on valuetypes.

2004-10-22  Martin Baulig  <martin@ximian.com>

	* backends/ILanguageBackend.cs
	(ILanguageBackend): Added GetBoxedObjectFunc().

2004-10-22  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (Operation): Added public
	`SimpleStackFrame StartFrame' field; this is the stack frame where
	the operation started.
	(SingleSteppingOperation.ProcessCommand): Compute and set the
	operation's `StartFrame'.

2004-10-22  Martin Baulig  <martin@ximian.com>

	* tests/: Updated the tests and made them work again.

2004-10-22  Chris Toshok  <toshok@ximian.com>

	* frontends/scripting/Style.cs (NativeStyle.FormatMethod): fix the
	formatting of cctor/ctor.
	(NativeStyle.FormatType): format cctors as well, as pass the right
	values for is_static/is_ctor.

	* frontends/scripting/Expression.cs: special case ".ctor" and
	".cctor" method names.

	* interfaces/ITargetStructType.cs
	(ITargetStructType.StaticConstructors): new property.
	(ITargetStructType.GetStaticConstructor): new method.

	* backends/mono-csharp/MonoClass.cs: add support for cctors.

	* backends/native/NativeStructType.cs: stub out the static
	constructor foo.

2004-10-22  Chris Toshok  <toshok@ximian.com>

	* frontends/command-line/Tokenizer.cs (Tokenizer.xtoken): handle
	"." (DOT) and ".." (DOTDOT).

	* frontends/command-line/ExpressionParser.jay (expression): add a
	BASE DOTDOT IDENTIFIER production for use with methods that have a
	"." prefix (like .ctor and .cctor).
	(variable_or_type_name): same.

	* frontends/scripting/Expression.cs: if the method name is
	".ctor", add the type's constructors to the list of methods.

2004-10-22  Chris Toshok  <toshok@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: replace +
	with / when registering load handlers.

2004-10-21  Chris Toshok  <toshok@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoMethod.GetTypeSignature): fall through in the TypeCode.Object
	case so we use t.FullName.
	(MonoMethod.RegisterLoadHandler): allow multiple load handlers per
	method, just make sure to only insert the load handler breakpoint
	(the one that we hit when first entering the method that allows us
	to insert all the user created ones) once.  Before this change you
	could only insert one user breakpoint on an unjitted method.

2004-10-21  Martin Baulig  <martin@ximian.com>

	* backends/ILanguageBackend.cs
	(NotificationType): Added `ThrowException'.

	* backends/Inferior.cs
	(Inferior.ChildEventType): Added `THROW_EXCEPTION'.

	* backends/SingleSteppingEngine.cs: We're now getting a
	NotificationType.ThrowException from the runtime each time an
	exception is being thrown.  Use that for exception catchpoints.

2004-10-21  Chris Toshok  <toshok@ximian.com>

	* frontends/scripting/Interpreter.cs
	(Interpreter.GetFullPathByFilename): new method - find the full
	path given just the filename.  This makes emacs breakpoints (C-x
	space) work.

2004-10-21  Chris Toshok  <toshok@ximian.com>

	* frontends/scripting/Style.cs (StyleNative.FormatEvent): new
	function.
	(StyleNative.FormatType): format both instance and static events.

	* frontends/scripting/Expression.cs
	(StructAccessExpression.GetEvent,
	StructAccessExpression.GetStaticEvent): new methods.
	(StructAccessExpression.FindMember): try to find events too.
	(StructAccessExpression.GetMember): add event support.
	(StructAccessExpression.GetStaticMember): same.
	(StructAccessExpression.DoEvaluateLocation): add support for event
	add/remove blocks.

	* frontends/scripting/Command.cs: add Add/Remove properties so
	-add and -remove can be used on source commands (like list and
	break).

	* backends/native/NativeStructType.cs: implement the event stuff
	from ITargetStructType.

	* backends/native/NativeStructObject.cs
	(NativeStructObject.GetEvent): implement.

	* backends/mono-csharp/MonoClassObject.cs
	(MonoClassObject.GetEvent): implement the ITargetStructObject
	event stuff.

	* backends/mono-csharp/MonoClass.cs (MonoClass.init_events,
	MonoClass.Events, MonoClass.init_static_events,
	MonoClass.StaticEvents): implement the ITargetStructType event
	stuff.
	(MonoClass.ctor): read event/static event info.

	* interfaces/ITargetStructType.cs (ITargetStructType.Events): new
	property.
	(ITargetStructType.StaticEvents): new property.
	(ITargetStructType.GetStaticEvent): new method

	* interfaces/ITargetStructObject.cs
	(ITargetStructObject.GetEvent): new method.

2004-10-21  Martin Baulig  <martin@ximian.com>

	* classes/TargetEvent.cs (TargetEventType): Added `Exception'.

	* classes/Breakpoint.cs (Breakpoint.CheckBreakpointHit): Added
	`TargetAddress frame_address' argument.

	* classes/ExceptionCatchPoint.cs: New public class, derives from
	Breakpoint.

	* classes/EventHandle.cs: New public class.

	* backends/Process.cs
	(Process.AddEventHandler): New public method.
	(Process.RemoveEventHandler): New public method.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.handle_exception): Support exception catch points.	

2004-10-21  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (CatchCommand): New command.

2004-10-21  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguage.cs
	(ILanguage.ExceptionType): New public property.

2004-10-21  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolTable.GetTypeFromClass): Added `Type type' argument; if
	we can't find the class for some reason, print a warning and
	create a MonoOpaqueType.

2004-10-20  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetStructType.cs
	(ITargetPropertyInfo): Added `Getter' and `Setter' properties.

	* frontends/scripting/Expression.cs
	(LocationType): New public enum.
	(Expression.EvaluateLocation): Added `LocationType type' argument.
	(Expression.DoEvaluateLocation): Likewise.
	(SourceExpression): Added `-set' and `-get' arguments to specify a
	property's getter/setter.

	* frontends/scripting/Command.cs (AboutCommand): Added Chris Toshok :-)

2004-10-20  Chris Toshok  <toshok@ximian.com>

	* classes/ProcessStart.cs (DebuggerOptions): add -f/-fullname,
	which the emacs gud stuff passes on the command line, and also
	change the WorkingDirectory option to -cd/-working-directory.

	* frontends/scripting/Style.cs (StyleEmacs):
	(StyleNative.TargetStopped): make this virtual so that StyleEmacs
	can override it.

	* frontends/scripting/Interpreter.cs (Interpreter.ctor): add emacs
	style, and don't call Run() here, we do it in response to the user
	typing "run".

	* frontends/scripting/Command.cs (RunCommand): new command.
	(HelpCommand.Execute): add "run" blurb.

	* frontends/command-line/Main.cs
	(CommandLineInterpreter.ctor): if we're running in emacs -- if
	options.InEmacs == true -- default the style to "emacs".
	(CommandLineInterpreter.SetupEngine): register the RunCommand on
	"run" and "r".

2004-10-20  Martin Baulig  <martin@ximian.com>

	* backends/StepFrame.cs
	(StepFrame.StackFrame): New public property.
	(StepFrame.ctor): Added `SimpleStackFrame' argument.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.handle_exception): New private method to
	handle exceptions.

2004-10-20  Martin Baulig  <martin@ximian.com>

	* backends/ILanguageBackend.cs
	(NotificationType): Added `HandleException'.

	* backends/Inferior.cs
	(Inferior.ChildEventType): Added `HANDLE_EXCEPTION'.

	* backends/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): Added support for
	`NotificationType.HandleException'.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.ProcessEvent): Added support for
	`Inferior.ChildEventType.HANDLE_EXCEPTION'.	

2004-10-20  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBakcend.cs
	(MonoMethod.GetTypeSignature): New method.
	[FIXME: This needs some love.]	

2004-10-20  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoMethod.RegisterLoadHandler): Pass the full method signature
	to the JIT; fixes #68527.

2004-10-20  Martin Baulig  <martin@ximian.com>

	* arch/BfdDisassembler.cs (BfdDisassembler.print_address_func):
	Always include the address, even if we have a function name.

2004-10-18  Chris Toshok  <toshok@ximian.com>

	* frontends/scripting/Expression.cs (StructAccessExpression):
	remove the "new" modifier from the Type field.

2004-10-18  Chris Toshok  <toshok@ximian.com>

	* backends/ThreadManager.cs (ThreadManager.SendSyncCommand):
	Process -> Engine.
	(ThreadManager.engine_thread_main): same.

	* backends/SingleSteppingEngine.cs: rename Command.Process to
	Command.Engine, so things are a little less confusing (it is
	afterall a SSE, not a Process).

2004-10-06  Chris Toshok  <toshok@ximian.com>

	* glue/Makefile.am
	(libmonodebuggerreadline_la_LIBADD): s/READLINE/LIBEDIT/

	* glue/mono-debugger-readline.[ch]: same.

	* configure.in: s/libreadline/libedit, and also add TRY_LINK
	clauses that look for -lcurses and -lncurses, not just -ltermcap.

2004-10-05  Chris Toshok  <toshok@ximian.com>

	* arch/DwarfFrameReader.cs: stub out the 'P' augmentation (much as
	the 'L' aug is presently stubbed out.)  This code appears
	incomplete, but this at least gets us a functioning "where"
	command when debugging mono-find-provides.exe (libicu has P augs).
	Also, fix the unknown augmentation error to include the particular
	aug, not the entire aug string.

2004-10-05  Chris Toshok  <toshok@ximian.com>

	* frontends/scripting/Expression.cs: correct message for zero
	length array accesses.

2004-09-24  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-ptrace.c (server_ptrace_finalize): Don't
	call do_wait(), it's causing hangs on exit and it was just there
	to reap children.

2004-09-20  Chris Toshok  <toshok@ximian.com>

	* frontends/scripting/Expression.cs
	(ArrayAccessExpression.DoEvaluateVariable): don't unconditionally
	throw an exception about the variable not being an array type -
	only do that if casting to both ITargetArrayObject and
	ITargetPointerObject fails.  this should fix printing array
	elements from the (mdb) prompt.

2004-09-20  Chris Toshok  <toshok@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.frame_changed): in the else block of the if,
	current_method might be null, so take that into account before
	calling check_method_operation.

2004-09-20  Chris Toshok  <toshok@ximian.com>

	* arch/DwarfReader.cs (TargetVariable.ctor): Add a ctor that takes
	an offset instead of a TargetLocation.
	(TargetVariable.GetAddress): in the case where the offset ctor is
	used, use that offset directly when creating a
	MonoVariableLocation.
	(DieMethodVariable.ProcessAttribute): the DWARF spec says location
	attributes can be blocks of constants.  handle the constant cases
	here (does this need to be augmented with the other block cases as
	well?)
	(DieMethodVariable.DoResolve): handle both the block and constant
	cases here.

2004-09-21  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs (ProcessStart..ctor): If we're debugging
	a managed application, check whether it has the correct runtime
	version.	

2004-09-07  Martin Baulig  <martin@ximian.com>

	* arch/BfdDisassembler.cs: Store the delegates in a class field
	before passing them to native code, so they're not garbage
	collected.

	* classes/TargetLocation.cs (TargetLocation.ReadAddress): New
	public method.

	* frontends/scripting/Command.cs (PrintCommand.Format): Added
	`Address' format ("/a", "/address").

2004-09-02  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoCSharpLanguageBackend.GetTrampoline): Catch symbol file
	exceptions and silently return null.

2004-08-27  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs (DwarfReader.read_pubnames): Ignore
	duplicate entries.

2004-07-12  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguage.cs (ILanguage.CreatePointer): New method.

2004-07-12  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetClassObject.cs
	(ITargetClassObject.CurrentType): New property.

	* frontends/scripting/Expression.cs (CastExpression): Allow a cast
	to the current type.

2004-07-12  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Reflect
	latest runtime changes.

2004-07-07  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(Callback.ProcessEvent): Added `out TargetEventArgs'.
	(SingleSteppingEngine.ProcessEvent): Only send an event if the
	callback told us to do so.

2004-07-07  Martin Baulig  <martin@ximian.com>

	* backends/ILanguageBackend.cs
	(ILanguageBackend.GetVirtualMethodFunc): New property.

	* wrapper/wrapper.c (MonoDebuggerInfo): Added
	`get_virtual_method', which calls mono_object_get_virtual_method().

	* backends/SingleSteppingEngine.cs (CallbackruntimeInvoke): Call
	the `GetVirtualMethodFunc' to get the actual method from the vtable.

2004-07-07  Martin Baulig  <martin@ximian.com>

	* backends/native/NativeLanguage.cs: Make this a "real" language
	backend, ie. we just create one instance of it and it's also doing
	type lookups.
	(NativeLanguage): The .ctor now also takes the BfdContainer.
	(NativeLanguage.LookupType): Implemented.

	* arch/DwarfReader.cs (DwarfReader.LookupType): New public method.

2004-07-06  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetPointerType.cs
	(ITargetPointerType.IsArray): New property.

	* interfaces/ITargetPointerObject.cs
	(ITargetPointerObject.GetArrayElement): New method.

2004-07-06  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs: Added support for bitfields.

2004-07-06  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolTable): Derive from Module; we put all icall wrappers
	into their own "<Mono Runtime>" module.
	(MonoSymbolTable.WrapperMethod): New private class; we now get the
	icall wrappers from the JIT.

2004-07-02  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.c (i386_arch_child_stopped): Reset
	DR_STATUS if we hit a hardware breakpoint.

2004-07-02  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/ExpressionParser.jay: Added `->' syntax
	for pointer dereference + member access.

2004-07-02  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs (ThreadManager.AcquireGlobalThread):
	Fixed a bad deadlock.

2004-07-02  Martin Baulig  <martin@ximian.com>

	* backends/server/mutex.c (DebuggerEvent): New typedef.
	(mono_debugger_event_new): New function.
	(mono_debugger_event_wait): New function.
	(mono_debugger_event_trywait): New function.
	(mono_debugger_event_signal): New function.

	* classes/Threading.cs (DebuggerAutoResetEvent): Use the new
	unmanged event functions from mutex.c.

2004-07-02  Martin Baulig  <martin@ximian.com>

	* classes/Report.cs: There's now MDB_DEBUG_FLAGS environment
	variable which sets the default debugging flags and a
	MDB_DEBUG_OUTPUT one which redirects the debugging output into a
	file.	

2004-07-02  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.Callback): Make this class abstract, moved
	the callback code into classes derived from this.

2004-06-30  Martin Baulig  <martin@ximian.com>

	* classes/ObjectCache.cs: Don't make the `objects' ArrayList
	synchronized, protect it with a mutex instead.  This seems to fix
	the deadlock.

	* classes/Threading.cs (DebuggerMutex): Use GMutex instead of Mono
	mutexes.

	* backends/server/breakpoints.h (BreakpointManager): Removed the
	`lock_func' and `unlock_func'.
	(mono_debugger_breakpoint_manager_new): Don't take the function
	pointers as arguments anymore.
	(mono_debugger_breakpoint_manager_lock): Don't take any arguments,
	this is now global.
	(mono_debugger_breakpoint_manager_unlock): Likewise.

	* backends/server/breakpoints.c: Use a GStaticRecMutex.

	* backends/server/mutex.[ch]: New files.

2004-06-30  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs (ProcessStart.SetupEnvironment): Don't
	pass GC_DONT_GC to our child.

2004-06-30  Martin Baulig  <martin@ximian.com>

	* classes/Threading.cs (DebuggerWaitHandle.Debug): New protected
	method.  Only call Report.Debug, if we're actually debugging.

2004-06-30  Martin Baulig  <martin@ximian.com>

	* backends/ILanguageBackend.cs
	(NotificationType.ThreadAbort): New notification.

	* backends/MonoThreadManager.cs
	(MonoThreadManager.HandleChildEvent): Handle thread abort.	

2004-06-29  Martin Baulig  <martin@ximian.com>

	* classes/Threading.cs (DebuggerWaitHandler.DebugFlags): New
	public field; default to DebugFlags.Mutex.

	* backends/BreakpointManager.cs: Set DebugFlags.BreakpointManager
	on our mutex.

2004-06-29  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h
	(mono_debugger_server_get_signal_info): Changed type of last
	argument to `SignalInfo **'; returns a pointer to the g_new()ed
	SignalInfo struct.

	* backends/ptrace/PTrace.cs (PTraceInferior.SetupInferior):
	Correctly marshal the SignalInfo struct.

2004-06-29  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h (SignalInfo): Removed `sigprof',
	`sigpwr', `sigxcpu', `thread_abort', `thread_restart',
	`thread_debug' and `mono_thread_debug'; added `mono_thread_abort'.

	* backends/Inferior.cs (Inferior): Removed the corresponding
	properties.	

2004-06-29  Martin Baulig  <martin@ximian.com>

	* backends/server/library.c (mono_debugger_server_static_init):
	Don't override the mono thread abort signal.

2004-06-29  Martin Baulig  <martin@ximian.com>

	* wrapper/Makefile.am: Don't install Mono.Debugger.dll in
	$(libdir), it only goes into the GAC.

2004-06-29  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs (ProcessStart.SetupEnvironment):
	Correctly process the environment here; if the user explicitly
	sets an env var in `UserEnvironment', it overrides the value
	inherited from our environment.
	(DebuggerOptions.MonoPrefix): Added "--mono-prefix" command line
	argument.  Sets the MONO_GAC_PREFIX, MONO_PATH, LD_LIBRARY_PATH
	and PATH in the inferior.

2004-06-29  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs
	(ProcessStart.Arguments): Renamed to `UserArguments'.
	(ProcessStart.Environment): Renamed to `UserEnvironment'.
	(ProcessStart.Environment): New public property.	

2004-06-29  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs (DebuggerOptions.JitWrapper): Removed.

	* frontends/command-line/Main.cs: Removed all the `AssemblyInfo'
	attributes.

	* wrapper/Makefile.am: Also include our generated AssemblyInfo.cs
	in mdb.exe.	

2004-06-29  Martin Baulig  <martin@ximian.com>

	* arch/Makefile.am: Don't install libmonodebuggerbfdglue.la, link
	it into libmonodebuggerserver.la instead.

	* wrapper/Mono.Debugger.dll.config.in: Provide a .config file for
	Mono.Debugger.dll and map "monodebuggerserver" to the full path
	name of the installed library.

2004-06-29  Martin Baulig  <martin@ximian.com>

	* wrapper/mono-debugger-jit-wrapper.h (MonoDebuggerManager): Added
	`guint32 thread_size' (which is `sizeof (MonoDebuggerThread)') and
	removed `thread_manager_notification'.
	(NOTIFICATION_THREAD_CREATED): New notification.

	* wrapper/thread-manager.c
	(mono_debugger_thread_manager_add_thread): Use the normal
	mono_debugger_notification_function() notification mechanism; the
	`notification_function' is gone.

	* backends/MonoThreadManager.cs
	(MonoThreadManager.managed_handler): Removed.
	(MonoThreadManager.thread_created): Call this via the
	NotificationType.ThreadCreated notification.
	(MonoThreadManager.do_initialize): Call thread_created() on the
	`main_thread'; this is very important because it tells GC about
	the main thread's stack.

2004-06-29  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-linux-ptrace.c
	(_server_ptrace_setup_thread_manager): Don't set
	PTRACE_O_TRACEFORK and PTRACE_O_TRACEVFORKDONE; we don't follow
	forks yet.

2004-06-29  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetAccess.InsertBreakpoint): New method.

	* backends/Process.cs (BreakpointCheckHandler): Added
	`ITargetAccess target' argument.

	* classes/Breakpoint.cs (Breakpoint.CheckBreakpointHit): Added
	`ITargetAccess target' argument.

	* classes/SourceInfo.cs (MethodLoadedHandler): Take an
	ITargetAccess argument instead of an Inferior.

	* arch/Bfd.cs (Bfd.dynlink_handler): Use the `ITargetAccess' which
	we got as argument; this breakpoint may be hit on a different
	thread than the one we used to insert it, so we can't pass the
	`Inferior' as `user_data'.

2004-06-29  Martin Baulig  <martin@ximian.com>

	* interface/ISymbolTable.cs (Symbol): New class.
	(ISimpleSymbolTable.SimpleLookup): Return a `Symbol', not a
	string.

	* arch/ArchitectureI386.cs (ArchitectureI386.UnwindStack): Added
	some "hacks" for special functions.

2004-06-26  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (SimpleStackFrame): New public class.
	Moved the stack frame's actual data here.

2004-06-26  Martin Baulig  <martin@ximian.com>

	* arch/Bfd.cs: Use correct start/end addresses.

	* arch/DwarfReader.cs (DwarfException, DwarfBinaryReader): Don't
	nest these two classes in DwarfReader.

	* arch/DwarfFrameReader.cs: New file.

	* classes/Module.cs (Module.UnwindStack): New abstract method.

2004-06-25  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (Registers): New public class.
	(StackFrame.WriteRegister): New public method to modify the
	register.	

	* interfaces/IArchitectures.cs
	(IArchitecture.RegisterSizes): New property.

	* backends/Inferior.cs (Inferior.GetRegisters): Return a
	`Registers', not a `Register[]'.
	(Inferior.SetRegisters): Take a `Registers' argument, not a
	`Register[]' one.

	* backends/Process.cs (Process.GetRegisters): Return a
	`Registers', not a `Register[]'.
	(Process.SetRegisters): Take a `Registers' argument, not a
	`Register[]' one.

2004-06-25  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (Register.Data): Renamed to `Value' and
	changed type to long.

2004-06-25  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs (Process.RuntimeInvoke): Take a `StackFrame'
	argument instead of an `ILanguageBackend' one; make them public.
	(Process.MyStackFrame): Killed this class.

	* backends/Backtrace.cs (Backtrace..ctor): Only take the first
	frame as argument.
	(Backtrace.GetBacktrace): New public method; unwind the stack to
	actually get the backtrace.

	* classes/StackFrame.cs (Register.Valid): New public property.
	(Register.SetValue): New public method.
	(StackFrame): Make this class sealed, not abstract.
	(StackFrame.Process): New public property.
	(StackFrame.CallMethod, StackFrame.RuntimeInvoke): Removed, use
	the methods in Process.

	* interfaces/IArchitecture.cs (IArchitecture.UnwindStack):
	Replaced the two overloaded versions which one single one which
	takes a stack frame and returns a stack frame.

	* interfaces/IMethod.cs (IMethod.UnwindStack): New method.

2004-06-25  Martin Baulig  <martin@ximian.com>

	* interfaces/IArchitecture
	(IArchitecture.CountRegisters): New property.

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryAccess.GetRegister): Removed.

	* backends/Inferior.cs (Inferior.GetStackPointer): Removed.
	(Inferior.GetRegister, Inferior.SetRegister): Removed.
	(Inferior.GetRegisters, Inferior.SetRegisters): Don't take an
	array of register indices; we always get/set all registers and
	they're always in the correct order.

	* backends/server/server.h
	(mono_debugger_server_get_registers): Removed the `count' and
	`registers' argument; always return all registers.
	(mono_debugger_server_set_registers): Likewise.

2004-06-25  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h (InferiorVTable): Renamed `get_pc' to
	`get_frame'; changed argument to `StackFrame *frame', this is an
	"out ServerStackFrame" argument.

	* backends/Inferior.cs (mono_debugger_server_get_frame): This now
	has an "out ServerStackFrame" argument; use it to get the current
	frame rather than creating a 1-frame-backtrace.

2004-06-25  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs
	(StackFrame.Registers): Don't make this abstract.
	(StackFrame..ctor): Take the registers as argument.
	(StackFrame.DisassembleInstruction): Removed.
	(StackFrame.DisassembleMethod): Removed.

	* backends/Process.cs (Process.CreateFrame): Added `Register[]'
	argument, removed the `Backtrace' argument.	

2004-06-25  Martin Baulig  <martin@ximian.com>

	* classes/TargetException.cs (TargetExceptionType): Renamed to
	TargetError and synced this with the error codes from the unmanged
	code in backends/server/server.h.

	* backends/Inferior.cs (CommandError): Removed, we now use
	TargetError from classes/TargetException.cs.

2004-06-25  Martin Baulig  <martin@ximian.com>

	* classes/TargetException.cs
	(TargetExceptionType): New public enum.
	(TargetException): Don't make this abstract; the .ctor now takes a
	TargetExceptionType argument.

2004-06-25  Martin Baulig  <martin@ximian.com>

	* classes/TargetInvocationException.cs
	(TargetInvocationException): Don't derive from TargetException.

	* classes/TargetException.cs (MethodOverloadException): Removed.

	* backends/mono-csharp/MonoFunctionType.cs: Throw an
	ArgumentException, not a MethodOverloadException.

2004-06-23  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-arch.c (server_ptrace_get_backtrace): Added
	a 0x0xffffe002 (NPTL syscall trampoline) hack.

	* arch/ArchitectureI386.cs
	(ArchitectureI386.GetCallTarget): Likewise.

2004-06-23  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (LookupCommand): New command.

2004-06-23  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (PrintFrameCommand): Only derive
	from ProcessCommand, not from FrameCommand.  Parse the arguments
	to get the (optional) frame number.
	(SelectProcessCommand): Only derive from DebuggerCommand, not from
	ProcessCommand.  Parse the arguments to get the (optional) process
	number.	

2004-06-23  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h
	(mono_debugger_server_insert_hw_breakpoint): Automatically search
	for a free debug register and return it in `idx' (made this an
	`guint32 *idx' out param).

	* backends/Inferior.cs (Inferior.InsertHwBreakpoint): Made `idx'
	and "out" parameter and added `bool fallback'.  We now search for
	an empty debug register and return it in `idx'.  If none can be
	found and `fallback' is set, insert a normal breakpoint.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.insert_temporary_breakpoint): Try to insert
	a hardware breakpoint and set the fallback flag.

2004-06-23  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (SingleSteppingEngine.Start):
	Make this method internal and make new threads run in the background.

2004-06-23  Martin Baulig  <martin@ximian.com>

	* classes/Threading.cs: New public class.  Contains wrappers
	around Mutex, ManualResetEvent and AutoResetEvent which have some
	debugging support.

2004-06-21  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguage.cs (ILanguage.CreateObject): New method.

	* frontends/scripting/Expression.cs
	(CatchExpression): New expression.

	* frontends/command-line/Tokenizer.cs: Added `catch' keyword.

2004-06-21  Martin Baulig  <martin@ximian.com>

	* classes/TargetEvent.cs
	(TargetEventType): Added `UnhandledException'.

	* backends/SingleSteppingEngine.cs: Send a
	TargetEventType.UnhandledException when we catch an unhandled
	exception.	

2004-06-21  Martin Baulig  <martin@ximian.com>

	* backends/ILanguageBackend.cs
	(NotificationType.UnhandledException): New notification.

	* backends/Inferior.cs (Inferior.RuntimeInvoke): Added
	`bool debug' argument; if true we don't pass an exception pointer
	to mono_runtime_invoke() so it'll actually throw exceptions.

	* backends/SingleSteppingEngine.cs: If we caught an unhandled
	exception, continue until mono_handle_exception() restored the
	stack for us and then stop.

2004-06-21  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs: If we caught a SIGINT, call
	Interrupt() on all non-deamon SSE's.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.Interrupt): Call Inferior.Stop(), not
	Inferior.GlobalStop().	

2004-06-21  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (CallCommand): New command.

2004-06-21  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Expression.cs
	(ThisExpression, BaseExpression): New public classes.

2004-06-21  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Expression.cs
	(ParentClassExpression): Removed.

2004-06-20  Martin Baulig  <martin@ximian.com>

	* classes/SourceInfo.cs (SourceInfo.FindMethod): Removed.

	* clases/Module.cs (Module.FindMethod): Call
	ISymbolFile.FindMethod() directly rather than looping over all the
	source files.

2004-06-20  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs: Read the .debug_pubnames section and use it
	for name based lookups.

	* classes/ISymbolFile.cs (ISymbolFile.FindMethod): New method.

	* classes/SourceInfo.cs (SourceFile.FindMethod): Use
	ISymbolFile.FindMethod() rather than looping over all the methods.

2004-06-19  Martin Baulig  <martin@ximian.com>

	* classes/MethodSource.cs (MethodSource.GetNamespaces): New public
	virtual property.

	* backends/mono-csharp/CSharpMethod.cs
	(CSharpMethod.GetNamespaces): Overload.

	* frontends/scripting/Expression.cs (SimpleNameExpression): Do a
	namespace lookup.

2004-06-18  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/ExpressionParser.jay: Added support for
	parenthesized expressions and allow the left side of a member
	access to be an expression.

2004-06-18  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Expression.cs (CastExpression): New
	expression.  Currently only works from a class type to one of its
	parent classes.

2004-06-18  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoClass.cs: If we have a parent class,
	correctly index our fields, properties and methods so we can
	distinguish members from our parent class.

2004-06-18  Martin Baulig  <martin@ximian.com>

	* backends/Inferior.cs (Inferior.GetCurrentFrame): New internal
	function; this is a more reliable way of getting the inner
	Inferior.StackFrame.	

2004-06-18  Martin Baulig  <martin@ximian.com>

	* backends/ILanguageBackend.cs
	(ILanguageBackend.GetTrampolineAddress): Added `out bool is_start';
	if true, then the return address is the start of the trampoline
	function and we need to FinishNative through it.

2004-06-18  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (OperationType.FinishNative):
	New stepping operation.  This does a "finish" if we don't have a
	current method by checking the stack pointer.

	* backends/Process.cs (Process.FinishNative): New public method.

	* frontends/scripting/Command.cs (FinishCommand): Added optional
	`-native' argument.

2004-06-17  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (StackFrame): Added `StackPointer' and
	`FrameAddress'.

	* backends/Inferior.cs
	(Inferior.ServerStackFrame): Added `StackPointer'.
	(Inferior.StackFrame): Added `StackPointer' and `FrameAddress'.

	* frontends/scripting/Command.cs (ShowFrameCommand): Added
	`show frame' command to get information about the current stack
	frame.	

2004-06-17  Martin Baulig  <martin@ximian.com>

	* arch/CoreFile.cs: Removed.
	* arch/CoreFileElfI386.cs: Removed.

2004-06-17  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (DisassembleCommand): Take an
	optional pointer expression, add auto-repeat support.

2004-06-17  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/ScriptingContext.cs
	(ScriptingContext.LastExamineAddress): Removed.

	* frontends/scripting/Command.cs (ExamineCommand): Store the end
	address internally and use it when we're repeating.

2004-06-17  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Main.cs (SetupEngine): `where' is now an
	alias for `backtrace'.

2004-06-17  Martin Baulig  <martin@ximian.com>

	* test/mono-debugger.tests/start-restart.exp: New test.

2004-06-17  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (StartCommand): Reenable this.

2004-06-17  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs
	(AboutCommand): Added `about' command.

2004-06-17  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Expression.cs (NumberExpression): Derive
	from PointerExpression.
	(PointerDereferenceExpression.EvaluateAddress): Removed the
	NumberExpression hack.

2004-06-17  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/CL.cs
	(Command.Repeat): New public virtual method.
	(Engine.Repeat): New public method.

	* frontends/scripting/Command.cs
	(DebuggerCommand.Repeating): New public bool field.
	(DebuggerCommand.Repeat): Just set Repeating and call Execute().	

2004-06-16  Martin Baulig  <martin@ximian.com>

	* backends/BreakpointManager.cs: Don't allow multiple breakpoints
	on the same method.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoMethod.RegisterLoadHandler): Don't allow multiple load
	handlers on the same method.

2004-06-16  Martin Baulig  <martin@ximian.com>

	* wrapper/: Don't #include <mono/metadata/verify.h>.

2004-06-16  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs: Added --debug-flags command line
	options to set Report.CurrentDebugFlags.

	* wrapper/Makefile.am: Reference the newly built Mono.Debugger.dll
	and not the one from the gac.

2004-06-12  Martin Baulig  <martin@ximian.com>

	Released version 0.9 "Seven Mile Bridge" of the Mono Debugger :-)

2004-06-12  Martin Baulig  <martin@ximian.com>

	* configure.in, wrapper/Makefile.am: GACify the debugger :-)

	* wrapper/AssemblyInfo.cs: New file.
	* wrapper/mono.snk, wrapper/mono.pub: New files.

2004-06-12  Martin Baulig  <martin@ximian.com>

	* configure.in: Bumped version number to 0.9.

2004-06-12  Martin Baulig  <martin@ximian.com>

	* classes/ThreadGroup.cs (Global, Main): New static public
	properties.  Initialize the "global" and "main" thread group in
	our static .ctor.

2004-06-09  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs: When entering a JIT
	trampoline, breakpoints on that call must remain disabled while
	we're inside the trampoline function.

2004-06-08  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/ExpressionParser.jay: Added
	`&expr' syntax to take the address of an expression.

	* frontends/scripting/Expression.cs
	(PointerDereferenceExpression): Allow NumberExpression's as target
	to make `*0x12345678' and `*305419896' work.

	* frontends/scripting/Command.cs (ExamineCommand): Allow repeating
	this command by typing it again without arguments.  Require a
	pointer expression as argument.

2004-06-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/ScriptingContext.cs
	(ScriptingContext.CurrentFrame): Removed the setter.
	(ScriptingContext.CurrentFrameIndex): New property.

2004-06-03  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoFunctionType.cs
	(MonoFunctionType.Invoke): Copy register variables onto the heap.

2004-06-03  Martin Baulig  <martin@ximian.com>

	* test/TestInvocation.cs: New file.

	* test/mono-debugger.tests/TestInvocation.exp: New test.

2004-06-02  Martin Baulig  <martin@ximian.com>

	Released version 0.8 "Wrightsville Beach" of the Mono Debugger :-)

2004-06-01  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/GnuReadline.cs
	(mono_debugger_readline_add_history): This returns `void'.

2004-05-29  Martin Baulig  <martin@ximian.com>

	* arch/bfdglue.c (bfd_glue_get_target_name): Return a g_strdup()ed
	copy since the managed->unmanaged wrapper now g_free()s it.
	(bfd_glue_get_symbol): Likewise.

2004-03-16  Martin Baulig  <martin@ximian.com>

	Released version 0.7 "Wilmington" of the Mono Debugger :-)

2004-04-29  Martin Baulig  <martin@ximian.com>

	* configure.in: Bumped version number to 0.7.

2004-04-26  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Session.cs: New file.

	* arch/Bfd.cs (Bfd): Added serialization support.
	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolFile): Serializable.

	* classes/Breakpoint.cs, classes/SourceInfo.cs: These are easy,
	just save/load them.

2004-04-26  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs: Don't make this class abstract.

2004-04-25  Martin Baulig  <martin@ximian.com>

	* arch/Bfd.cs: Improved support for libraries.

	* arch/DwarfReader.cs: Allow reading a library which is not yet
	loaded in memory; ie. read the line number table, but do
	relocations later.

2004-04-23  Martin Baulig  <martin@ximian.com>

	* classes/Module.cs (Module.RegisterLoadHandler): Moved here from
	SourceMethod.

	* classes/SourceInfo.cs (SourceMethod): Don't make this abstract.
	(SourceMethod.RegisterLoadHandler): Moved into Module.

2004-04-23  Martin Baulig  <martin@ximian.com>

	* classes/ISymbolFile.cs: New public interface.

	* classes/SourceInfo.cs (SourceFile): Don't make this abstract.

	* classes/Module.cs (Module.SourceFile): New abstract property.
	(Module.Sources): Moved this property into ISymbolFile.

2004-04-20  Miguel de Icaza  <miguel@ximian.com>

	* frontends/command-line/Main.cs: Add alias for "b" to mean "break"

	* frontends/scripting/Command.cs: Do not try to resolve if we have
	no current process, it leads to a crash.

	(QuitCommand): Derive from CL.Command, so we do not require a
	process to debug to quit.

2004-04-16  Peter Williams  <peter@newton.cx>

	* frontends/scripting/Command.cs: (ShowMethodsCommand.DoResolve):
	Fix paste-o in help text.
	(StepCommand.DoExecute): Call ResetCurrentSourceCode so that a
	'list' command will cause listing to start from the next line.
	Also for next, nexti, stepi, finish, and continue.

2004-04-14  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs
	(TargetCommand): Renamed this to FrameCommand.
	(ProcessCommand): New abstract base class.	

2004-04-14  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/AssertCommand.cs: Removed.

2004-04-14  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Interpreter.cs (Interpreter): New abstract
	base class.  Moved most of the functionality from ScriptingContext
	here.	

	* frontends/scripting/ScriptingContext.cs (ScriptingContext): This
	is now a real "context".

2004-04-14  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Engine.cs (Engine): New public class.

	* frontends/scripting/Generator.cs: Renamed to Engine.cs

2004-04-14  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (TargetCommand): New abstract
	base class.

2004-04-14  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/: Started working on a new command line
	interface.

	* frontends/scripting/Parser.jay: Removed.
	* frontends/scripting/Tokenizer.cs: Removed.

2004-04-14  Martin Baulig  <martin@ximian.com>

	The debugger is unstable at the moment, please use the latest release. 

2004-04-13  Martin Baulig  <martin@ximian.com>

	* wrapper/wrapper.c: Don't call mono_thread_manage(), but send a
	special notification instead.  This tells the MonoThreadManager to
	deal with the main thread.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* wrapper/wrapper.c: Use the Mono I/O-layer instead of POSIX
	semaphores.	

2004-04-13  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoCSharpLanguageBackend): Don't take a `Process' argument.

	* wrapper/: We don't need the command thread anymore.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* classes/BreakpointHandle.cs (BreakpointHandle.Create): New
	internal static method; takes a Process argument to create the
	load handler.

	* classes/SourceInfo.cs (SourceMethod.RegisterLoadHandler): Added
	Process argument.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryInfo.Architecture): New property.

	* interface/IMethod.cs (IMethod.GetTrampoline): Added
	ITargetMemoryAccess argument.

	* backends/ILanguageBackend.cs (ILanguageBackend.GetTrampoline):
	Renamed to GetTrampolineAddress() and take an ITargetMemoryAccess
	instead of an Inferior.  Added ITargetMemoryAccess argument to the
	other overloaded version.

2004-04-13  Martin Baulig  <martin@ximian.com>

	Rewrote and simplified the notification code.

	* backends/Inferior.cs (Inferior.ChildEventType): Added
	`CHILD_NOTIFICATION'.  This is a special event which'll be
	returned when the runtime/JIT wants to send us a notification.

	* backends/MonoThreadManager (HandleChildEvent): We're now getting
	all events from the ThreadManager and handle notifications here.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoCSharpLanguageBackend.DaemonThreadHandler): Removed.
	(MonoCSharpLanguageBackend.Notification): New public method.
	Handle notifications here.

	* backends/server/server.h
	(mono_debugger_server_set_notification): New global function to
	tell the backend about our notification address.  Whenever a
	breakpoint at that address is hit, it's now sending a
	MESSAGE_CHILD_NOTIFICATION.

	* wrapper/wrapper.c: Majorly cleaned this up; use the new
	notification system.	

2004-04-13  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolFile.GetMethod_internal): Use the full method signature
	as method name.

	* arch/BfdDisassembler.cs (print_address_func): Put back
	trampoline support.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h (mono_debugger_server_get_target_info):
	Added `guint32 *is_bigendian'.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* arch/Bfd.cs: Get the name of the target on startup, added
	PowerPC support.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* arch/bfdglue.c (bfd_glue_get_target_name): New function.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs (Options.LoadNativeSymbolTable): Added
	`--native-symtabs' command line option.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* arch/ArchitecturePowerPC.cs: New file.

	* arch/StabsReader.cs: New file.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs
	(ITargetInfo): Added `bool IsBigEndian'.

2004-04-13  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h
	(mono_debugger_server_global_wait): Take a `guint32 *', not a
	`guint64 *'.
	(mono_debugger_server_dispatch_event): `status' is now a
	`guint32', not a `guint64'.

2004-04-10  Martin Baulig  <martin@ximian.com>

	* arch/: Imported Binutils 2.14.

2004-04-09  Martin Baulig  <martin@ximian.com>

	* backends/server/library.c: Put this back.

	* backends/server/server.h: Put the vtable back.
	(mono_debugger_server_get_target_info): Don't take a ServerHandle.
	
2004-04-09  Martin Baulig  <martin@ximian.com>

	* classes/TargetException.cs
	(TargetException): Don't make this abstract.
	(TargetMemoryException): Added parameterless .ctor.	

	* backends/Interior.cs (Inferior.GlobalStop): New public method.

	* backends/SingleStepping.cs (SingleSteppingEngine.Interrupt): Call
	GlobalStop() instead of Stop() on the inferior.

2004-04-09  Martin Baulig  <martin@ximian.com>

	* configure.in: Added private configure option and an automake
	conditional to enable some hacking features - just for me at the
	moment ...

2004-03-16  Martin Baulig  <martin@ximian.com>

	Released version 0.6 "Atlanta" of the Mono Debugger :-)

2004-03-16  Martin Baulig  <martin@ximian.com>

	* RELEASE-NOTES-0.6.txt: New file.

	* configure.in: Check whether we have NPTL support.

2004-03-05  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added "repeat" command.

2004-03-05  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs: Use method_has_source()
	everywhere and made it actually work.

	* classes/TargetAddress.cs: Committed an ugly hack to the .ctor;
	since we're currently only running on the i386, we can just throw
	the upper 32 bits away to work around some marshalling issues.

2004-03-05  Martin Baulig  <martin@ximian.com>

	* wrapper.c (compile_method): Return a guint64.

2004-03-05  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (method_has_source): New
	private method to check whether a method has source code; it's
	used to determine whether we should enter a method while doing a
	source stepping operation.

	* classes/SourceFileFactory (SourceFileFactory.Exists): New public
	method; just checks whether the file exists without opening it.

2004-03-05  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (callback_method_compiled):
	Step over it if we're performing a source stepping operation and
	the method doesn't have any source code.

2004-03-04  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (ProcessCommand): Call Step()
	for OperationType.Run and OperationType.RunInBackground.
	(Step, DoStep): Allow OperationType.Run(InBackground).

2004-03-04  Martin Baulig  <martin@ximian.com>

	* classes/Backtrace.cs (Length): Return 0 if we don't have any
	frame.

	* classes/SourceAddress.cs (ToString): Return "filename:linenum".	

2004-03-04  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-linux-ptrace.c
	(mono_debugger_server_stop_and_wait): Make this work reliably; if
	mono_debugger_server_global_wait() is running while we're being
	called, "steal" its return value and return it here.

2004-03-04  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (SendSyncCommand): Allow sync
	commands to be run from the background thread, ie. inside an event
	handler.

2004-03-04  Martin Baulig  <martin@ximian.com>

	* classes/Breakpoint.cs (BreakpointEventHandler): Added additional
	StackFrame argument.

2004-03-04  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs (DebuggerBackend.Initialize): Renamed this
	to DoInitialize() and added a static Initialize().

	* backends/SingleSteppingEngine.cs (Kill): New public method.

	* backends/server/i386-linux-ptrace.c: Protect do_wait() by a mutex.
	(_mono_debugger_server_setup_inferior): Wait until the target
	actually stopped.

2004-03-03  Martin Baulig  <martin@ximian.com>

	* backend/server/i386-ptrace.c (mono_debugger_server_initialize):
	Catch mono's thread abort signal and call pthread_exit(NULL) in it.

2004-03-03  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs (DebuggerBackend.Run): Changed return type
	to void; don't wait until the application is started.

	* backends/ThreadManager.cs (ThreadManager.StartApplication):
	Changed return type to void.
	(ThreadManager.WaitForApplication): New public method.
	(ThreadManager.ReachedMain): Fire the events here.

2004-03-03  Martin Baulig  <martin@ximian.com>

	* lib/: Removed.

	* lib/Debugger.exe.config.in: Removed.
	* lib/Interpreter.exe.config.in: Removed.

	* lib/Makefile.am: Build everything in ../wrapper/.

	* wrapper/mdb.in: Moved here from ../lib.

	* wrapper/Makefile.am: Call it mdb.exe instead of Interpreter.exe.

	* classes/ProcessStart.cs: The `mono-debugger-mini-wrapper' is now
	always in the same directory than Mono.Debugger.dll; use this to
	setup the 'Path_Mono'.

2004-03-02  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSourceMethod.IsLoaded): Call ensure_method().

	* frontends/scripting/Expression.cs (SourceExpression): Added
	support for source file and line number.

	* frontends/scripting/Parser.jay (source_expression): Added
	"STRING COLON INTEGER" syntax.

2004-03-02  Mike Kestner  <mkestner@ximian.com>

	* configure.in : expand pc.in
	* Makefile.am : install pc and dist pc.in
	* mono-debugger.pc.in: new

2004-03-02  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine (EndStackAddress): New internal field.
	(AcquireThreadLock): Return void; if we have an `EndStackAddress',
	write our esp into it.

	* backends/MonoThreadManager.cs: Added back GC support.

2004-03-02  Martin Baulig  <martin@ximian.com>

	* configure.in: Bumped version number to 0.6.  This is not a
	release, but 0.5 was the old Clemson release.

2004-03-02  Martin Baulig  <martin@ximian.com>

	* classes/SimpleBreakpoint.cs: Added simpler .ctor.

2004-01-16  Martin Baulig  <martin@ximian.com>

	* classes/BreakpointHandle.cs: The .ctors don't take a `Process'
	argument anymore; you need to call EnableBreakpoint() to actually
	enable the breakpoint.

2004-01-16  Martin Baulig  <martin@ximian.com>

	* interfaces/IMethod.cs (IMethodSource): Removed this interface;
	the abstract class `MethodSource' is identical to this interface.

	* classes/MethodSource.cs (MethodSource.MethodLookup): Removed.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Removed the
	old method lookup code.

	* lib/SymbolFileReader.cs: Removed.

2004-01-16  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Merged
	MonoSymbolFile and MonoModule.

2004-01-16  Martin Baulig  <martin@ximian.com>

	* arch/Bfd.cs: Merged with BfdModule.

	* arch/BfdModule.cs: Removed.

2004-01-16  Martin Baulig  <martin@ximian.com>

	* classes/Module.cs: Made this class abstract and merge it with
	ModuleData; modules can't be "unloaded" anymore.

	* classes/ModuleData.cs: Removed.

2004-01-16  Martin Baulig  <martin@ximian.com>

	* backends/BreakpointManager.cs (BreakpointManager.Handle):
	Removed this class; BreakpointManager now uses `Breakpoint'.

	* backends/Process.cs (Process.InsertBreakpoint): Just take a
	`Breakpoint' and a `TargetAddress'.

	* classes/Breakpoint.cs (Breakpoint.ThreadGroup): New property.
	(Breakpoint.Breaks): New method; moved here from BreakpointHandle.

	* classes/ModuleData.cs (ModuleData.EnableBreakpoint): Removed.
	(ModuleData.DisableBreakpoint): Removed.

	* classes/SimpleBreapoint.cs: Added .ctor which takes a
	BreakpointCheckHandler and a BreakpointHitHandler delegate.

2004-01-16  Martin Baulig  <martin@ximian.com>

	Merged Mono.Debugger.dll and Mono.Debugger.Backend.dll.

	* backends/classes/NativeModule.cs: Removed.

	* backends/Debugger.cs: Removed the breakpoint code from here.

	* backends/SingleSteppingEngine.cs: We can now step over
	breakpoints again.

	* classes/Breakpoint.cs (Breakpoint.Enabled): Removed this
	property.

	* classes/BreakpointHandle.cs: Reworked this class; it's now
	public and you call EnableBreakpoint() and DisableBreakpoint() on
	it to enable/disable breakpoints.

	* classes/Module.cs: Removed the breakpoint code from here.	

2004-01-15  Martin Baulig  <martin@ximian.com>

	* classes/TargetEvent.cs (TargetEventType): Added `FrameChanged'.

	* backends/SingleSteppingEngine.cs: Emit a
	TargetEventType.FrameChanged event after completing a callback.

2004-01-15  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Expression.cs (SourceExpression): The .ctor
	now just takes a VariableExpression and line number.  We try to
	resolve the expr as a method and then use the new
	ITargetFunctionType.Source to get its source.
	(VariableExpression): Added virtual `DoResolveBase' which is
	always called before any of the other `DoResolve*' methods.

2004-01-15  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFunctionType.cs (Source): New property.

2004-01-15  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend: Renamed
	`MonoSymbolTableReader' to `MonoSymbolfile'.

	* backends/mono-csharp/: We're now passing the `MonoSymbolFile'
	instead of the `MonoSymbolTable' to the types.

2004-01-15  Martin Baulig  <martin@ximian.com>

	The big rewrite and cleanup.

	The debugger now requires either Red Hat 9 or glibc 2.3.x and a
	2.6.0 kernel.	It does not work with a 2.4.x kernel except the
	one from Red Hat 9.

	* backends/Process.cs: This is now in backends again, it is a
	public (non-abstract) class and contains the "user interface" of
	the SingleSteppingEngine.

	* backends/SingleSteppingEngine.cs: This is now just the engine
	itself; we create on SingleSteppingEngine class per target thread,
	but they're all managed from the ThreadManager and we just have
	one thread in the debugger.

	* backends/ThreadManager.cs: Contains the main event loop and
	dispatches events and commands to the SingleSteppingEngines.

2003-12-29  Martin Baulig  <martin@ximian.com>

	WARNING WARNING WARNING WARNING:

	Everything newer than the Clemson release is highly experimental
	and will not work out-of-the-box.  You should not use the CVS
	version of the debugger unless you know exactly what you're doing.

2003-12-25  Martin Baulig  <martin@ximian.com>

	* backends/server/: Removed the `InferiorInfo' vtable; call the
	functions directly.

	* backends/server/library.c: Removed.

	* backends/server/i386-ptrace.c: Call functions
	`mono_debugger_server_*' and make them public.	

2003-12-15  Martin Baulig  <martin@ximian.com>

	* classes/GnuReadLine.cs: Check whether readline is supported and
	use Console.ReadLine() if not.

	* glue/Check whether readline is supported.

2003-12-15  Martin Baulig  <martin@ximian.com>

	* configure.in: Allow windows.
	(glue_cflags, server_cflags): AC_SUBST() them.

	* backends/server/i386-win32.c: Initial windows port.

2003-12-15  Martin Baulig  <martin@ximian.com>

	* arch/bfdglue.c (bfd_glue_elfi386_locate_base): This is only
	supported on Linux and FreeBSD.

2003-12-15  Martin Baulig  <martin@ximian.com>

	* backends/IInferior.cs (IInferior): Made this interface internal.
	(IInferior.RuntimeInvoke, IInferior.GetRegister): Removed; they're
	inherited from ITargetAccess.

	* backends/ILanguageBackend.cs: Made this interface internal.

	* backends/DaemonThreadRunner.cs: Made this class internal.

	* backends/Process.cs (Process.TargetOutput, DebuggerOutput,
	DebuggerError): Made these events public.

	* backends/SingleSteppingEngine.cs: Made the .ctor internal.	

2003-12-15  Martin Baulig  <martin@ximian.com>

	* classes/IOChannel.cs (Spawn): Removed this obsolete class.

	* glue/iochannel.c (mono_debugger_glue_kill_process): Removed.

2003-12-15  Martin Baulig  <martin@ximian.com>

	* backends/IInferior.cs (IInferior): Added properties for the
	signal numbers.

	* backends/ptrace/PTrace.cs: We're now getting the signal numbers
	in a `SignalInfo' structure from the inferior; the corresponding
	properties are no longer static.

2003-12-15  Martin Baulig  <martin@ximian.com>

	* backends/server/: Did some API cleanups; separate
	architecture-specific code a bit more.

	* backends/server/i386-arch.c (ArchInfo): New struct; store all
	architecture-specific stuff here.

2003-12-09  Martin Baulig  <martin@ximian.com>

	Released version 0.5 "Clemson" of the Mono Debugger :-)

2003-11-06  Martin Baulig  <martin@ximian.com>

	* configure.in: Completely disable the GUI for the moment.

2003-09-13  Martin Baulig  <martin@ximian.com>

	* arch/ArchitectureI386.cs (ArchitectureI386.UnwindStack): Use
	`(long) (uint)' instead of just `(long)' to make this work for
	registers having "negative" values (0xbfffffec for instance).

	* frontends/scripting/ScriptingContext.cs
	(FrameHandle.PrintVariable): Format this nicely.

2003-09-08  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/: When invoking a method with the `call'
	command, debug the invoked method.  See the NEWS file for details.

	* backends/IInferior.cs (IInferior.CallInvokeMethod): Removed.
	(IInferior.RuntimeInvoke): New method; there are two overloaded
	versions: one is similar to the old CallInvokeMethod() and the
	other one allows us to debug the invoked method.

	* backends/ILanguageBackends.cs
	(ILanguageBackend.RuntimeInvokeFunc): New property.
	(ILanguageBackend.CompileMethod): New method.

	* backends/SingleSteppingEngine.cs
	(SingleSteppingEngine.CallInvokeMethod): Renamed to RuntimeInvoke().
	(SingleSteppingEngine.RuntimeInvoke): Added overloaded version
	which allows us to debug the invoked function.

	* interfaces/ITargetFunctionObject.cs
	(ITargetFunctionObject.Invoke): Added `bool debug' argument; if
	true, debug the invoked method.

	* interfaces/ITargetFunctionType.cs
	(ITargetFunctionType.Invoke): Added `bool debug' argument; if
	true, debug the invoked method.

2003-09-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetStructType.cs
	(ITargetStructType.Constructors): New property.
	(ITargetStructType.GetConstructor): New method.

	* frontends/scripting/Parser.jay (variable_expression): Added `new
	type (args)' syntax to invoke a constructor.

2003-08-12  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (StackFrame.GetRegister): Removed.
	(StackFrame.GetRegisterLocation): New public method.

	* backends/native/NativeLanguage.cs: The .ctor now takes an
	ITargetInfo because NativePointerType needs the target address
	size.

	* backends/native/NativePointerType.cs: Always set the correct
	size.

	* frontends/scripting/VariableExpression.cs
	(RegisterExpression.ResolveLocation): New public method.  This is
	used when resolving an `x %eax'.

2003-08-11  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Use a colon instead of a dot to
	separate a type name and its static member.  This deambiguates the
	grammar and also allows things like
	'print System.DateTime:MinValue.Ticks'.

2003-08-11  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/ScriptingContext.cs
	(ScriptingContext.Print): Don't call String.Format() on already
	formatted strings; this'll cause problems if the string contains
	any '{' or '}'s.

2003-08-11  Martin Baulig  <martin@ximian.com>

	* backends/IInferior.cs (IInferior.CallMethod): This method now
	takes two `long' arguments.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolTable.LookupType): Call `mono_debugger_lookup_type ()'
	in the JIT to do the actual lookup.

2003-08-07  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguage.cs (ILanguage.LookupType): New method.

	* interfaces/ITargetStructType.cs
	(ITargetMemberInfo): New public interface.
	(ITargetFieldInfo, ITargetPropertyInfo, ITargetMethodInfo): Derive
	from ITargetMemberInfo.

	* frontends/scripting/Parser.jay: Added `Type.StaticField',
	`Type.StaticProperty' and `Type.StaticFunc (args)' syntax to
	access static members of a type without an instance.

2003-08-06  Martin Baulig  <martin@ximian.com>

	* backends/mono-cshap/MonoClass.cs: Added support for static
	fields, properties and methods.

	* interfaces/ITargetMemoryAccess.cs (ITargetAccess.CallMethod):
	Added new overloaded version of this method.

	* interfaces/ITargetStructType.cs (ITargetStructType): Added
	StaticFields, StaticProperties and StaticMethods properties and
	GetStaticField(), GetStaticProperty() and GetStaticMethod()
	methods.

2003-08-06  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoStringType.cs: We don't get the vtable
	from the JIT anymore; instead we call mono_string_new_wrapper()
	via a special wrapper method to make this work for multiple
	application domains.

2003-08-04  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/*.cs: Completely reworked the type support.
	We're now just creating one single `MonoType' instance per type;
	arrays, strings and enums now also derive from MonoClass which
	allows us to access the System.Array, System.String and
	System.Enum members.

2003-07-28  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Tokenizer.cs: Allow identifiers to be quoted
	in apostrophs (').

	* frontends/scripting/VariableExpression.cs
	(StructAccessExpression): Do a simple overload resolution for methods.

2003-07-22  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoClass.cs: New class.  This is now used
	for class and value types and also for fundamental types; it
	allows us to call things like `Substring(int)' on a string.

	* backends/mono-csharp/MonoStructType.cs: Moved most of this class
	into MonoClass.

	* backends/mono-csharp/MonoFundamentalType.cs: Derive from
	MonoStructType since a fundamental type is also a valuetype.

2003-07-20  Martin Baulig  <martin@ximian.com>

	Largely improved the type support.  We can now invoke methods with
	arguments and also modify variables.

	* classes/TargetBinaryWriter.cs: New class.

	* interfaces/ITargetFunctionObject.cs (Invoke): The method now
	takes a `object[] args' argument.

	* backends/mono-csharp/*.cs: Improved this a lot; the JIT is now
	providing us with better type information and explicitly tells us
	about builtin types; added support to call methods with arguments;
	it's now possible to modify variables.

2003-07-12  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoStructType.cs: We can now call a
	property's getter function.

2003-07-12  Martin Baulig  <martin@ximian.com>

	Started to added support for calling methods in the target.

	* classes/TargetLocation.cs (TargetMemoryAccess): Renamed to
	TargetAccess and changed type to ITargetAccess.
	* classes/StackFrame.cs: Likewise.

	* classes/RelativeTargetLocation.cs: Made this public.

	* interfaces/ITargetFunctionType.cs (HasReturnValue): New
	property.

	* interfaces/ITargetMemoryAccess.cs
	(ITargetAccess.CallInvokeMethod): New method.

	* interfaces/ITargetStructObject.cs
	(ITargetStructObject.GetMethod): New method.
	(ITargetStructObject.InvokeMethod): Removed.

	* frontends/scripting/Parser.jay: Added `!!' expression which is
	the last VariableExpression which was printed, ie. you can say
	`print !!' to see the last expression again.
	Added '$foo.method ()' syntax to invoke that method.

2003-07-11  Martin Baulig  <martin@ximian.com>

	Added support to modify variables of fundamental types.

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryAccess.WriteBuffer): We don't need a `size' argument
	here since we can just use the buffer's length.

	* interfaces/ITargetFundamentalObject.cs
	(ITargetFundamentalObject.Object): Added setter to this property.

	* frontends/scripting/Parser.jay: Added a `set $variable =
	<expression>' command to modify variables.

2003-07-10  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h (StackFrame): Replaced the
	`locals_address' and `params_address' fields with `frame_address'.

	* backends/ptrace/PTrace.cs (PTraceInferior.StackFrame): Added
	`FrameAddress' field.  We need to keep this structure in sync with
	StackFrame in server.h.

	* arch/ArchitectureI386.cs (UnwindStack): Registers are stored as
	`long's, not as `uint's.

2003-07-05  Martin Baulig  <martin@ximian.com>

	* arch/bfd/elf32-target.h, peigen.c, targmatch.h: Include these
	generated files in CVS and don't rebuild them.

2003-07-05  Martin Baulig  <martin@ximian.com>

	* interfaces/IProcess.cs (GetBacktrace): Added overloaded version
	which takes an `int max_frames' argument.

	* frontends/scripting/Parsing.jay: The `bt' command now takes an
	optional integer argument which is the maximum number of frames to
	include in the backtrace.

2003-07-05  Martin Baulig  <martin@ximian.com>

	Released version 0.4 "New York City" of the Mono Debugger :-)

2003-07-04  Martin Baulig  <martin@ximian.com>

	* backends/DaemonThreadRunner.cs: Rewrote this to use the
	SingleSteppingEngine.  This allows us to debug daemon threads if
	they ever crash.

	* backends/Process.cs: Don't give daemon processes negative IDs.

	* frontends/scripting/ScriptingContext.cs: Don't hide daemon processes.

2003-06-30  Martin Baulig  <martin@ximian.com>

	* arch/bfd: Imported from binutils 2.13.2.
	* arch/libiberty: Likewise.

	* arch/Makefile.am: We now build a minimal libbfd here and include
	it in the libmonodebuggerbfdglue.la.

2003-06-23  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFunctionType.cs: New class.
	* interfaces/ITargetFunctionObject.cs: New class.

	* interfaces/TargetObjectKind: Added `function'.

	* arch/DwarfReader.cs: More work on native type support.

2003-06-23  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs: Improved native type support.

	* backends/native/NativeOpaqueObject.cs: New class.
	* backends/native/NativePointerObject.cs: New class.
	* backends/native/NativePointerType.cs: New class.
	* backends/native/NativeStructObject.cs: New class.
	* backends/native/NativeStructType.cs: New class.

	* frontends/scripting/Parser.jay: Added `$foo->test' syntax; allow
	`*($foo.test)' syntax.

	* frontends/scripting/Tokenizer.cs: Don't allow dots in identifiers.

2003-06-22  Martin Baulig  <martin@ximian.com>

	* backends/native/NativeStringType.cs: Derive from
	NativeFundamentalType.

	* backends/native/NativeStringObject.cs: Derive from
	NativeFundamentalObject.

2003-06-21  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetType.cs (GetObject): New method.

	* interfaces/ILanguage.cs: New public interface.

	* classes/Module.cs: Renamed `Language' to `LanguageBackend' and
	added new `Language' property to return the ILanguage.

	* classes/StackFrame (Language): New public property.
	(GetRegister): Added overloaded version which takes the register
	index and an offset and returns a ITargetObject.

	* interfaces/ITargetObject.cs (Location): New property.
	(Print): New function.  Returns a stringified representation of
	the object - suitable to be displayed to the user.

	* interfaces/ITargetPointerObject.cs
	(HasAddress, Address): New properties.

	* interfaces/ITargetType.cs (GetObject): Made this method part of
	the interface.

	* interfaces/TargetObjectKind.cs: Added `Opaque'.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolTable): Implement ILanguage.

	* backends/mono-csharp/MonoOpaqueObject.cs: Don't implement
	ITargetPointerObject. Opaque objects are opaque and no pointers.
	* backends/mono-csharp/MonoOpaqueType.cs: Likewise.

	* frontends/scripting/VariableExpression.cs (RegisterExpression):
	Made this a VariableExpression.

	* frontends/scripting/Parser.jay: Added an `examine' command to
	examine memory.  Syntax like gdb's `x' command.

2003-06-21  Martin Baulig  <martin@ximian.com>

	* classes/TargetLocation.cs: Moved here from
	backends/classes/MonoTargetLocation.cs.

	* classes/RelativeTargetLocation.cs: Moved here from
	backends/classes/MonoRelativeTargetLocation.cs.

	* classes/AbsoluteTargetLocation.cs: New public class.

2003-06-20  Martin Baulig  <martin@ximian.com>

	* doc/debugger.sxi: Added the slides from the GUADEC talk.

2003-06-20  Martin Baulig  <martin@ximian.com>

	* interfaces/IArchitecture.cs
	(GetBreakpointTrampolineData): Removed.
	(IsRetInstruction): Added ITargetMemoryAccess argument.
	(GetCallTarget, GetTrampoline): Added ITargetAccess argument.

	* arch/ArchitectureI386.cs: The .ctor doesn't take an
	ITargetAccess argument anymore.  This allows us to use the
	IArchitecture in all threads, not just in the IInferior one.

	* interfaces/IMethod.cs (GetTrampoline): Changed return type from
	TargetAddress to SourceMethod; don't trigger a JIT compilation
	here.

	* backends/ILanguageBackend.cs (GetTrampoline): Added overloaded
	version which takes a TargetAddress and returns a SourceMethod.
	This version doesn't trigger a JIT compilation can may be called
	from all threads.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolTable): Added AddImage() and GetImage() methods to get
	a MonoSymbolTableReader from the TargetAddress of a `MonoImage *'.
	(MonoSymbolTableReader): Implement ISimpleSymbolTable.

2003-06-20  Martin Baulig  <martin@ximian.com>

	* wrapper/wrapper.c, wrapper/thread-manager.c: Don't declare
	variables as volatile which are not actually modified by the
	debugger.

2003-06-14  Martin Baulig  <martin@ximian.com>

	* backends/IInferior.cs (IInferiorStackFrame): Removed the
	`LocalsAddress' and `ParamsAddress' properties.
	* classes/StackFrame.cs: Likewise.

	* backends/classes/MonoRegisterLocation.cs: Removed.
	* backends/classes/MonoStackLocation.cs: Removed.

	* backends/classes/MonoVariableLocatin.cs: This is now used for all
	variables, no matter whether they're stored on the stack or in a
	register.  The JIT just distinguishes between variables which are
	stored in a register and variables which are at an offset from a
	register.  This base register can be %ebp or any other register.

2003-06-13  Martin Baulig  <martin@ximian.com>

	* wrapper/wrapper.c: Use POSIX semaphores instead of the mono
	io-layer.  For some reason, using the mono io-layer doesn't work
	on all systems.

2003-06-10  Martin Baulig  <martin@ximian.com>

	* arch/opcodes/: Imported from binutils 2.13.2.

	* configure.in: Don't require libopcodes and dis-asm.h, but use
	the included libopcodes.  Note that we still need libbfd for this.

2003-06-08  Martin Baulig  <martin@ximian.com>

	* frontends/gui/SourceView.cs: Made the context menu actually work.

2003-06-08  Martin Baulig  <martin@ximian.com>

	* frontends/gui/GotoLineDialog.cs: New dialog for "Edit / Goto Line".

2003-05-08  Martin Baulig  <martin@ximian.com>

	* arch/bfdglue.c (bfd_glue_openr): New function.  We need to
	g_strdup() the arguments since bfd_openr() takes their ownership,
	but the P/Invoke wrapper would free it.

2003-05-08  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/CSharpMethod.cs: Suppress duplicate line
	numbers.

	* classes/MethodSource.cs: Re-enable the ObjectCache.

2003-05-04  Martin Baulig  <martin@ximian.com>

	* wrapper/mini-main.c: Always use MONO_OPT_SHARED.

2003-05-04  Martin Baulig  <martin@ximian.com>

	* configure.in: Dropped support for the old JIT, alwasy use Mini.

	* wrapper/main.c: Removed.

2003-04-27  Martin Baulig  <martin@ximian.com>

	Reworked the breakpoint code; we're now getting a callback from
	the JIT when a method containing a breakpoint is JITed instead of
	using the breakpoint trampoline.

	* backends/ILanguageBackend.cs (BreakpointHit): Removed.

	* backends/Debugger.cs (BreakpointHit): Removed.

	* classes/ModuleData.cs (EnableBreakpoint, DisableBreakpoint):
	Removed the ThreadGroup argument.

	* classes/BreakpointManager.cs
	(BreakpointManager.Handle): New public class.
	(InsertBreakpoint, RemoveBreakpoint, LookupBreakpoint): New public
	methods; this class is now responsible for actually inserting all
	breakpoints.

2003-04-22  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoSymbolFileTable.Reload): Don't load any referenced assemblies
	here; we already get a notification from the metadata library when
	it's loading them.

2003-04-21  Martin Baulig  <martin@ximian.com>

	Use a new libzvt based terminal widget to display the target's
	output instead of the old Gtk.TextView based one.

	* configure.in: Require libzvt-2.0.

	* widgets/sources/debuggerwidgets/debuggerterminal.[ch]: New
	files.  This is a new terminal widget using libzvt.

	* widgets/Mono.Debugger.GUI.metadata: New file.

	* frontends/gui/OutputWindow.cs: Use the new DebuggerTerminal widget.

2003-04-21  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs (Quit): Removed.

	* frontends/scripting/ScriptingContext.cs (process_events):
	Removed, we don't need to run the glib main loop anymore to get
	the target's output.
	(PrintInferior): Call Write(), not WriteLine().

	* backends/server/i386-ptrace.c (server_ptrace_spawn): Use two
	socketpairs for the target's stdout/stderr and set them to O_ASYNC
	to receive a SIGIO when output becomes available.

	* backends/server/i386-linux-ptrace.c (do_wait): Use sigwait() to
	wait for events from the target; handle I/O.

	* backends/server/library.c (mono_debugger_server_initialize):
	Block the signals in all threads, just unblock them in sigwait()
	which is called from do_wait().

2003-04-17  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MethodAddress.ctor): Use the first and last source line as
	MethodStartAddress and MethodEndAddress, not the prolog/epilog
	data from the JIT.

	* backends/SingleSteppingEngine.cs (get_step_frame): Return a
	StepMode.SingleInstruction frame if we don't have source code, not
	just null.  This is required to handle JIT trampolines correctly
	in a managed method for which we don't have source code.

	* arch/ArchitectureI386.cs (GetCallTarget): Added support for the
	`0xff 0x10' opcodes (call *(%eax)).

2003-04-16  Martin Baulig  <martin@ximian.com>

	* frontends/gui/Parser.jay: Added `run' command to restart an
	application after it exited.

2003-04-16  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs: Moved to ../backends/.

	* backends/ProcessStart.cs (ProcessStart): Make this abstract.
	(ProcessStart.Create): Take a `DebuggerOptions options' and a
	`string[] args' argument; parse the arguments here.

	* frontends/scripting/DebuggerOptions.cs: This is now part of
	../backends/ProcessStart.cs.

2003-04-15  Martin Baulig  <martin@ximian.com>

	* backends/BreakpointManager.cs: Correctly implement Dispose().

	* backends/ThreadManager.cs (Dispose): Also kill the main process.

	* backends/Process.cs (child_exited): Call Dispose().

	* backends/DaemonThreadRunner.cs, SingleSteppingEngine.cs (Dispose):
	Don't dispose the inferior here; this needs to be done by the
	daemon thread itself to avoid a race condition.

2003-04-13  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (ObjectInvalidHandler): New delegate.
	(StackFrameHandler, StackFrameInvalidHandler): Removed.
	(StackFrame.FrameInvalid): Renamed to FrameInvalidEvent and use
	the new ObjectInvalidHandler.

	* classes/Backtrace.cs (BacktraceInvalidHandler): Removed, use
	ObjectInvalidHandler instead.

	* classes/TargetEvent.cs: New public class.  We're now sending a
	single `TargetEvent' instead of the FrameChanged, FrameInvalid,
	MethodChanged, MethodInvalid and StateChanged events.

	* backends/SingleSteppingEngine.cs: Send a single TargetEvent
	instead of the FrameChanged, FrameInvalid, MethodChanged,
	MethodInvalid and StateChanged events.  This makes things a lot
	easier for the gui.

	* frontends/gui/DebuggerWidget.cs, DebuggerManager.cs: Reflect
	latest SingleSteppingEngine changes.  Things are now a lot easier
	here since we're just listening to one single event.

2003-04-13  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetObject.cs (ObjectInvalidHandler): Removed.

2003-04-12  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (TargetExitedEvent): New event.
	(Kill): Just call Dispose() here, this does everything for us.

	* backends/ThreadManager.cs (Kill): New public method.  The is the
	recommended API to kill the application being debugged.

	* backends/DaemonThreadRunner.cs, Debugger.cs, Process.cs,
	SingleSteppingEngine.cs, ThreadManager.cs (Dispose): Make this
	thread-safe.

	* frontends/scripting/Parser.jay: Make the `kill' command kill the
	whole application, not just one process.

2003-04-10  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetNotification.cs
	(TargetOutputHandler): Added `bool is_stderr' argument.
	(DebuggerOutputHandler): New public delegate.
	(TargetOutput, TargetError, DebuggerOutput, DebuggerError):
	Removed these events.

	* backends/ThreadManager.cs
	(TargetOutput): Renamed to `TargetOutputEvent'.
	(TargetError): Removed; we're now using one event for TargetOutput
	and TargetError.
	(TargetOutputEvent): Listen to this event to get the target's
	stdout and stderr.
	(DebuggerOutputEvent, DebuggerErrorEvent): New public events.

2003-04-10  Martin Baulig  <martin@ximian.com>

	* backends/server/library.c (mono_debugger_server_spawn): Return
	the error message as string, not as GError.

	* backends/ptrace/PTrace.cs (Run): Include the actual error
	message from the target in the CannotStartTargetException.

	* backends/SingleSteppingEngine.cs: Catch the exception we get if
	we cannot start / attach to the target and pass it to the caller.

2003-04-10  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoVariable.cs: Use correct scope info for
	parameters.

2003-04-10  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs (TargetOuput, TargetError): New public
	events; use them to get the target's stdout and stderr instead of
	the events in Process.

2003-04-10  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Don't make the "About" dialog
	modal.	

2003-04-07  Martin Baulig  <martin@ximian.com>

	* frontends/gui/ProgramToDebug.cs: Added a Gtk.Entry to specify the
	JIT optimizations.  See `mini --help' for a list of optimization
	options  [FIXME: we should add a real GUI element for this].

2003-04-07  Martin Baulig  <martin@ximian.com>

	* configure.in: Require mono and mini for the moment.

	* wrapper/Makefile.am: Build a `mono-debugger-jit-wrapper' for the
	old JIT and a `mono-debugger-mini-wrapper' for the new one.

	* wrapper/mini-main.c: New file.  This is the main.c for Mini.

	* lib/Makefile.am: Make `mono-debugger-mini-wrapper' the default;
	we're now using the new JIT in the debugger.

2003-04-07  Martin Baulig  <martin@ximian.com>

	Released version 0.3 "The White Mountains" of the Mono Debugger :-)

2003-04-06  Martin Baulig  <martin@ximian.com>

	* README.build: New file.  Please read it before compiling the
	debugger.

	* RELEASE-NOTES-0.3.txt: New file.

2003-04-05  Martin Baulig  <martin@ximian.com>

	* wrapper/thread-manager.c: Reflect latest libgc API changes.

2003-03-31  Martin Baulig  <martin@ximian.com>

	* wrapper/mono-debugger-jit-wrapper.h (MonoDebuggerThread): New
	type.  We create an instance of this type for each thread.

	* backends/ThreadManager.cs (AcquireGlobalThreadLock): Write the
	stopped thread's stack pointers into the corresponding
	MonoDebuggerThread structure so they can be accessed from the
	unmanaged code.
	
	* backends/SingleSteppingEngine.cs (AcquireThreadLock): Return the
	stopped thread's registers.

2003-03-31  Martin Baulig  <martin@ximian.com>

	* configure.in: Require the new libgc.

2003-03-30  Martin Baulig  <martin@ximian.com>

	* wrapper/thread-manager.c
	(mono_debugger_thread_manager_acquire_global_thread_lock): New
	function.  Calls ThreadManager.AcquireGlobalThreadLock() via a
	callback function.
	(mono_debugger_thread_manager_release_global_thread_lock): Release
	the lock again.

	* wrapper/icall.c
	(Mono.Debugger.Callbacks.ThreadManager::AcquireGlobalThreadLock):
	New interncalls; this is just to test the thread lock until we
	hooked it into boehm.

2003-03-30  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs (mono_thread_manager): Fixed a bug to
	make this actually work; don't insert a breakpoint, but pass the
	stop address to SingleSteppingEngine.Continue() and then wait
	until it has stopped again.

2003-03-30  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs: Run the BreakpointHitHandler()
	from the ready_event_handler() because it should be run after the
	target state has changed to TargetState.STOPPED and the
	corresponding notification has been sent.

2003-03-28  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs (SignalHandler): Ignore SIGPWR and
	SIGXCPU since they're used by the garbage collector.

2003-03-28  Martin Baulig  <martin@ximian.com>

	* arch/Bfd.cs: Read the dynamic symbol table and make it available
	via the ISimpleSymbolTable.  This finally gives us function names
	from shared libraries in backtraces.

2003-03-28  Martin Baulig  <martin@ximian.com>

	Use a special ISimpleSymbolTable to lookup function names in
	backtraces.  This simple symbol table may also be available if
	there's no debugging info for a module.

	* interfaces/ISymbolTable.cs
	(ISymbolLookup): Removed SimpleLookup().
	(ISimpleSymbolTable): New public interface.

	* interfaces/IDisassembler.cs (SymbolTable): Return an
	ISimpleSymbolTable, not an ISymbolTable.

	* classes/SymbolTableManager.cs (SymbolTableHandler): Added
	ISimpleSymbolTable argument to this delegate.
	(SimpleSymbolTable): New public property.

	* classes/SimpleSymbolTableCollection.cs: New public class.

	* classes/ModuleData.cs (SimpleSymbolTable): New public property.

	* classes/Module.cs (SimpleSymbolTable): New public property.

	* clases/MethodBase.cs (SimpleLookup): Removed.

2003-03-28  Martin Baulig  <martin@ximian.com>

	* arch/BfdModule.cs (SymbolsLoaded): Always return true since we
	always have at least the simple symbol table.  This is necessary
	to get function names for functions in shared libraries without
	debugging info.

2003-03-28  Martin Baulig  <martin@ximian.com>

	* wrapper/main.c: Call mono_config_parse() and mono_set_rootdir().

2003-03-25  Martin Baulig  <martin@ximian.com>

	* frontends/gui/SourceList.cs (InsertBreakpoint): Implemented.

2003-03-25  Martin Baulig  <martin@ximian.com>

	* frontends/gui/debugger.glade: Splitted locals and params display.

	* frontends/gui/VariableDisplay.cs: Started to fix this.

2003-03-25  Martin Baulig  <martin@ximian.com>

	* frontends/gui/SourceManager.cs: Use a single SourceList for all
	source files.

	* frontends/gui/SourceList.cs: Added "Duplicate View" item to the
	context menu to create another view of this source file.

2003-03-24  Martin Baulig  <martin@ximian.com>

	* frontends/gui/SourceManager.cs (CreateSourceView): Pass the full
	pathname to the SourceList's .ctor.

	* frontends/gui/SourceList.cs: We need to use the full pathname
	when searching a breakpoint location

2003-03-24  Martin Baulig  <martin@ximian.com>

	* frontends/gui/debugger.glade: Disable the popup menu in the
	code-browser-notebook.

	* frontends/gui/SourceList.cs: Embed the setting of the contents
	in BeginNotUndoableAction()/EndNotUndoableAction().	

	* frontends/gui/ProgramToDebug.cs: Don't make the dialog modal and
	don't use Dialog.Run().

2003-03-23  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/DebuggerOptions.cs (--jit-optimizations):
	New command line argument to specify the optimization flags for
	the new JIT.  This is the same than the --optimize argument of the
	new JIT.

	* wrapper/main.c (main): The second command line argument now
	contains the optimization flags.

2003-03-23  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs (SetupEnvironment): Pass all environment
	variables to the target.

2003-03-23  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs (CommandLine): New public property.

	* frontends/gui/DebuggerGUI.cs (StartProgram): Use just the name
	of the managed application, not the full command line including
	the wrapper in the title.

2003-03-22  Martin Baulig  <martin@ximian.com>

	* classes/ProcessStart.cs: Moved here from ../backends/.

	* backends/ProcessStart.cs: Moved to ../classes/.

	* frontends/scripting/DebuggerOptions.cs: New file.  Moved
	`MyOptions' from ScriptingContext.cs here, renamed it to
	DebuggerOptions and made it public.  This class handles the
	parsing of the command line arguments.

	* frontends/scripting/ScriptingContext.cs
	(ScriptingContext..ctor): Added DebuggerOptions argument.
	(ScriptingContext.Start): Return the ProcessStart, don't call Run().
	(ScriptingContext.ParseArguments): Removed.
	(ScriptingContext.Run): Call Initialize() here.

	* frontends/gui/DebuggerGUI.cs: Use the new DebuggerOptions class
	to parse the command line arguments.

2003-03-22  Martin Baulig  <martin@ximian.com>

	* doc/guadec-abstract.txt: Added the abstract of my GUADEC talk.

2003-03-22  Martin Baulig  <martin@ximian.com>

	* interfaces/IVariable.cs (IsValid): Renamed to CheckValid() and
	added IsAlive().

	* backends/mono-csharp/MonoVariable.cs: Only use scope and
	liveness info if we actually have it.

	* backends/mono-csharp/MonoType.cs (CheckValid): New method.
	Checks whether the location is actually valid.

	* backends/mono-csharp/MonoTargetLocation.cs (Address): Return
	TargetAddress.Null on error; don't attempt to dereference null
	pointers, just return TargetAddress.Null.

2003-03-21  Martin Baulig  <martin@ximian.com>

	* doc/FAQ.txt: Updated documentation about JIT trampolines and
	debugging interncalls.

2003-03-21  Martin Baulig  <martin@ximian.com>

	* classes/Module.cs (HasDebuggingInfo): New public property.

	* frontends/scripting/ScriptingContext.cs (ShowModules): Ignore
	modules without debugging info.

2003-03-21  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (StepNativeInstruction):
	New public method.  Steps one machine instruction and always
	enters all method calls, including trampolines.

	* frontends/scripting/Parser.jay: Added `native stepi' command
	for it.

2003-03-16  Martin Baulig  <martin@ximian.com>

	* interfaces/IMethod.cs (GetTrampoline): New method.

	* interfaces/IDisassembler.cs (DisassembleInstruction): Added
	`IMethod method' argument.

	* classes/AssemblerMethod.cs: The BfdDisassembler now calls the
	.ctor with an array of AssemblerLine's.

	* arch/Bfd.cs: Added support for ELF jump tables.

	* arch/BfdModule.cs (Language): Return the Bfd, which now
	implements ILanguageBackend.

	* backends/ILanguageBackend.cs (Modules): Removed this property.

	* backends/Process.cs (DisassembleInstruction): Removed.

2003-03-16  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs: Fixed a bug to make shared libraries work
	again.

2003-03-14  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (Locals): New public property.  Returns
	just the locals which are actually accessible at the current
	location.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Actually use
	the scope information from the symbol file.

2003-03-13  Martin Baulig  <martin@ximian.com>

	* test/TestLexicalScopes.cs: New tests.  The debugger should only
	display one variable called `a' at a time.

2003-03-12  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerManager.cs: New file.  Do all this event
	notification stuff here instead of doing it on a per-widget level
	in DebuggerWidget.

2003-03-12  Martin Baulig  <martin@ximian.com>

	* frontends/gui/ProcessManager.cs: Removed, this was way too immature.

	* frontends/gui/LineDebugStatusbar.cs: Removed.

2003-03-12  Martin Baulig  <martin@ximian.com>

	* frontends/gui/FileOpenDialog.cs: New file.  This is a customized
	Gtk.FileSelection which has a list of all source files.

2003-03-11  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Implemented "File / Open".

2003-03-11  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/SourceManager.cs: The text in the source
	buffer must always be terminated with a newline.

2003-03-11  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (do_next): Step one instruction
	unless this is actually a call.

2003-03-11  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Use Log.PrintTraceLogFunction for
	glib and gtk+ to get backtraces.

2003-03-11  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs (FindLocation): New convenience function.
	Walks the module list and calls FindLocation() on all modules
	until finding a match - or returns null.

	* frontends/scripting/ScriptingContext.cs (FindLocation): Call
	DebuggerBackend.FindLocation() and throw the ScriptingException if
	needed.

	* frontends/gui/SourceManager.cs: Use
	DebuggerBackend.FindLocation, not ScriptingContext.FindLocation.

	* frontends/gui/DebuggerGUI.cs (Context): Removed this property.

2003-03-10  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/SourceList.cs: Generate an informational message

2003-03-10  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine: When debugging managed code,
	don't step into methods without debugging info.

2003-03-10  Martin Baulig  <martin@ximian.com>

	* classes/SourceInfo.cs (SourceFile.Name): New property.

	* classes/MethodSource.cs (IMethodSource.Name): Return the
	SourceFile.Name, not the SourceFile.FileName.

2003-03-09  Martin Baulig  <martin@ximian.com>

	* frontends/gui/: Added .ctors which take the glade name instead
	of a widget.

2003-03-09  Martin Baulig  <martin@ximian.com>

	* frontends/gui/: Added "File / Open" menu item to open a source
	view.  Not yet implemented, though.

2003-03-09  Martin Baulig  <martin@ximian.com>

	* test/TestSourceView.cs: Small test app for the Gtk.SourceView.

2003-03-09  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/Interpreter.cs (ProcessCommand): Repeat
	the last command when called with an empty string.

2003-03-09  Martin Baulig  <martin@ximian.com>

	* backends/ProcessStart.cs
	(Path_Mono, Environment_Path, Environment_LibPath): Made them
	static and writable.

	* frontends/scripting/ScriptingContext.cs (--jit-wrapper): New
	command line argument to override the ProcessStart.Path_Mono.

2003-03-09  Martin Baulig  <martin@ximian.com>

	* configure.in: Set version number to 0.2.3.  The next release
	will be 0.3 "White Montains".

2003-03-09  Martin Baulig  <martin@ximian.com>

	Released version 0.2.2 "Cambridge" of the Mono Debugger :-)

2003-03-07  Martin Baulig  <martin@ximian.com>

	* configure.in: Check whether we're compiling from CVS and only
	check for gapi_codegen.exe if we do so.

	* widgets/generator/Makefile.am (USE_GAPI_CODEGEN): New automake
	conditional; don't rebuild if it's false.

2003-03-07  Martin Baulig  <martin@ximian.com>

	* configure.in: Set version number to 0.2.2.

2003-03-05  Martin Baulig  <martin@ximian.com>

	* wrapper/wrapper.c: This file was formerly known as main.c.

	* wrapper/main.c: Moved everything but a very simple main()
	function into wrapper.c.

	* Makefile.am: Create a static libmonodebuggerwrapper.a library
	containing everything but the main().

2003-03-04  Martin Baulig  <martin@ximian.com>

	* widgets/generator/Makefile.am: Only rebuild things if we're in
	maintainer mode.

	* widgets/*/generated/: Include the generated files in the
	distribution since we aren't rebuilding them in the tarballs.
	
2003-03-04  Martin Baulig  <martin@ximian.com>

	* configure.in: Improved the gtk# check; actually check for
	gapi_codegen.exe and don't build the GUI if we can't find gtk#.

2003-03-04  Martin Baulig  <martin@ximian.com>

	* RELEASE-NOTES-0.2.2.txt: New file.  This is more or less a copy
	of the RELEASE-NOTES-0.2.0.txt.

	* NEWS: Added a few news entries.

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Generator.cs (Generator.PrintHelp): New
	method.  Takes whatever the user entered after the `help' command
	as a string and prints the help.

	* frontends/scriptings/Tokenizer.cs (token): If we encounter a
	Token.HELP, consume the rest of the line and pass it to
	Generator.PrintHelp().

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Generator.cs: New file.

	* frontends/scripting/Command.cs: Added a [Command] attribute to
	all commands.

	* frontends/scripting/Expression.cs: Added an [Expression]
	attribute to all expressions.

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (HelpCommand): Removed.

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay (command): Splitted into
	`generated_command', `other_command' and `assert_command' and
	removed the "help" command.

	* frontends/scripting/Expression.cs
	(ProgramArgumentsExpression): New expression.

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Expression.cs
	(BreakpointNumberExpression): New expression.

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Expression.cs
	(ModuleOperationListExpression): New expression.

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Expression.cs
	(ModuleListExpression, SourceListExpression, ProcessListExpression):
	New expressions.

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (StepCommand): Use a separate
	class for the individual stepping commands.

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/ScriptingContext.cs
	(FrameHandle, BacktraceHandle): New public classes.

	* frontends/scripting/Expression.cs
	(FrameExpression): New expression.

	* frontends/scripting/Parser.jay: Use the new FrameExpression
	instead of a ProcessExpression and a frame number.

2003-03-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs: Moved some stuff into the
	following three new files.

	* frontends/scripting/Expression.cs: New file.
	* frontends/scripting/VariableExpression.cs: New file.
	* frontends/scripting/AssertCommand.cs: New file.

2003-03-01  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/ScriptingContext.cs: Automatically run newly
	created threads in the background.

2003-03-01  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs: Ignore line numbers from other source files
	(macros or #include'd files, for instance).

2003-03-01  Martin Baulig  <martin@ximian.com>

	* classes/SourceFileFactory.cs: Cache the file contents in an
	ObjectCache.

	* backends/Debugger.cs (SourceFileFactory): New public property.

	* interfaces/IMethod.cs (IMethodSource.SourceBuffer): Always
	return the method contents here, also when the method belongs to
	an actual source file.	

2003-02-27  Martin Baulig  <martin@ximian.com>

	* frontends/gui/SourceManager.cs (GetSourceView): Use the
	SourceFile / ISourceBuffer as hash key, not the IMethodSource.

2003-02-27  Martin Baulig  <martin@ximian.com>

	* backends/server/server.h (CommandError): Cleaned this up.

	* backends/ptrace/PTrace.cs: Throw a TargetMemoryException if
	reading from the target's memory failed.

	* classes/TargetException.cs (LocationInvalidException): Added
	.ctor which takes a TargetException.

	* backends/native/*: Pass TargetExceptions to the
	LocationInvalidException's .ctor.

	* backends/mono-csharp/*: Likewise.

2003-02-27  Martin Baulig  <martin@ximian.com>

	* backends/native/NativeStringObject.cs (ReadString): Quote
	non-printable characters in the returned string, read at most
	MaximumDynamicSize chars.

2003-02-26  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs (check_method_operation):
	Enable this for native methods as well.

2003-02-26  Martin Baulig  <martin@ximian.com>

	* backends/native/NativeStringType.cs: New file.
	* backends/native/NativeStringObject.cs: New file.

	* arch/DwarfReader.cs: Cleaned up the API a bit and added support
	for strings.

2003-02-26  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs: Started to add support for native types to
	access parameters and local variables in native methods.

2003-02-26  Martin Baulig  <martin@ximian.com>

	* backends/native/: New directory.

	* backends/native/NativeFundamentalObject.cs: New file.
	* backends/native/NativeFundamentalType.cs: New file.
	* backends/native/NativeObject.cs: New file.
	* backends/native/NativeOpaqueType.cs: New file.
	* backends/native/NativeType.cs: New file.

2003-02-26  Martin Baulig  <martin@ximian.com>

	Moved MonoTargetLocation.cs, MonoRelativeTargetLocation.cs,
	MonoStackLocation.cs and MonoRegisterLocation.cs from
	backends/mono-csharp/ to backends/classes/ and put them into the
	Mono.Debugger.Backends namespace.

	* backends/classes/MonoTargetLocation.cs: Moved here.
	* backends/classes/MonoRelativeTargetLocation.cs: Moved here.
	* backends/classes/MonoStackLocation.cs: Moved here.
	* backends/classes/MonoRegisterLocation.cs: Moved here.

2003-02-25  Martin Baulig  <martin@ximian.com>

	* classes/SourceInfo.cs (SourceFile.FindMethod): Renamed the
	overloaded version which took a line into FindLine () and changed
	its return type to SourceLocation.

	* classes/Module.cs (FindMethod): Renamed the overloaded version
	which took a filename and line to FindLocation() and changed its
	return type to SourceLocation.

2003-02-24  Martin Baulig  <martin@ximian.com>

	* interfaces/IMethod.cs (IMethodSource.SourceMethod): New property.

	* classes/SourceAddress.cs (SourceLocation): New property.

2003-02-24  Martin Baulig  <martin@ximian.com>

	* interfaces/ISourceBuffer.cs (ISourceBuffer.HasContents): Removed
	this property; from now on, an ISourceBuffer always has contents.
	(ISourceBuffer.Contents): Changed the type of this property from
	`string' to `string[]'; it returns the source file splitted into
	lines (it turned out to be more useful that way).

	* interfaces/IMethod.cs (IMethodSource): Added Name, IsDynamic,
	SourceBuffer and SourceFile properties.

	* classes/SourceAddress.cs (SourceAddress.Buffer): Removed this
	property.
	(SourceAddress.MethodSource): New public property.

2003-02-24  Martin Baulig  <martin@ximian.com>

	* classes/SourceInfo.cs: Renamed `SourceInfo' into `SourceFile'
	and `SourceMethodInfo' into `SourceMethod'.

2003-02-24  Martin Baulig  <martin@ximian.com>

	* classes/SourceFileFactory.cs (SourceFileFactory.FindFile):
	Return an ISourceBuffer.
	(SourceFile): Removed.

2003-02-24  Martin Baulig  <martin@ximian.com>

	* classes/SourceLocation.cs: New public class.

	* classes/BreakpointHandle.cs (BreakpointHandleMethod): Merged all
	the functionality into `BreakpointHandle' and removed this class.

	* classes/Module.cs (Module.AddBreakpoint): Take a SourceLocation.

2003-02-24  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs (Kill): Send the event and call Dispose ().

	* backends/ThreadManager.cs (process_exited): Use Process.Kill()
	to kill all processes.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Unload the
	modules when the target exits.

2003-02-23  Martin Baulig  <martin@ximian.com>

	Renamed `SourceLocation' to `SourceAddress'.

	* classes/SourceAddress.cs: Formerly known as SourceLocation.

	* classes/SourceLocation.cs: Renamed into SourceAddress.

2003-02-22  Martin Baulig  <martin@ximian.com>

	* classes/SourceFileFactory.cs (SourceFile.ReadFile): Use
	`Encoding.GetEncoding (28591)' as the default encoding.  I've no
	idea why, but that's what MCS is doing in driver.cs and it's
	fixing my bug.

2003-02-22  Martin Baulig  <martin@ximian.com>

	* doc/user-manual.texi: Documented the new breakpoint code.

2003-02-22  Martin Baulig  <martin@ximian.com>

	* interfaces/IMethod.cs (IMethodSource.MethodLookup): New method.

	* backends/Debugger.cs (InsertBreakpoint): Removed the overloaded
	versions which took a method name / file name; the method lookup
	is now done by the client, we just take a SourceMethodInfo here.

	* frontends/scripting/: Completely reworked the `break' commands.
	Thread groups are now specified in `<', '>'.

2003-02-13  Miguel de Icaza  <miguel@ximian.com>

	* frontends/command-line/Main.cs: Make enter repeat the last command.

2003-02-09  Martin Baulig  <martin@ximian.com>

	* test/SymbolFileReader.cs: Moved to ../lib/.

	* lib/SymbolFileReader.cs: Added this to the build.

2003-02-08  Martin Baulig  <martin@ximian.com>

	* wrapper/main.c: Create a special command thread which is always
	stopped.  It is used by the debugger to invoke methods on the JIT,
	such as compiling a method or inserting a breakpoint.

2003-02-08  Martin Baulig  <martin@ximian.com>

	* classes/ModuleData.cs (FindMethod): New abstract method.

	* classes/Module.cs (FindMethod): Call ModuleData.FindMethod().

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoModule.FindMethod): Provide a custom implementation for this.

2003-02-07  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Reflect
	latest symbol writer changes.

2003-02-05  Martin Baulig  <martin@ximian.com>

	* tests/SymbolFileReader.cs: New test.  This is a nice tool which
	can dump the contents of a symbol file.

2003-02-03  Martin Baulig  <martin@ximian.com>

	* backends/server/library.c: Return the correct thread abort/restart
	signals.

	* backends/ThreadManager.cs: Make this work for native
	applications again.

2003-02-03  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/ScriptingContext.cs: Added `--prompt'
	command line argument to specify the prompt; useful when running
	the debugger inside the debugger.

2003-02-02  Martin Baulig  <martin@ximian.com>

	* test/TestInternCall.cs: New test.

2003-02-02  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs: Added support for
	PInvoke/icall wrappers.

2003-02-02  Martin Baulig  <martin@ximian.com>

	* interfaces/IMethod.cs (IsWrapper, WrapperAddress): New properties.

2003-02-02  Martin Baulig  <martin@ximian.com>

	* wrapper/icall.c: New file.
	(Mono.Debugger.Tests.TestInternCall::Test): New interncall for
	testing purposes.

2003-02-02  Martin Baulig  <martin@ximian.com>

	* frontends/gui/SourceView.cs (CreateWidget): New abstract method.
	(.ctor): Hook to the "map"/"unmap" events and don't update the
	widget while we're invisible.
	(frame_changed_event): If we're called the first time, queue an
	idle callback which scrolls to the current line.

2003-02-02  Martin Baulig  <martin@ximian.com>

	* arch/ArchitectureI386.cs (I386Register): Made this public.

2003-02-01  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/ScriptingContext.cs (Start): Splitted into
	ParseArguments() and Run().

	* backends/ProcessStart.cs (IsCoreFile, CoreFile): New properties.

	* frontends/gui/DebuggerGUI.cs (ProgramLoadedEvent): This is now
	emitted when the DebuggerBackend is created.
	(ProcessCreatedEvent): New public event which is emitted when the
	main process has been created.

	* frontends/gui/DebuggerWidget.cs (SetBackend): New protected
	virtual function; this is called before the main process is started.

2003-02-01  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerGUI.cs (ProgramLoadedEvent): New public
	event.

	* frontends/gui/DebuggerWidget.cs (SetProcess): Made this
	protected; we hook to the DebuggerGUI's ProgramLoadedEvent.

2003-02-01  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerWidget.cs: The `backend' is now set in
	SetProcess() and must not be used before SetProcess() has been called.

2003-02-01  Martin Baulig  <martin@ximian.com>

	* classes/ObjectCache.cs: Re-enable WeakReferences.

2003-02-01  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/Interpreter.cs: The ScriptingContext is
	now created by the caller and passed to the .ctor as argument.

2003-01-26  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/: Use Mono.GetOptions.

2003-01-26  Martin Baulig  <martin@ximian.com>

	* doc/user-manual.texi: New file.  Explained thread groups and
	per-thread breakpoints there.

2003-01-26  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/: Implemented ThreadGroup support.

2003-01-26  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added `kill' command.	

2003-01-24  Martin Baulig  <martin@ximian.com>

	* wrapper/: Reflected lastest runtime changes.

2003-01-24  Martin Baulig  <martin@ximian.com>

	Made the serialization stuff actually work.  You can now save a
	debugger session - including all your breakpoints - to disk and
	read it back next time you start the debugger :-)

	* backend/ProcessStart.cs: Made this serializable.

	* backend/DebuggerBackend.cs: Made this serializable.

	* class/Module.cs: Make the serialization stuff actually work.  We
	can now serialize the module list, including all the breakpoints,
	to disk and reload it later.

2003-01-24  Martin Baulig  <martin@ximian.com>

	* classes/ModuleData.cs: Split out all the dynamic stuff from
	`Module'; this is now also the base class for `NativeModule'.

	* classes/BreakpointHandle.cs: This was formerly a nested class in
	`Module' and is now public.

	* classes/SymbolTableManager.cs: Don't use an AsyncQueue here.

	* arch/BfdModule.cs: The DwarfReader is now constructed here; we
	can also load/unload it.

2003-01-24  Martin Baulig  <martin@ximian.com>

	* wrapper/: Prefix all symbols which are accessed from the
	debugger with `MONO_DEBUGGER__' and mark them as volatile.

2003-01-23  Nick Drochak <ndrochak@gol.com>

	* frontends/gui/DebuggerGUI.cs: Hook up close button on window border.

2003-01-22  Martin Baulig  <martin@ximian.com>

	* lib/Makefile.am: Use the new wrapper instead of @MONO@.  Added
	the ${LD_LIBRARY_PATH} to the config files.

	* backends/ProcessStart: Pass the LD_LIBRARY_PATH to the target.

2003-01-22  Martin Baulig  <martin@ximian.com>

	* classes/Breakpoint.cs (BreakpointHit): Renamed to
	CheckBreakpointHit() and added BreakpointHit() which'll be called
	after the target is actually stopped and the notifications have
	been send.

2003-01-22  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs: Use the new mono thread manager in
	the wrapper.

	* wrapper/: New directory.  This is an unmanaged wrapper
	application which embeds the JIT.  It is launched from the
	debugger when debugging managed applications.

	* configure.in: Set version number to 0.2.1; require Mono 0.19.1.

2003-01-19  Martin Baulig  <martin@ximian.com>

	Released version 0.2.0 "Boston" of the Mono Debugger :-)

2003-01-19  Martin Baulig  <martin@ximian.com>

	* README.FreBSD: The mono and binutils binaries are ready :-)

2003-01-19  Martin Baulig  <martin@ximian.com>

	* README.FreeBSD: Unfortunately, the binutils issue is a bit worse
	than expected on FreeBSD.  I've made a FreeBSD port, including a
	binary package; added a link to them.

2003-01-19  Martin Baulig  <martin@ximian.com>

	* arch/DwarfReader.cs: Don't make this an IDisposable.

	* classes/SymbolTableManager.cs: Catch the ThreadAbortException
	and set the events to wake up a potentially waiting caller.

2003-01-18  Martin Baulig  <martin@ximian.com>

	* interfaces/IProcess.cs (State, Disassembler): New properties.

	* backends/SingleSteppingEngine.cs: Implement IDisassembler.

	* backends/Process.cs: Some API cleanups.
	(ProcessExitedEvent): New public event.

2003-01-18  Martin Baulig  <martin@ximian.com>

	* configure.in: Set version number to 0.1.9, we're almost ready for
	the release ....

2003-01-18  Martin Baulig  <martin@ximian.com>

	* RELEASE-NOTES-0.2.0.txt: Replaced `GNU/Linux' with `Linux and
	BSD kernels' since the debugger is now working on FreeBSD.

2003-01-17  Martin Baulig  <martin@ximian.com>

	* backends/DaemonThreadRunner.cs: Make the runner thread exit when
	the target receives a SIGKILL.

2003-01-17  Martin Baulig  <martin@ximian.com>

	* classes/ObjectCache.cs: Catch and silently ignore exceptions
	when creating the WeakReference.  This makes the debugger work
	with a runtime which has no GCHandle support.

2003-01-17  Martin Baulig  <martin@ximian.com>

	* configure.in: Don't check for gthread anymore.

	* backends/server/breakpoints.c: Don't use a GStaticRecMutex here; 
	mono_debugger_breakpoint_manager_new () now takes two delegate
	arguments - a lock an an unlock function.

	* classes/BreakpointManager.cs: Create a Mutex and pass the
	unmanaged breakpoint manager to delegates to lock/unlock it.

2003-01-16  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-freebsd-ptrace.c (do_wait): FreeBSD
	requires the `WLINUXCLONE' option if and only if the target is a
	thread.

	* backends/server/i386-ptrace.c (InferiorHandle): Added
	`is_thread' field; this is set to 1 by server_ptrace_attach()
	since we currently only attach to threads.

2003-01-16  Martin Baulig  <martin@ximian.com>

	* configure.in: Check whether we have a shared libbfd.so; if not,
	tell people to read the "binutils and libbfd issues" section in
	README.FreeBSD.

	* README.FreeBSD: New file.

	* doc/FAQ.txt: Also added this to the FAQ.

2003-01-16  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs: Don't hardcode signal numbers.

	* backends/ptrace/PTrace.cs
	(ThreadAbortSignal, ThreadRestartSignal, ThreadDebugSignal,
	MonoThreadDebugSignal): New static properties.

2003-01-16  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs: Use the new thread manager in
	mono/io-layer when debugging managed applications.

2003-01-15  Peter Williams  <peterw@ximian.com>

	* frontends/scripting/Parser.jay: Change it so that expressions
	go in parentheses, not variable_expressions.

	* frontends/scripting/Command.cs: supporting changes of
	VariableExpressionGroup -> ExpressionGroup.

2003-01-13  Peter Williams  <peterw@ximian.com>

	* frontends/scripting/Command.cs: Implement a binary operator for
	simple math in expressions. Make variable_expressions convertible
	to expressions so that we don't need PrintCommand as well as 
	PrintVariableCommand. Change the default resolution of variables
	to try and get their actual values. Make array index take an
	expression so that we can do "$array[$i]".

	* frontends/scripting/Parser.jay: Define binary operators and make
	them possible expressions. Don't make processes possible expressions.
	Remove the PrintVariable command since we don't need it anymore.

	* frontends/scripting/Tokenizer.cs: Return the binary operator tokens
	if necessary. Needs fixing to support negative numbers.

2003-01-14  Martin Baulig  <martin@ximian.com>

	* NEWS: The Debugger is now working on FreeBSD 4.7 :-)

2003-01-14  Martin Baulig  <martin@ximian.com>

	* backends/IInferior.cs (StopSignal): Removed.

	* backends/ptrace/PTrace.cs (SIGSTOP, SIGINT, SIGCHLD, SIGPROF):
	New static properties; initialize them in a static .ctor.

	* backend/ThreadManager.cs (SignalHandler): Ignore SIGPROF as well.

2003-01-14  Martin Baulig  <martin@ximian.com>

	* arch/ArchitectureI386.cs: Keep the registers in sync with
	DebuggerI386Registers in backends/server/i386-arch.h.

2003-01-14  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-linux-ptrace.c: Moved the
	architecture-specific stuff into i386-arch.[ch]; moved the
	portable stuff into i386-ptrace.c, created i386-linux-ptrace.c and
	i386-freebsd-ptrace.c.

2003-01-14  Martin Baulig  <martin@ximian.com>

	* configure.in (server_sources): AC_SUBST this to
	i386-linux-ptrace.c on Linux and to nothing on other systems.

	* backends/server/library.c: If we're on Linux, #include
	"i386-linux-ptrace.c", otherwise don't read a backend at all.

2003-01-14  Martin Baulig  <martin@ximian.com>

	* arch/CoreFileElfI386.cs (get_registers): Read the registers from
	the `.reg' section to make this more portable.

	* arch/bfdglue.c (bfd_glue_core_file_elfi386_get_registers): Make
	this work on FreeBSD 4.7.

2003-01-13  Martin Baulig  <martin@ximian.com>

	* glue/mono-debugger-readline.c: Don't use a GIOChannel here, just
	read from stdin.

	* classes/GnuReadline.cs: We don't need an IOChannel anymore.

2003-01-13  Martin Baulig  <martin@ximian.com>

	* configure.in (--disable-readline): New command line argument to
	disable the use of GNU readline.

	* glue/mono-debugger-readline.c: Don't use readline if we don't
	have it.  Only set the GIOChannel flags on startup.

2003-01-13  Martin Baulig  <martin@ximian.com>

	* glue/bfdglue.c (bfd_glue_core_file_elfi386_get_registers):
	Changed the type of the `regs' argument to `gpointer *' to make it
	portable.

	* glue/bfdglue.h: Don't #include Linux-specific header files.

	* configure.in: Check whether we're actually on Linux.
	(--disable-gui): New command argument to disable building the gui.

2003-01-13  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs (Name): New public property.  Returns the
	method name from ISymbolLookup.SimpleLookup().

	* frontends/gui/BacktraceView.cs: Use the new StackFrame.Name
	property to get the method name.

2003-01-13  Martin Baulig  <martin@ximian.com>

	* interfaces/ISymbolTable.cs (ISymbolLookup.SimpleLookup): New
	interface method which returns just the name of the method without
	constructing the method itself.

	* arch/Bfd.cs: Read the bfd symbol table and make it available via
	the ISymbolLookup's SimpleLookup() method.

2003-01-13  Martin Baulig  <martin@ximian.com>

	* interfaces/IDisassembler.cs (DisassembleInstruction): Removed
	the version which took a `ref TargetAddress'; the other one now
	returns an AssemblerLine or null on error, it doesn't throw an
	exception any longer.

	* classes/AssemblerMethod.cs (AssemblerLine): Made this a sealed
	class, not a struct so we can pass this by reference and return null.

2003-01-13  Martin Baulig  <martin@ximian.com>

	* classes/AssemblerMethod.cs (AssemblerMethod.AppendOneLine): New
	public method to append a line at the end of the current method.

	* frontends/gui/DisassemblerView.cs: While we don't have a method,
	add all instructions we encounter here.

2003-01-12  Martin Baulig  <martin@ximian.com>

	* classes/NativeMethod.cs: Renamed to AssemblerMethod.

	* classes/AssemblerMethod.cs: New public class.  This derives from
	MethodSource, but we don't need an IMethod any longer.  The API is
	also a bit improved, you can for instance get an array of
	AssemberLines to access individual lines.

	* interfaces/IDisassembler.cs: Return an AssemblerMethod, not an
	IMethodSource.

	* frontends/gui/DisassemblerView.cs: If we don't have a method,
	just display the current instruction.

2003-01-12  Martin Baulig  <martin@ximian.com>

	* widgets/sources/debuggerwidgets/: New directory.

	* widgets/sources/debuggerwidgets/debuggerentry.[ch]: New widget.
	This is derived from GtkEntry and has "previos_line" and
	"next_line" signals which are emitted when the user presses the
	Up/Down keys.

	* frontends/gui/CurrentInstructionEntry.cs: Use the new
	DebuggerEntry widget; if the user presses the Up/Down keys,
	display the next/previous instruction.

2003-01-12  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Make the "Program to Debug" menu
	item work again.

	* frontends/gui/debugger.glade: Removed the "File / Open" and
	"Debug / Restart" menu items.

2003-01-12  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerWidget.cs: Removed all the method stuff;
	we only need it in the SourceManager.

	* frontends/gui/RegisterDisplay.cs (Active): New public property.
	This is set to true while the CPU view is being displayed.

2003-01-11  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs
	(DisassembleInstruction, DisassembleMethod): New public methods.

	* frontends/gui/DisassemblerView.cs: Use StackFrame.DisassembleMethod().

2003-01-11  Martin Baulig  <martin@ximian.com>

	* frontends/gui/SourceView.cs: Don't derive from DebuggerWidget;
	moved most of the functionality from SourceList here.

	* frontends/gui/SourceList.cs: Derive from SourceView.

	* frontends/gui/DisassemblerView.cs: Derive from SourceView.

	* frontends/gui/SourceManager.cs: Nicely integrate the DisassemblerView.

2003-01-11  Martin Baulig  <martin@ximian.com>

	* frontends/gui/SourceList.cs: Moved the SourceList class from
	SourceManager.cs into its own file.

2003-01-11  Martin Baulig  <martin@ximian.com>

	* widgets/generator/gtk-api.xml: Removed
	gtk_source_buffer_get_tag_start() and gtk_source_buffer_get_tag_end().

2003-01-11  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added `MODULE ALL module_operations'
	to do the operation on all modules.

2003-01-11  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added `SHOW MODULES' command and
	a `MODULE' command to modify modules.

2003-01-11  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Incremented
	MonoSymbolFileTable.DynamicVersion to 20 for the next Mono release.

2003-01-10  Peter Williams  <peterw@ximian.com>

	* lib/Makefile.in (clean): Remove *.dll on make clean as well as *.exe.
	Also add a rule to regenerate Makefile if Makefile.in changes.

2003-01-08  Peter Williams  <peterw@ximian.com>

	* frontends/scripting/Makefile.in: Make the jay rule not clobber Parser.cs
	if jay fails, and add a rule to regenerate Makefile if needed.

	* backends/ProcessStart.cs: If no directory argument is given, assume
	we're looking in the current directory.

2003-01-06  Martin Baulig  <martin@ximian.com>

	* configure.in: Set version number to 0.1.7 (this is an odd number
	which means that we're still unstable ...)

2003-01-06  Martin Baulig  <martin@ximian.com>

	* doc/debugger-status.txt: Added a "How you can help with the
	debugger" section.

2003-01-06  Martin Baulig  <martin@ximian.com>

	* doc/debugger-status.txt: Added a few notes about the current
	status here.

2003-01-06  Martin Baulig  <martin@ximian.com>

	* doc/debugger-status.txt: Updated this document.

	* doc/roadmap.txt: This one was too much outdated.  Removed.

	* RELEASE-NOTES-0.2.0.txt: Started to document all the cool new
	features here.

2003-01-06  Martin Baulig  <martin@ximian.com>

	* tests/TestManagedTypes.cmd: Added a few more test cases here.

2003-01-06  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/: It's called `accessible', not `accessable'.

2003-01-05  Martin Baulig  <martin@ximian.com>

	* NEWS: Added a new item :-)

	* RELEASE-NOTES-0.1.0.txt: Added a comment about this release
	which never really happened.

2003-01-05  Martin Baulig  <martin@ximian.com>

	* test/test.in: Added `test' target to run all the tests.

2003-01-05  Martin Baulig  <martin@ximian.com>

	* test/D.cs: Renamed to TestManagedTypes.cs.

2003-01-05  Martin Baulig  <martin@ximian.com>

	* lib/Debugger.exe.config.in: Moved here from ../test.
	* lib/Interpreter.exe.config.in: Moved here from ../test.

	* lib/: New directory.  Build everything here instead of in the
	test/ directory.

	* test/: This directory will now contain only tests.

2003-01-05  Martin Baulig  <martin@ximian.com>

	* backends/IInferior.cs (Run): Added `bool redirect_fds' argument;
	if false, we don't redirect stdout and stderr.  This is used in
	the command line interpreter.

2003-01-04  Peter Williams  <peterw@ximian.com>

	* configure.in (READLINE_DEPLIBS): Check to see if libreadline
	needs -ltermcap and if so define it here.

	* glue/Makefile.am (libmonodebuggerreadline_la_LIBADD): Use
	@READLINE_DEPLIBS@ here.

2003-01-05  Martin Baulig  <martin@ximian.com>

	* backends/ProcessStart.cs: The way how the debugger starts the
	JIT has changed; make sure to update your JIT as well.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/ScriptingContext.cs: Support non-interactive
	debugging sessions; when reading commands from a file, we don't
	print the current frame when we stop and all errors are always fatal.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added a couple of `assert'
	commands to be used in a test suite.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetObject.cs (Kind): Moved to ITargetType.

	* interfaces/ITargetType.cs (Kind): Moved this property here.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added "length ($a)",
	"upper ($a)" and "lower ($a)" where $a is an array.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added the parent expression
	"print parent ($foo)".

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added the array access
	expression "print $a [5]".

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay (variable_expression): Move the
	`STAR variable_expression' rule above the struct element one.
	Added grouping expression "print (*$c.Object).Foo".

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (VariableExpression): Added
	`ResolveType' which returns an ITargetType (without accessing the
	ITargetObject if possible).

	* frontends/scripting/Parser.jay: The `show type' command now
	accepts an arbitrary `variable_expression'.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetFundamentalObject.cs: New interface.

	* interfaces/ITargetFundamentalType.cs: New interface.

	* interfaces/TargetObjectKind.cs: New enum.

	* interfaces/ITargetObject.cs (Kind): New property.
	(HasObject, Object): Removed.

	* interfaces/ITargetType.cs (HasObject): Removed.

	* backends/mono-csharp/MonoFundamentalObjectBase.cs: New abstract
	base class for ITargetFundamentalObject.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs (VariableExpression): Added
	`ResolveVariable' method which returns an ITargetObject.

	* interfaces/ITargetPointerObject.cs
	(HasDereferencedObject, DereferencedObject): New properties.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added the dereferencing
	expression "print *$a" where $a is a pointer or a Mono `object'.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Command.cs: Renamed the old
	VariableExpression to VariableReferenceExpression.
	(VariableExpression): New abstract class.

	* frontends/scripting/Parser.jay (variable_expression): This is
	now always a VariableExpression.  Added scripting variables; you
	can now say "set !foo = $b.Test" and then later reference it with
	"print !foo".

2003-01-04  Martin Baulig  <martin@ximian.com>

	* backends/IInferior.cs (Bfd): New public property.

	* backends/Debugger.cs: Create a MonoCSharpLanguageBackend for
	core files from managed applications; use a special construction
	for it, it'll only read the symbol tables once on construction.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Provide a
	second .ctor which takes a CoreFile argument and immediately reads
	the symbol tables.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* configure.in: Link against -liberty as well as -lbfd.

	* classes/IOChannel.cs: Put this into the namespace Mono.Debugger.

	* classes/Utils.cs: Duplicate the contents of GLib.FileUtils here;
	this was the only method which we were using from glib-sharp in
	the backend, so this dependency is now gone.

	* test/Makefile.in: Don't link against glib-sharp.dll in the backend.

2003-01-04  Martin Baulig  <martin@ximian.com>

	* classes/Backtrace.cs: Don't make this abstract; move the stack
	unwind stuff from the SingleSteppingEngine here.

2003-01-03  Martin Baulig  <martin@ximian.com>

	* interfaces/IProcess.cs: Don't implement ITargetNotification.
	(IProcess.GetMemoryMaps): New method.

	* backends/SingleSteppingEngine.cs: Implement ITargetAccess and
	IProcess.

	* backends/TargetMemoryArea.cs: Moved to ../classes.

	* classes/TargetMemoryArea.cs: Moved here from ../backends; the
	.ctor is now public.

2003-01-03  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Breakpoints
	in not-yet-JITed methods are finally working again :-)

2003-01-02  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/Main.cs: If the user gave any command
	line arguments, immediately start the program.

	* frontends/scripting/Parser.jay: The `start' command no longer
	has any default arguments, so it doesn't accept an empty list anymore.

2003-01-02  Martin Baulig  <martin@ximian.com>

	* backends/Process.cs (Process.Inferior): Removed this property.
	The IInferior is now a private interface and is not exposed to the
	outside.

2003-01-02  Martin Baulig  <martin@ximian.com>

	* interfaces/ILanguageBackend.cs: Moved to ../backends.

	* backends/ILanguageBackend.cs: This is now an internal interface.
	(BreakpointHit, GetTrampoline): Take an IInferior, not an
	IProcess argument.

	* classes/Module.cs (Module.Language): The return type of this
	property is now `object'.

	* arch/BfdContainer.cs: Don't implement ILanguageBackend.

2003-01-02  Martin Baulig  <martin@ximian.com>

	* arch/CoreFile.cs: Don't implement IInferior, just IProcess and
	ITargetAccess.

2003-01-02  Martin Baulig  <martin@ximian.com>

	* classes/AddressDomain.cs: New global class.

	* classes/TargetAddress.cs: Use an instance of the new
	AddressDomain class as the domain instead of just an `object'.
	The AddressDomain has a name and an unique ID which is now used in
	all error messages - this helps you a lot if you're evey wondering
	why a comparision fails with an ArgumentException.

2003-01-01  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs (ITargetMemoryInfo): New
	interface; derives from ITargetInfo; added `AddressDomain' and
	'GlobalAddressDomain' properties.
	(ITargetMemoryAccess): Derive from ITargetMemoryInfo.

	* arch/*.cs: Don't use the IInferior here.

2003-01-01  Martin Baulig  <martin@ximian.com>

	* interfaces/ITargetMemoryAccess.cs (ITargetAccess): New
	interface; derives from ITargetMemoryAccess has has a function to
	read a register.

	* arch/ArchitectureI386.cs: The ctor now takes an ITargetAccess
	and the global address domain; we don't use the IInferior here any
	longer.

2003-01-01  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.cs: Added `disassemble' and
	`disassemble method' commands.

2003-01-01  Martin Baulig  <martin@ximian.com>

	Happy New Year 2003 :-)

	* classes/Backtrace.cs: New public class; we're now using an
	instance of this class instead of a `StackFrame[]' for a backtrace.

	* classes/StackFrame.cs (Register): New public struct.
	(StackFrame.Registers): New abstract property.

	* backends/process.cs (Process.GetBacktrace): Return a Backtrace,
	not a StackFrame[].

	* arch/ArchitectureI386.cs (UnwindStack): New function to unwind
	the stack to get the registers of another stack frame.

2002-12-31  Martin Baulig  <martin@ximian.com>

	This is the end of the Year 2002.

	* frontends/scripting/Parser.jay: Implemented the `$a.Test'
	expression to access a struct/class field.

2002-12-31  Martin Baulig  <martin@ximian.com>

	* classes/StackFrame.cs: Made this class abstract.
	(Handle): Removed this property.
	(LocalsAddress, ParamsAddress): New abstract properties.
	(TargetMemoryAccess): New abstract property.

	* classes/SingleSteppingEngine.cs: Explicitly implement
	ITargetMemoryAccess; we're sending a sync_command for each
	operation.  This is used to read the target's memory.

2002-12-31  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Added `print $name'.

2002-12-31  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Tokenizer.cs: Only recognize the short
	keywords at the start of the line; `$' starts an identifier, so
	don't recognize any keywords in it.

	* frontends/scripting/Parser.jay: Added `show type $name' to show
	the type of a variable/parameter.

2002-12-31  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: The big type
	table rewrite; the JIT now allocates types in continuous memory
	areas rather than using an individually malloc()ed block for each
	type.

2002-12-30  Martin Baulig  <martin@ximian.com>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: The big
	rewrite; we're doing all the symbol table stuff in a background
	thread when we get a notification from the JIT.

	* backends/ThreadManager.cs: If we're debugging a managed
	application, the JIT creates a special debugger thread for us;
	create a DaemonThreadRunner for this thread.

2002-12-30  Martin Baulig  <martin@ximian.com>

	* arch/Bfd.cs: Use the ThreadManager as the TargetAddress domain
	for all symbol table addresses; they must be shared between all
	the threads.

	* interfaces/ILanguageBackend.cs (GetTrampoline, BreakpointHit):
	Added IProcess argument.

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryReader): Added `ReadGlobalAddress'; uses the
	ThreadManager as the TargetAddress'es domain.
	(ITargetMemoryAccess): Likewise.

2002-12-30  Martin Baulig  <martin@ximian.com>

	* backends/DaemonThreadRunner.cs: New public class.

	* backends/ThreadManager.cs: Use the DaemonThreadRunner for the
	pthread library's manager thread.

	* interfaces/ITargetNotification.cs (TargetState): Added `DAEMON'
	for undebuggable daemon threads.

2002-12-30  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs: Only create the `csharp_language' if we're
	actually debugging a managed application.

	* backends/server/i386-linux-ptrace.c (server_ptrace_kill): Use
	`kill (handle->pid, SIGKILL)', not `ptrace (PTRACE_KILL)' since
	kill() works from any thread.
	(server_ptrace_finalize): Detach from the target after killing it.

2002-12-29  Peter Williams  <peterw@ximian.com>

	* frontends/gui/DebuggerGUI.cs (Main): Any argument after a
	nonoption argument is not for us, so just add it to args.
	(LoadProgram): Pass in our environment variables to the
	child process.

2002-12-28  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: Transformed all the old
	Expressions into Commands.

2002-12-27  Martin Baulig  <martin@ximian.com>

	* backends/server/breakpoints.h (BreakpointManager): Use a
	GStaticRecMutex instead of a GMutex so we can call
	mono_debugger_breakpoint_manager_lock/unlock recursively from the
	same thread.

	* backends/server/i386-linux-ptrace.c (server_ptrace_read_data):
	Remove breakpoints from the returned memory area.

2002-12-26  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.jay: The `break' command now takes
	an opt_process argument.

2002-12-26  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs: Correctly step over
	breakpoints in the current thread.

	* backends/IInferior.cs
	(EnableAllBreakpoints, DisableAllBreakpoints): Removed.

2002-12-26  Martin Baulig  <martin@ximian.com>

	* inferfaces/IProcess.cs: New interface.  This is implemented by
	backends/Process.cs; it's some kind of a hack because Process.cs
	is in the backends dir, but I need this in Module.cs.

	* classes/ThreadGroup.cs: New public class.  It is used to share
	information about breakpoints and signal handlers between
	different invocations of the same target.

	* classes/Module.cs (AddBreakpoint): Added ThreadGroup argument.
	(EnableBreakpoint, DisableBreakpoint): Likewise.

	* backends/classes/NativeModule.cs
	(EnableBreakpoint, DisableBreakpoint): Enable/disable the
	breakpoint on all threads in the ThreadGroup.

	* backends/SingleSteppingEngine.cs
	(InsertBreakpoint, RemoveBreakpoint): Make this work again.

	* frontends/scripting/Parser.jay: Added `break' command to insert
	a breakpoint.

2002-12-25  Martin Baulig  <martin@ximian.com>

	* arch/Bfd.cs (Bfd.GetDisassembler): Take an IInferior argument
	and actually pass that argument to the BfdDisassembler's ctor; we
	cannot share a disassembler between multiple IInferior's.

2002-12-25  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs: If we're stepping one instruction
	and receive signal which we're supposed to ignore, the stepping operation
	has already been completed and we don't need to resume the target.

2002-12-25  Martin Baulig  <martin@ximian.com>

	* frontends/gui/ProcessManager.cs: Added thread manager GUI.

2002-12-25  Martin Baulig  <martin@ximian.com>

	* classes/DebuggerTextWriter.cs: New abstract base class.

	* frontends/scripting/ScriptingContext.cs: Use two
	DebuggerTextWriter's for the debugger and inferior output.

	* frontends/gui/OutputWindow.cs: Rewrote this to use the new
	DebuggerTextWriter.  We're now using a separate output window
	for the inferior output and error output is displayed in red.

2002-12-25  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerWidget.cs: Renamed SetBackend -> SetProcess;
	the DebuggerBackend can already be set in the ctor, so this only
	takes a Process argument.

2002-12-25  Martin Baulig  <martin@ximian.com>

	* classes/NativeMethod.cs: Create the ISourceBuffer in the ctor.

	* frontends/gui/SourceView.cs: Make this work again.

2002-12-24  Martin Baulig  <martin@ximian.com>

	This is my last commit for today, so merry x-mas !

2002-12-24  Martin Baulig  <martin@ximian.com>

	The Monday Night Hack of week #52 - the BreakpointManager is done.

	* backends/BreakpointManager.cs: New file.  This is just a wrapper
	around the unmanaged API in backends/server/breakpoints.[ch].

	* backends/server/breakpoints.[ch]: New files.
	* backends/server/i386-linux-ptrace.c: Use a breakpoint manager
	which is shared between all threads of the same application.

	* backends/ThreadManager.cs
	(AcquireGlobalThreadLock, ReleaseGlobalThreadLock): Don't
	lock/unlock the calling process.

	* backends/SingleSteppingEngine.cs: Breakpoints are almost working
	again; we can now safely hit a breakpoint in another thread
	(except of a few race conditions which aren't fixed yet).

2002-12-23  Martin Baulig  <martin@ximian.com>

	* frontends/gui/SourceManager.cs (SourceManager): Added events
	`MethodInvalidEvent', `MethodChangedEvent', `FrameChangedEvent'
	and `FramesInvalidEvent'.
	(SourceList): Connect these events on the SourceManager, not on
	the Process since their handlers must be called from the gtk# thread.

	* frontends/gui/DebuggerWidget.cs
	(RealMethodChanged, RealMethodInvalid): New protected virtual
	methods which may be called from any thread.
	(MethodChanged, MethodInvalid): New protected virtual methods
	which are guaranteed to be called from the gtk# thread.

2002-12-23  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerWidget.cs
	(RealFrameChanged, RealFramesInvalid, RealStateChanged): New
	protected virtual methods which may be called from any thread.
	(FrameChanged, FramesInvalid, StateChanged): New protected virtual
	methods which are guaranteed to be called from the gtk# thread.

2002-12-23  Martin Baulig  <martin@ximian.com>

	* class/ThreadNotify.cs: This can now have multiple listeners
	(since file descriptors are a precious resource).

2002-12-23  Martin Baulig  <martin@ximian.com>

	* frontends/gui/DebuggerWidget.cs: Added `DebuggerGUI' argument;
	get the Glade.XML from an internal property of the gui.
	* frontends/gui/SourceManager.cs: Derive from DebuggerWidget.

2002-12-15  Martin Baulig  <martin@ximian.com>

	* frontends/gui/RegisterDisplay.cs: Make this working again.
	* frontends/gui/CurrentInstructionEntry.cs: Likewise.

2002-12-15  Martin Baulig  <martin@ximian.com>

	* frondends/command-line/Interpreter.cs: Use the new command line
	interface here.

2002-12-15  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs: Added a global thread lock mechanism.

2002-12-14  Martin Baulig  <martin@ximian.com>

	* backends/SingleSteppingEngine.cs: All step commands now take an
	additional `bool synchronous' argument and return true on success;
	if the `synchronous' argument is set, the engine waits until the
	operation has been completed before returning.

2002-12-14  Martin Baulig  <martin@ximian.com>

	* backends/ThreadManager.cs: New file.

2002-12-13  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-linux-ptrace.c: Added hardware breakpoints.

	* backends/SingleSteppingEngine.cs: Use a hardware breakpoint for
	the temporary breakpoints; this'll avoid some bigger headaches
	with threads.

2002-12-13  Martin Baulig  <martin@ximian.com>

	WARNING: The Debugger is currently more or less broken since I
	haven't finished all this stuff yet.

	Rewrote and redesigned the SingleSteppingEngine to do all the
	stepping in a background thread.

	* backends/server/*, backends/ptrace/PTrace.cs: Simplified this
	ugly async stuff; since we're now running in our own thread, we
	can just wait for our child.

2002-12-13  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/Parser.cs: Added `finish' command.

	* frontends/command-line/Interpreter.cs: Commented out almost
	everything in this file; it'll go away really soon.

	* classes/ThreadNotify.cs: New class; this is basically the same
	than Gtk.ThreadNotify, but we can't link against gtk in the
	backend.

	* classes/IOChannel.cs (IODataInputChannel, IODataOutputChannel):
	Added these classes for data channels.

	* backends/Process.cs, backends/Debugger.cs: Moved all
	process-specific stuff to the new `Process' class.

	* frontends/gui/DebuggerWidget.cs (DebuggerWidget.SetBackend):
	Added `Process process' argument; use the Process everywhere
	instead of the DebuggerBackend.

2002-12-11  Martin Baulig  <martin@ximian.com>

	* backends/server/i386-linux-ptrace.c: Get the registers each time
	the target stops and store them.

2002-12-11  Martin Baulig  <martin@ximian.com>

	* backends/ProcessStart.cs: New class.  Moved the argv and envp
	stuff here; this class specifies how to launch an application.

2002-12-10  Martin Baulig  <martin@ximian.com>

	* backends/Debugger.cs (DebuggerBackend.Run): This method
	now returns a new Process.
	(DebuggerBackend.ReadCoreFile): Likewise.

	* backends/Process.cs: Moved a few more things from Debugger.cs.

2002-12-10  Martin Baulig  <martin@ximian.com>

	Started to split DebuggerBackend into DebuggerBackend and Process.
	Later one, a DebuggerBackend will have a Process for each thread
	of the application being debugged.

	* backends/Process.cs: New public class.

2002-12-10  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/ScriptingContext.cs: Renamed `Process' to
	`ProcessHandle' since I'm about to create backends/Process.cs.

2002-12-08  Martin Baulig  <martin@ximian.com>

	* class/ObjectCache.cs: Use one global cleanup thread rather than
	one thread per object.

2002-12-08  Radek Doulik  <rodo@ximian.com>

	* glue/mono-debugger-readline.h: include stdio.h - fixes
	compilation on rh8, where readline .h file doesn't include it and
	FILE is then there undefined

2002-12-01  Martin Baulig  <martin@ximian.com>

	* frontends/scripting/: Added new scripting interface.

2002-11-30  Martin Baulig  <martin@ximian.com>

	* glue/mono-debugger-readline.[ch]: New files.

	* classes/GnuReadLine.cs: Added interface to GNU Readline.

2002-11-28  Martin Baulig  <martin@ximian.com>

	* frontends/command-line/Main.cs: Added new stand-alone command
	line interpreter.

	* frontends/command-line/Interpreter.cs: Improved this a bit.

2002-10-18  Martin Baulig  <martin@gnome.org>

	* RELEASE-NOTES-0.1.0.txt: Added preliminary release notes.

2002-10-17  Martin Baulig  <martin@gnome.org>

	* backends/SingleSteppingEngine.cs: Don't change the state to
	running unless the stepping operation actually succeeded.  Don't
	allow any stepping operations while sending out the event.

2002-10-17  Martin Baulig  <martin@gnome.org>

	* interfaces/ITargetLocation.cs, class/TargetLocation.cs: Removed.
	* backends/class/RelativeTargetLocation.cs: Removed.
	* backends/class/TargetStackLocation.cs: Removed.

	* interfaces/ITargetObject.cs (ITargetObject.Location): Removed
	this property, not all variables have an address.

	* backends/mono-csharp/MonoTargetLocation.cs: New class.
	* backends/mono-csharp/MonoStackLocation.cs: New class.
	* backends/mono-csharp/MonoRegisterLocation.cs: New class.
	* backends/mono-csharp/MonoRelativeTargetLocation.cs: New class.

	* backends/mono-csharp/: Use the new MonoTargetLocation code.

	* classes/StackFrame.cs (StackFrame.Level): New property.

2002-10-17  Martin Baulig  <martin@gnome.org>

	* interface/ILanguage.cs: Removed.

2002-10-15  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Check state of the backend before
	issuing a command, as even if we grey menu items, events can be
	queued.

	Reactivate the sensitivity code.

	Desensitize `Program to Debug' when running.

	* frontends/gui/ProgramToDebug.cs: Display the current settings,
	and allow the user to change those, instead of re-entering them. 

2002-10-14  Martin Baulig  <martin@gnome.org>

	* configure.in: We don't need to check for gdb anymore.

	* test/Debugger.exe.config.in: The configuration file is now
	finally called `Debugger.exe.config'.

2002-10-13  Martin Baulig  <martin@gnome.org>

	* class/SourceInfo.cs: Only read the methods when they're needed.

2002-10-12  Martin Baulig  <martin@gnome.org>

	Implemented a SymbolTableManager which maintains all the symbol
	tables and which uses a separate thread to update things in the
	background.

	Since reading the source list is a very CPU consuming operation
	and the source list is only needed when inserting a new breakpoint,
	it is now also read in the background thread.

	* class/SymbolTableManager.cs: This class now maintains all the
	symbol tables.  It's using a separate thread to update things in
	the background.

	* class/AsyncQueue.cs: New class.

	* class/SymbolTableCollection.cs: Added Lock() and UnLock()
	methods to avoid updates while adding several symbol tables.

	* arch/DwarfReader.cs: This class is now thread-safe.

	* interfaces/ILanguageBackend.cs (ILanguageBackend.SymbolTable):
	Removed, the SymbolTableManager now holds all the symbol tables.

	* backends/Debugger.cs: Use the SymbolTableManager.

2002-10-12  Martin Baulig  <martin@gnome.org>

	* class/Module.cs: Added property to get the ISymbolTable.

	* backends/Debugger.cs: Do all the symbol table handling here
	based on the module list.  Modifying the Module.StepInto property
	of shared libraries will now actually work.

	* backends/BfdModule.cs: Only report the symbols being loaded if
	we have a DwarfReader.

2002-10-11  Martin Baulig  <martin@gnome.org>

	* backends/server/i386-linux-ptrace.c: If the target received a
	signal, remember it and pass it to the target the next time it is
	resumed.  Also added a function to modify/clear the signal.

	* backends/Debugger.cs (DebuggerBackend.ClearSignal): New method
	to clear the signal.

2002-10-11  Martin Baulig  <martin@gnome.org>

	* arch/CoreFile.cs (CoreFile.GetMemoryMaps): New method to get a
	TargetMemoryArea[] for the core file's sections.

	* frontends/gui/MemoryMapsDisplay.cs: Added memory map display.

2002-10-11  Martin Baulig  <martin@gnome.org>

	* backends/TargetMemoryArea.cs: New struct.

	* backends/IInferior.cs (IInferior.GetMemoryMaps): New method to
	get the memory maps as an array of TargetMemoryArea's.

	* frontends/gui/HexEditor.cs: Use the memory maps to ensure that
	we're only accessing mapped memory, allow editing of the memory.
	You need a new Gtk# for this.

2002-10-11  Martin Baulig  <martin@gnome.org>

	* frontends/gui/HexEditor.cs: Added hex editor.

2002-10-11  Martin Baulig  <martin@gnome.org>

	* frontends/gui/ModuleDisplay.cs: Added module display.

2002-10-10  Martin Baulig  <martin@gnome.org>

	Improved core file support.

	* backends/IInferior.cs (IInferior.UpdateModules): New method to
	reload the modules.

	* backends/Debugger.cs (Backend.CurrentFrame, Backend.CurrentMethod,
	Backend.GetBacktrace): Don't use the SingleSteppingEngine if this
	is a core file.

	* arch/Bfd.cs: Improved support for core files and shared libraries.

2002-10-09  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/VariableDisplay.cs: Add a few GUI touchups to the
	variable display.

2002-10-08  Martin Baulig  <martin@gnome.org>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoCSharpLanguageBackend): Don't derive from SymbolTable but use
	a separate symbol table. This allows us to release the symbol
	table completely when the target exits.

	* backends/Debugger.cs (InferiorStateNotify): Removed this event,
	use the StateChanged event instead.

2002-10-05  Martin Baulig  <martin@gnome.org>

	* frontends/gui/: Display the SourceStatusbar while the source
	code is visible and the TargetStatusbar while the CPU view is
	visible.

2002-10-05  Martin Baulig  <martin@gnome.org>

	* frontends/gui/SourceView.cs: Made this class abstract.

	* frontends/gui/SourceManager.cs: Use Gtk.SourceView.

2002-10-03  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Hook up the signal and show an
	error message.

2002-10-02  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/SourceManager.cs: Add code to switch to a newly
	loaded file by default.

	* frontends/gui/RegisterDisplay.cs: Allow values to be changed,
	rewrite code to minimize duplicated code.

	Turn off advanced mode, so segment registers are not shown

	* backends/IInferior.cs: New property to tell if we can update the
	registers or not.
	
	* frontends/gui/Report.cs: New file, requires an updated Gtk#
	
	* arch/ArchitectureI386.cs: Add TOP constant.

2002-10-02  Martin Baulig  <martin@gnome.org>

	* interfaces/ITargetNotification.cs
	(ITargetNotification.DebuggerOutput): New event to emit diagnostic
	messages and errors.
	(ITargetNotification.DebuggerError): New event to emit non-fatal
	exceptions.

	* backends/Debugger.cs: Improved error handling a bit, we emit a
	`DebuggerError' event if we could not load the symbol table
	instead of throwing an exception.

2002-10-02  Martin Baulig  <martin@gnome.org>

	* backends/IInferior.cs (IInferior.SetRegister, SetRegisters):
	New methods to set registers.

	* backends/Debugger.cs (DebuggerBackend.SetRegister, SetRegisters):
	New methods to set registers.

2002-10-02  Martin Baulig  <martin@gnome.org>

	* interfaces/ITargetStructType.cs (ITargetStructType.Methods):
	New property to get the methods.
	(ITargetMethodInfo): New interface to represent a method.

	* interfaces/ITargetStructObject.cs (ITargetStructObject.PrintObject):
	New method to call a method in the target to print the object.

2002-10-01  Miguel de Icaza  <miguel@ximian.com>

	* frontends/command-line/Interpreter.cs: Update online help.

	* frontends/gui/RegisterDisplay.cs: Love touch ups, it now works
	as intended.

	* backends/Debugger.cs: Add a new event to notify when the
	inferior is set/reset.
	
	* frontends/gui/RegisterDisplay.cs: Use a custom view for the x386
	view of the register, so we can modify the flags at some point,
	and also to encourage the creation of target-specific register
	views that make sense for that particular target. 

	* frontends/gui/Utils.cs: Bug fix.

2002-10-01  Martin Baulig  <martin@gnome.org>

	* backends/mono-csharp/: Make "boxing" of non-valuetypes actually
	work.  Added exception support to the properties.

2002-10-01  Martin Baulig  <martin@gnome.org>

	Reworked the module stuff, implemented breakpoints and start to
	add support for properties.

	* interfaces/IModule.cs: Removed, has been replaced with class/Module.cs.

	* class/Module.cs: New public class, replaces IModule.  This class
	maintains all the breakpoints.

	* interfaces/ISymbolTable.cs (ISymbol): Removed this interface.

	* class/SingleSteppingEngine.cs: Moved the single-stepping engine
	into its own class.  This is now also doing all the method lookups.

2002-09-27  Martin Baulig  <martin@gnome.org>

	* arch/BfdContainer.cs: New class to hold all Bfd instances of the
	DebuggerBackend.  It also maintains the module table and allows it
	to be shared across different invocations of the target.

	* interfaces/ISymbolTable.cs: Started to work on lookup-by-name.
	(ISymbol): New interface.
	(ISymbolLookup): Added `ISymbol Lookup (string name)'.
	(ISymbolTable): Added HasSymbols and Symbols properties.

2002-09-27  Martin Baulig  <martin@gnome.org>

	* interfaces/IModule.cs (IModule.StepInto): New property to
	specify whether to enter methods in this module while
	single-stepping.

	* interfaces/IMethod.cs (IMethod.Language): Removed.
	(IMethod.Module): Added.

	* backends/ptrace/PTrace.cs (PTraceInferior.Step): Don't enter a
	method if it's IModule.StepInto is false.

2002-09-27  Martin Baulig  <martin@gnome.org>

	* interfaces/IModule.cs: New interface.

	* backends/Debugger.cs (DebuggerBackend.Modules): New property to get a
	list of loaded modules.
	(DebuggerBackend.ModulesChangedEvent): New event.

2002-09-27  Martin Baulig  <martin@gnome.org>

	* class/MethodBase.cs: Don't implement IMethodSource, added
	protected SetSource() method to set the IMethodSource.

2002-09-27  Martin Baulig  <martin@gnome.org>

	* backends/*, arch/*: Removed the SourceFileFactory argument everywhere.

2002-09-27  Martin Baulig  <martin@gnome.org>

	* frontends/gui/SourceManager.cs: If ISourceBuffer.HasContents is false,
	ISourceBuffer.Name is a filename which we need to load.

	* backends/mono-csharp/CSharpMethod.cs: Don't lookup source files.
	* arch/DwarfReader.cs: Likewise.

2002-09-27  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/SourceManager.cs: New file, it will hold the
	source code manager, and currently also hosts the source listing
	widget (it will replace the old code in the future, but I have
	ketp it for compatibility reasons).

2002-09-27  Martin Baulig  <martin@gnome.org>

	* interfaces/IArchitecture.cs (IArchitecture.GetBreakpointTrampolineData):
	New method to read the data from a JIT breakpoint trampoline.

	* inferfaces/ILanguageBackends.cs (ILanguageBackend.BreakpointHit): New
	method.  The language backend may decide to continue the target if hit
	a breakpoint.

	* backends/ptrace/PTrace.cs (PTraceInferior.Continue): Don't check
	the `until' address, this is now done in DebuggerBackend.
	* backends/Debugger.cs (DebuggerBackend.Continue): Moved the check
	here.

	* backends/Debugger.cs (DebuggerBackend.frame_changed): If we hit
	a breakpoint and the language backend told us to continue, do so.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs
	(MonoCSharpLanguageBackend.BreakpointHit): If we're in the
	breakpoint trampoline, get its data but ignore the breakpoint for
	the moment.

	* backends/server/i386-linux-ptrace.c (server_ptrace_child_stopped):
	Send a `(MESSAGE_CHILD_HIT_BREAKPOINT, 0)' if we hit an unknown
	breakpoint, ie. there was an `int 3' in the code which we did not insert.

2002-09-26  Martin Baulig  <martin@gnome.org>

	* classes/ILDisassembler.cs: Removed.  We use the .il which has
	been created by the JIT as source code.

2002-09-26  Martin Baulig  <martin@gnome.org>

	* backends/Debugger.cs (DebuggerBackend.LoadNativeSymbolTable): New public
	property.  Only load the native symbol table if this is set.
	
2002-09-26  Martin Baulig  <martin@gnome.org>

	* interfaces/ISourceBuffer.cs (ISourceBuffer.HasContents): New property.

	* backends/Debugger.cs: Make the source factory optional and
	create an ISourceBuffer without contents if we don't have it.

2002-09-23  Martin Baulig  <martin@gnome.org>

	* interfaces/ITargetArray.cs: New interface.

	* interfaces/ITargetObject.cs: Replaced location with type, added HasObject
	and Object.

	* interfaces/ITargetType.cs (ITargetType.GetObject): Removed.

	* backends/classes/RelativeTargetLocation.cs: New class.

	* backends/mono-csharp/: Improved the type system; we're now supporting
	strings and arrays.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* README: Added information about the directory layout.

	* NEWS: Started to maintain a NEWS file :-)

2002-09-21  Martin Baulig  <martin@gnome.org>

	* backends/classes/: New directory.
	* backends/classes/TargetReader.cs: Moved here.
	* backends/classes/TargetStackLocation.cs: Moved here.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs (SymbolTableException):
	This exception already exists in class/SymbolTableException.cs.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* backends/StepFrame.cs: Moved StepFrame here and made it `public sealed'.

	* backends/IInferior.cs (IStepFrame): We don't need this interface.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* backends/Debugger.cs (TargetAsyncResult): Make this a private nested class
	inside PTraceInferior.

	* backends/TargetReader.cs: Moved TargetInfo and TargetReader here.

	* backends/ptrace/PTrace.cs: Renamed the class to PTraceInferior.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* arch/Bfd.cs, BfdDisassembler.cs, DwarfReader.cs: Made these classes internal.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* classes/StackFrame.cs: Moved here and made `public sealed'.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* interfaces/ISourceLocation.cs: Removed.
	* classes/SourceLocation.cs: This is the only implementation.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* interfaces/IBreakPoint.cs: Killed.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* interfaces/ISourceFile.cs: Removed.
	* classes/SourceFileFactory.cs: This is the only implementation.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* interfaces/ISymbolTable.cs (ISymbolTableCollection): Removed this interface.
	* classes/SymbolTableCollection.cs: This is the only implementation.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* interfaces/IDebuggerBackend.cs: Removed.
	* interfaces/IStackFrame.cs: Removed.
	* interfaces/IInferior.cs: Moved to ../backends/.

	* classes/IOChannel.cs: Moved here from ../backends/ptrace/ and made public.

	* classes/Variable.cs: Removed.

	* backends/StackFrame.cs: Moved the StackFrame class here and made it public.
	* backends/IInferior.cs: Moved here from ../interfaces/.
	* backends/TargetStackLocation.cs: Moved here from ../classes/.
	* backends/Debugger.cs: It's now called `DebuggerBackend'.

	* test/Makefile.in: Create Mono.Debugger.dll and Mono.Debugger.Backend.dll.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* interfaces/ILanguageCSharp.cs: Killed.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs: Make this
	work with the new symbol table format.

	* arch/CoreFile.cs, CoreFileElfI1386.cs: Reading memory and
	getting a backtrace works.

2002-09-21  Martin Baulig  <martin@gnome.org>

	* interfaces/IMethod.cs (IMethod.Locals): New property.

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs (MonoMethod):
	Added support for local variables.

2002-09-20  Martin Baulig  <martin@gnome.org>

	* interfaces/IStackFrame.cs (IStackFrame.GetLocalVariableLocation): Removed.
	(IStackFrame.GetParameterLocation): Removed.
	(IStackFrame.TargetMemoryAccess): New property.

	* interfaces/ITargetObject.cs: New interface.

2002-09-20  Martin Baulig  <martin@gnome.org>

	* interfaces/IInferior.cs (IInferiorStackFrame.Inferior): New property.

	* interfaces/ITargetLocation.cs (ITargetLocation.ReValidate): Removed.
	(ITargetLocation.Handle): New property.

	* interfaces/ITargetMemoryAccess.cs
	(ITargetMemoryReader.Size): New property.
	(ITargetMemoryReader.Contents): New property.
	(ITargetMemoryAccess.GetMemoryStream): Removed.

	* backends/mono-csharp/MonoVariable.cs: We can now read a parameter as a blob.
	
2002-09-20  Martin Baulig  <martin@gnome.org>

	Started to add support for variables.

	* interfaces/ITargetType.cs: New public interface.

	* interfaces/IVariable.cs: New public interface.

	* interfaces/IMethod.cs (IMethod.Parameters): New property.

2002-09-20  Martin Baulig  <martin@gnome.org>

	* backends/mono-csharp/MonoCSharpLanguageBackend.cs (MonoMethod):
	Set IMethod.MethodHandle to the method's Reflection.MethodBase.
	
2002-09-20  Martin Baulig  <martin@gnome.org>

	Started to add support for core files.

	* interfaces/IDebuggerBackend.cs (IDebuggerBackend.ReadCoreFile):
	New method to read a core file.

	* interfaces/ITargetNotification.cs (ITargetNotification): Added
	TargetExited event.
	(TargetState): Added CORE_FILE.

	* arch/CoreFile.cs: New abstract class to read core files.

	* arch/CoreFileElfI386.cs: Core file reader for ELF files on the i386.

	* frontends/gui/DebuggerGUI.cs (.ctor): Create the interpreter
	here since otherwise the `Quit' command won't work.
	(LoadProgram): HACK: if the first argument is `core' read a core
	file `thecore' in the current directory.

2002-09-19  Martin Baulig  <martin@gnome.org>

	* interfaces/ITargetNotification.cs: New file. Moved TargetState
	and ITargetNotification here.

	* interfaces/IInferior.cs: Put this into the Mono.Debugger.Backends
	namespace.

2002-09-19  Martin Baulig  <martin@gnome.org>

	* backends/Debugger.cs: Only dispose the current stack frame if it
	has actually changed.

2002-09-19  Martin Baulig  <martin@gnome.org>

	* interfaces/ITargetLocation.cs: Make this work again.

	* classes/TargetLocation.cs: This is now an abstract base class.

	* classes/TargetStackLocation.cs: New class to represent an
	address on the stack.

	* interfaces/IMethod.cs: Added HasMethodBounds, MethodStartAddress
	and MethodEndAddress.

	* interfaces/IStackFrame.cs: Added GetLocalVariableLocation and
	GetParameterLocation.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interface/IStackFrame.cs: Added FrameInvalid event.

	* interface/IDebuggerBackend.cs (IDebuggerBackend.GetBackTrace):
	Removed all arguments; this method will cache the return value and
	emit the FrameInvalid event on each of the returned frames.

	* interface/IInferior.cs (IInferior.GetBackTrace): Return an array
	of IInternalBackTrace's;  this is an internal interface and should
	not be used outside of Debugger.cs.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interface/IInferior.cs, IDebuggerBackend.cs: Added Stop() method.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interface/IArchitecture.cs: Made this interface public.

	* interface/IDebugerBackend.cs (IDebuggerBackend.Inferior): Removed
	this property, the IInferior interface is a private interface.
	You implement it when writing a new debugger backend, but it
	shouldn't be used outside of Debugger.cs.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interfaces/IDebuggerBackend.cs: Added properties to specify the
	application to debug, its command line arguments, environment and
	current working directory.

	* backend/Debugger.cs: The ctor no longer needs command line
	arguments and application name, they're set with the properties.

	* frontends/gui/DebuggerGUI.cs: Create a Debugger instance on
	startup and use the new properties to set the application.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* frontends/gui/DebuggerGUI.cs (DebuggerGUI.LoadProgram): Call
	SetBackend() on the source_view.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* class/ObjectCache.cs: New public class.  Keeps a hard reference
	to an object and transforms the hard reference into a weak
	reference after a timeout.

	* class/DwarfReader.cs, SymbolTable.cs, MethodBase.cs, MethodSource.cs:
	Use the new ObjectCache.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* class/TargetException (TargetException): Made this abstract.

	* class/InternalError.cs: New exception class.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interfaces/ITargetMemoryAccess.cs (ITargetMemoryReader.BinaryReader):
	Return a TargetBinaryReader instead of a BinaryReader.

	* backends/debugger.cs (TargetReader): Derive from TargetBinaryReader.

	* class/TargetBinaryReader.cs: New public class.  Moved most of
	DwarfReader.DwarfBinaryReader's functionality here.  Implement the
	Mono.CSharp.Debugger.IMonoBinaryReader interface so that we can
	pass an instance of this class to the symbol reader.

	* backends/gdb/*: Removed, nothing useful there anymore.

2002-09-18  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Rework the bootstrap phase for the
	program, now it is posisble to specify the program and arguments
	from a dialog box, or to pass them on the command line.

	Now it guesses the kind of program (managed/unmanaged) without
	having to use the `native' prefix.

	Added a few more event hooks to the UI.

	* frontend/gui/Everything that depends on DebuggerWidget: It no
	longer takes a backend argument.  The backend is now configured by
	a SetBackend virtual method.  If you want to hook up to this, you
	have to override the method, and extend it.

	* frontend/gui/debugger.glade: New user interface similar to
	the VisualStudio debugger.

2002-09-17  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Use embeded debugger.glade
	resource instead of loading from the configuration data.

	* test/Makefile.in: Embed debugger.glade.

