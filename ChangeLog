2002-09-19  Martin Baulig  <martin@gnome.org>

	* interfaces/ITargetLocation.cs: Make this work again.

	* classes/TargetLocation.cs: This is now an abstract base class.

	* classes/TargetStackLocation.cs: New class to represent an
	address on the stack.

	* interfaces/IMethod.cs: Added HasMethodBounds, MethodStartAddress
	and MethodEndAddress.

	* interfaces/IStackFrame.cs: Added GetLocalVariableLocation and
	GetParameterLocation.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interface/IStackFrame.cs: Added FrameInvalid event.

	* interface/IDebuggerBackend.cs (IDebuggerBackend.GetBackTrace):
	Removed all arguments; this method will cache the return value and
	emit the FrameInvalid event on each of the returned frames.

	* interface/IInferior.cs (IInferior.GetBackTrace): Return an array
	of IInternalBackTrace's;  this is an internal interface and should
	not be used outside of Debugger.cs.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interface/IInferior.cs, IDebuggerBackend.cs: Added Stop() method.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interface/IArchitecture.cs: Made this interface public.

	* interface/IDebugerBackend.cs (IDebuggerBackend.Inferior): Removed
	this property, the IInferior interface is a private interface.
	You implement it when writing a new debugger backend, but it
	shouldn't be used outside of Debugger.cs.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interfaces/IDebuggerBackend.cs: Added properties to specify the
	application to debug, its command line arguments, environment and
	current working directory.

	* backend/Debugger.cs: The ctor no longer needs command line
	arguments and application name, they're set with the properties.

	* frontends/gui/DebuggerGUI.cs: Create a Debugger instance on
	startup and use the new properties to set the application.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* frontends/gui/DebuggerGUI.cs (DebuggerGUI.LoadProgram): Call
	SetBackend() on the source_view.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* class/ObjectCache.cs: New public class.  Keeps a hard reference
	to an object and transforms the hard reference into a weak
	reference after a timeout.

	* class/DwarfReader.cs, SymbolTable.cs, MethodBase.cs, MethodSource.cs:
	Use the new ObjectCache.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* class/TargetException (TargetException): Made this abstract.

	* class/InternalError.cs: New exception class.

2002-09-18  Martin Baulig  <martin@gnome.org>

	* interfaces/ITargetMemoryAccess.cs (ITargetMemoryReader.BinaryReader):
	Return a TargetBinaryReader instead of a BinaryReader.

	* backends/debugger.cs (TargetReader): Derive from TargetBinaryReader.

	* class/TargetBinaryReader.cs: New public class.  Moved most of
	DwarfReader.DwarfBinaryReader's functionality here.  Implement the
	Mono.CSharp.Debugger.IMonoBinaryReader interface so that we can
	pass an instance of this class to the symbol reader.

	* backends/gdb/*: Removed, nothing useful there anymore.

2002-09-18  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Rework the bootstrap phase for the
	program, now it is posisble to specify the program and arguments
	from a dialog box, or to pass them on the command line.

	Now it guesses the kind of program (managed/unmanaged) without
	having to use the `native' prefix.

	Added a few more event hooks to the UI.

	* frontend/gui/Everything that depends on DebuggerWidget: It no
	longer takes a backend argument.  The backend is now configured by
	a SetBackend virtual method.  If you want to hook up to this, you
	have to override the method, and extend it.

	* frontend/gui/debugger.glade: New user interface similar to
	the VisualStudio debugger.

2002-09-17  Miguel de Icaza  <miguel@ximian.com>

	* frontends/gui/DebuggerGUI.cs: Use embeded debugger.glade
	resource instead of loading from the configuration data.

	* test/Makefile.in: Embed debugger.glade.

