binutils and libbfd issues:
===========================

The debugger needs a shared libbfd and libopcodes.

If you get any problems with `_sch_istable' being undefined, then your libbfd is unusable
for the debugger and you need to manually compile a shared one.  Note that adding a check
for -liberty (that's where that symbol is defined) to configure.in is wrong and will not
work !

There are two ways of compiling binutils:

a) You create a non-shared libbfd.  This seems to be the default on FreeBSD and probably
   some other systems and it creates static libiberty.a, libbfd.a and libopcodes.a.

   If you use --enable-shared, you also get a shared libbfd.so, but that doesn't matter -
   it's still unusable for the debugger.  It is a shared library which is intended to be
   linked into an application - and that application must also statically link against
   -liberty.

   If you do this, you'll get an application which has -liberty (which is small)
   statically linked in and dynamically links against -lbfd (which is big).

   This doesn't work for the debugger since it must dlopen() the library and thus needs a
   shared -liberty as well.

b) You create a shared libbfd.  To do this, you need to give configure the (unfortunately
   undocumented) --enable-commonbfdlib argument.

   This'll create a shared libbfd.so and libopcodes.so - and the libbfd.so has all the
   object files from -liberty linked in.

   Such a libbfd.so doesn't depend on any non-shared libraries and thus it can be
   dlopen()ed - that's what the debugger needs.

