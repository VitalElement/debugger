<Type Name="IArchitecture" FullName="Mono.Debugger.IArchitecture">
  <TypeSignature Language="C#" Maintainer="auto" Value="public interface IArchitecture" />
  <AssemblyInfo>
    <AssemblyName>Mono.Debugger</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Docs>
    <summary>Interface to architecture specific functionality.</summary>
    <remarks>To be added</remarks>
  </Docs>
  <Interfaces />
  <Members>
    <Member MemberName="IsRetInstruction">
      <MemberSignature Language="C#" Value="public bool IsRetInstruction (Mono.Debugger.ITargetMemoryAccess memory, Mono.Debugger.TargetAddress address);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="Mono.Debugger.ITargetMemoryAccess" />
        <Parameter Name="address" Type="Mono.Debugger.TargetAddress" />
      </Parameters>
      <Docs>
        <summary>Determine if the instruction at target address @address is a return instruction.</summary>
        <param name="memory">a <see cref="T:Mono.Debugger.ITargetMemoryAccess" /></param>
        <param name="address">a <see cref="T:Mono.Debugger.TargetAddress" /></param>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCallTarget">
      <MemberSignature Language="C#" Value="public Mono.Debugger.TargetAddress GetCallTarget (Mono.Debugger.ITargetMemoryAccess target, Mono.Debugger.TargetAddress address, out int insn_size);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Debugger.TargetAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Mono.Debugger.ITargetMemoryAccess" />
        <Parameter Name="address" Type="Mono.Debugger.TargetAddress" />
        <Parameter Name="insn_size" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <summary>Check whether the instruction at target address @address is a `call' instruction and returns the destination of the call or null.

The out parameter @insn_size is set to the size on bytes of the call instructions.  This can be used to set a breakpoint immediately after the function.
</summary>
        <param name="target">a <see cref="T:Mono.Debugger.ITargetMemoryAccess" /></param>
        <param name="address">a <see cref="T:Mono.Debugger.TargetAddress" /></param>
        <param name="insn_size">a <see cref="T:System.Int32" /></param>
        <returns>a <see cref="T:Mono.Debugger.TargetAddress" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrampoline">
      <MemberSignature Language="C#" Value="public Mono.Debugger.TargetAddress GetTrampoline (Mono.Debugger.ITargetMemoryAccess target, Mono.Debugger.TargetAddress address, Mono.Debugger.TargetAddress generic_trampoline_address);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Debugger.TargetAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Mono.Debugger.ITargetMemoryAccess" />
        <Parameter Name="address" Type="Mono.Debugger.TargetAddress" />
        <Parameter Name="generic_trampoline_address" Type="Mono.Debugger.TargetAddress" />
      </Parameters>
      <Docs>
        <summary>Check whether the instruction at target address @address is a trampoline method. If it's a trampoline, return the address of the corresponding method's code.  For JIT trampolines, this should do a JIT compilation of the method.
</summary>
        <param name="target">a <see cref="T:Mono.Debugger.ITargetMemoryAccess" /></param>
        <param name="address">a <see cref="T:Mono.Debugger.TargetAddress" /></param>
        <param name="generic_trampoline_address">a <see cref="T:Mono.Debugger.TargetAddress" /></param>
        <returns>a <see cref="T:Mono.Debugger.TargetAddress" /></returns>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNames">
      <MemberSignature Language="C#" Value="public string[] RegisterNames { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The names of all registers</summary>
        <value>a <see cref="T:System.String[]" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterIndices">
      <MemberSignature Language="C#" Value="public int[] RegisterIndices { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indices of the "important" registers, sorted in way that's suitable to display them to the user.</summary>
        <value>a <see cref="T:System.Int32[]" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllRegisterIndices">
      <MemberSignature Language="C#" Value="public int[] AllRegisterIndices { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:System.Int32[]" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPrologueSize">
      <MemberSignature Language="C#" Value="public int MaxPrologueSize { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added</summary>
        <value>a <see cref="T:System.Int32" /></value>
        <remarks>To be added</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintRegister">
      <MemberSignature Language="C#" Value="public string PrintRegister (Mono.Debugger.Register register);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="register" Type="Mono.Debugger.Register" />
      </Parameters>
      <Docs>
        <param name="register">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintRegisters">
      <MemberSignature Language="C#" Value="public string PrintRegisters (Mono.Debugger.StackFrame frame);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="Mono.Debugger.StackFrame" />
      </Parameters>
      <Docs>
        <param name="frame">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnwindStack">
      <MemberSignature Language="C#" Value="public Mono.Debugger.SimpleStackFrame UnwindStack (Mono.Debugger.ITargetMemoryAccess memory, Mono.Debugger.SimpleStackFrame frame, Mono.Debugger.Symbol name, byte[] code);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Debugger.SimpleStackFrame</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="Mono.Debugger.ITargetMemoryAccess" />
        <Parameter Name="frame" Type="Mono.Debugger.SimpleStackFrame" />
        <Parameter Name="name" Type="Mono.Debugger.Symbol" />
        <Parameter Name="code" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <param name="frame">To be added.</param>
        <param name="name">To be added.</param>
        <param name="code">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnwindStack">
      <MemberSignature Language="C#" Value="public Mono.Debugger.SimpleStackFrame UnwindStack (Mono.Debugger.ITargetMemoryAccess memory, Mono.Debugger.TargetAddress stack, Mono.Debugger.TargetAddress frame_address);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Mono.Debugger.SimpleStackFrame</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="Mono.Debugger.ITargetMemoryAccess" />
        <Parameter Name="stack" Type="Mono.Debugger.TargetAddress" />
        <Parameter Name="frame_address" Type="Mono.Debugger.TargetAddress" />
      </Parameters>
      <Docs>
        <param name="memory">To be added.</param>
        <param name="stack">To be added.</param>
        <param name="frame_address">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterSizes">
      <MemberSignature Language="C#" Value="public int[] RegisterSizes { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountRegisters">
      <MemberSignature Language="C#" Value="public int CountRegisters { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>