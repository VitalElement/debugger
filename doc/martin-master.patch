From 1f9fbbbc8f528fc38f9809e15c51af3d8839ad8f Mon Sep 17 00:00:00 2001
From: Martin Baulig <martin@novell.com>
Date: Wed, 8 Jul 2009 15:54:34 +0200
Subject: [PATCH] Introduce a new Thread.Step() API and made 'StepMode' and 'StepFrame' public.
 2009-07-08  Martin Baulig  <martin@ximian.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------1.5.6"

This is a multi-part message in MIME format.
--------------1.5.6
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit


	* backend/StepFrame.cs: Moved to ../classes/StepFrame.cs.

	* classes/StepFrame.cs
	(StepMode): Made this public.
	(StepFrame): Make this public and [Serializable].

	* classes/Thread.cs
	(Thread.Step): New public function.
	(Thread.StepInstruction): Obsolete, use the new Step() API.
	(Thread.StepNativeInstruction): Likewise.
	(Thread.NextInstruction): Likewise.
	(Thread.StepLine): Likewise.
	(Thread.NextLine): Likewise.

	* backend/ThreadServant.cs
	(ThreadServant.Step): New public function.
---
 ChangeLog                         |   19 +++++++++++++
 backend/SingleSteppingEngine.cs   |   14 ++++++++++
 backend/ThreadServant.cs          |    2 +
 backend/arch/CoreFile.cs          |    5 +++
 {backend => classes}/StepFrame.cs |    7 +++--
 classes/Thread.cs                 |   53 ++++++++++++++++---------------------
 6 files changed, 67 insertions(+), 33 deletions(-)
 rename {backend => classes}/StepFrame.cs (95%)
--------------1.5.6
Content-Type: text/x-patch; name="1f9fbbbc8f528fc38f9809e15c51af3d8839ad8f.diff"
Content-Transfer-Encoding: 8bit
Content-Disposition: inline; filename="1f9fbbbc8f528fc38f9809e15c51af3d8839ad8f.diff"

diff --git a/ChangeLog b/ChangeLog
index 4172420..5ed89af 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,22 @@
+2009-07-08  Martin Baulig  <martin@ximian.com>
+
+	* backend/StepFrame.cs: Moved to ../classes/StepFrame.cs.
+
+	* classes/StepFrame.cs
+	(StepMode): Made this public.
+	(StepFrame): Make this public and [Serializable].
+
+	* classes/Thread.cs
+	(Thread.Step): New public function.
+	(Thread.StepInstruction): Obsolete, use the new Step() API.
+	(Thread.StepNativeInstruction): Likewise.
+	(Thread.NextInstruction): Likewise.
+	(Thread.StepLine): Likewise.
+	(Thread.NextLine): Likewise.
+
+	* backend/ThreadServant.cs
+	(ThreadServant.Step): New public function.
+
 2009-07-07  Martin Baulig  <martin@ximian.com>
 
 	* backend/SingleSteppingEngine.cs
diff --git a/backend/SingleSteppingEngine.cs b/backend/SingleSteppingEngine.cs
index cb42d25..4b4189b 100644
--- a/backend/SingleSteppingEngine.cs
+++ b/backend/SingleSteppingEngine.cs
@@ -1682,6 +1682,13 @@ namespace Mono.Debugger.Backend
 
 #region SSE Commands
 
+		public override ThreadCommandResult Step (StepMode mode, StepFrame frame)
+		{
+			ThreadCommandResult result = new OperationCommandResult (thread);
+			StartOperation (new OperationStep (this, mode, frame, result));
+			return result;
+		}
+
 		public override void StepInstruction (CommandResult result)
 		{
 			StartOperation (new OperationStep (this, StepMode.SingleInstruction, result));
@@ -3151,6 +3158,13 @@ namespace Mono.Debugger.Backend
 			this.StepMode = frame.Mode;
 		}
 
+		public OperationStep (SingleSteppingEngine sse, StepMode mode, StepFrame frame, CommandResult result)
+			: base (sse, result)
+		{
+			this.StepFrame = frame;
+			this.StepMode = mode;
+		}
+
 		public override bool IsSourceOperation {
 			get {
 				return (StepMode == StepMode.SourceLine) ||
diff --git a/backend/ThreadServant.cs b/backend/ThreadServant.cs
index d65cd30..d3433cb 100644
--- a/backend/ThreadServant.cs
+++ b/backend/ThreadServant.cs
@@ -150,6 +150,8 @@ namespace Mono.Debugger.Backend
 
 		public abstract Backtrace GetBacktrace (Backtrace.Mode mode, int max_frames);
 
+		public abstract ThreadCommandResult Step (StepMode mode, StepFrame frame);
+
 		// <summary>
 		//   Step one machine instruction, but don't step into trampolines.
 		// </summary>
diff --git a/backend/arch/CoreFile.cs b/backend/arch/CoreFile.cs
index 8b38e17..59979dc 100644
--- a/backend/arch/CoreFile.cs
+++ b/backend/arch/CoreFile.cs
@@ -504,6 +504,11 @@ namespace Mono.Debugger.Backend
 				throw new InvalidOperationException ();
 			}
 
+			public override ThreadCommandResult Step (StepMode mode, StepFrame frame)
+			{
+				throw new InvalidOperationException ();
+			}
+
 			public override void StepInstruction (CommandResult result)
 			{
 				throw new InvalidOperationException ();
diff --git a/backend/StepFrame.cs b/classes/StepFrame.cs
similarity index 95%
rename from backend/StepFrame.cs
rename to classes/StepFrame.cs
index e615e60..1ee0cf0 100644
--- a/backend/StepFrame.cs
+++ b/classes/StepFrame.cs
@@ -5,9 +5,9 @@ using System.Text;
 using Mono.Debugger;
 using Mono.Debugger.Languages;
 
-namespace Mono.Debugger.Backend
+namespace Mono.Debugger
 {
-	internal enum StepMode
+	public enum StepMode
 	{
 		// <summary>
 		//   Step a single machine instruction, but step over trampolines.
@@ -46,7 +46,8 @@ namespace Mono.Debugger.Backend
 		Finish
 	}
 
-	internal sealed class StepFrame
+	[Serializable]
+	public sealed class StepFrame
 	{
 		TargetAddress start, end;
 		Language language;
diff --git a/classes/Thread.cs b/classes/Thread.cs
index d6d0168..7067aed 100644
--- a/classes/Thread.cs
+++ b/classes/Thread.cs
@@ -290,69 +290,62 @@ namespace Mono.Debugger
 			}
 		}
 
+		public ThreadCommandResult Step (StepMode mode)
+		{
+			return Step (mode, null);
+		}
+
+		public ThreadCommandResult Step (StepMode mode, StepFrame frame)
+		{
+			lock (this) {
+				check_alive ();
+				return servant.Step (mode, frame);
+			}
+		}
+
 		// <summary>
 		//   Step one machine instruction, but don't step into trampolines.
 		// </summary>
+		[Obsolete("Use Step (StepMode.SingleInstruction)")]
 		public ThreadCommandResult StepInstruction ()
 		{
-			lock (this) {
-				check_alive ();
-				ThreadCommandResult result = new OperationCommandResult (this);
-				servant.StepInstruction (result);
-				return result;
-			}
+			return Step (StepMode.SingleInstruction);
 		}
 
 		// <summary>
 		//   Step one machine instruction, always step into method calls.
 		// </summary>
+		[Obsolete("Use Step (StepMode.NativeInstruction)")]
 		public ThreadCommandResult StepNativeInstruction ()
 		{
-			lock (this) {
-				check_alive ();
-				ThreadCommandResult result = new OperationCommandResult (this);
-				servant.StepNativeInstruction (result);
-				return result;
-			}
+			return Step (StepMode.NativeInstruction);
 		}
 
 		// <summary>
 		//   Step one machine instruction, but step over method calls.
 		// </summary>
+		[Obsolete("Use Step (StepMode.NextInstruction)")]
 		public ThreadCommandResult NextInstruction ()
 		{
-			lock (this) {
-				check_alive ();
-				ThreadCommandResult result = new OperationCommandResult (this);
-				servant.NextInstruction (result);
-				return result;
-			}
+			return Step (StepMode.NextInstruction);
 		}
 
 		// <summary>
 		//   Step one source line.
 		// </summary>
+		[Obsolete("Use Step (StepMode.SourceLine)")]
 		public ThreadCommandResult StepLine ()
 		{
-			lock (this) {
-				check_alive ();
-				ThreadCommandResult result = new OperationCommandResult (this);
-				servant.StepLine (result);
-				return result;
-			}
+			return Step (StepMode.SourceLine);
 		}
 
 		// <summary>
 		//   Step one source line, but step over method calls.
 		// </summary>
+		[Obsolete("Use Step (StepMode.NextLine)")]
 		public ThreadCommandResult NextLine ()
 		{
-			lock (this) {
-				check_alive ();
-				ThreadCommandResult result = new OperationCommandResult (this);
-				servant.NextLine (result);
-				return result;
-			}
+			return Step (StepMode.NextLine);
 		}
 
 		// <summary>

--------------1.5.6--



From 95cecbd510a7f633f805af34012339bff02d9594 Mon Sep 17 00:00:00 2001
From: Martin Baulig <martin@novell.com>
Date: Wed, 8 Jul 2009 15:57:40 +0200
Subject: [PATCH] Add 'StepMode.Run'.
 2009-07-08  Martin Baulig  <martin@ximian.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------1.5.6"

This is a multi-part message in MIME format.
--------------1.5.6
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit


	* classes/StepFrame.cs
	(StepMode.Run): Added.
	(StepFrame.Until): New public property; only valid in`
	StepMode.Run'.

	* classes/Thread.cs
	(Thread.Continue): Use `Step (StepMode.Run)'.
	(Thread.Background): Obsolete; this was never implemented and
	always the same as Continue().

	* backend/SingleSteppingEngine.cs
	(SSE.OperationStep): Add support for `StepMode.Run'; this
	obsoletes `OperationRun'.
---
 ChangeLog                       |   16 +++++++++++++++
 backend/SingleSteppingEngine.cs |   41 +++++++++++++++++++++++++++++++++++---
 classes/StepFrame.cs            |   18 +++++++++++++++++
 classes/Thread.cs               |   23 +++++++--------------
 4 files changed, 79 insertions(+), 19 deletions(-)
--------------1.5.6
Content-Type: text/x-patch; name="95cecbd510a7f633f805af34012339bff02d9594.diff"
Content-Transfer-Encoding: 8bit
Content-Disposition: inline; filename="95cecbd510a7f633f805af34012339bff02d9594.diff"

diff --git a/ChangeLog b/ChangeLog
index 5ed89af..fc3d591 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,21 @@
 2009-07-08  Martin Baulig  <martin@ximian.com>
 
+	* classes/StepFrame.cs
+	(StepMode.Run): Added.
+	(StepFrame.Until): New public property; only valid in`
+	StepMode.Run'.
+
+	* classes/Thread.cs
+	(Thread.Continue): Use `Step (StepMode.Run)'.
+	(Thread.Background): Obsolete; this was never implemented and
+	always the same as Continue().
+
+	* backend/SingleSteppingEngine.cs
+	(SSE.OperationStep): Add support for `StepMode.Run'; this
+	obsoletes `OperationRun'.
+
+2009-07-08  Martin Baulig  <martin@ximian.com>
+
 	* backend/StepFrame.cs: Moved to ../classes/StepFrame.cs.
 
 	* classes/StepFrame.cs
diff --git a/backend/SingleSteppingEngine.cs b/backend/SingleSteppingEngine.cs
index 4b4189b..f10f36c 100644
--- a/backend/SingleSteppingEngine.cs
+++ b/backend/SingleSteppingEngine.cs
@@ -3169,13 +3169,21 @@ namespace Mono.Debugger.Backend
 			get {
 				return (StepMode == StepMode.SourceLine) ||
 					(StepMode == StepMode.NextLine) ||
-					(StepMode == StepMode.Finish);
+					(StepMode == StepMode.Finish) ||
+					(StepMode == StepMode.Run);
 			}
 		}
 
 		protected override void DoExecute ()
 		{
 			switch (StepMode) {
+			case StepMode.Run:
+				if (StepFrame != null)
+					sse.do_continue (StepFrame.Until);
+				else
+					sse.do_continue ();
+				break;
+
 			case StepMode.NativeInstruction:
 				sse.do_step_native ();
 				break;
@@ -3228,7 +3236,7 @@ namespace Mono.Debugger.Backend
 			Report.Debug (DebugFlags.SSE, "{0} resuming operation {1}", sse, this);
 
 			if (sse.temp_breakpoint != null) {
-				inferior.Continue ();
+				sse.do_continue ();
 				return true;
 			}
 
@@ -3237,6 +3245,8 @@ namespace Mono.Debugger.Backend
 
 		public override bool HandleException (TargetAddress stack, TargetAddress exc)
 		{
+			if (StepMode == StepMode.Run)
+				return false;
 			if ((StepMode != StepMode.SourceLine) && (StepMode != StepMode.NextLine) &&
 			    (StepMode != StepMode.StepFrame))
 				return true;
@@ -3305,10 +3315,16 @@ namespace Mono.Debugger.Backend
 
 		protected bool Step (bool first)
 		{
-			if (StepFrame == null)
+			TargetAddress current_frame = inferior.CurrentFrame;
+
+			if (StepMode == StepMode.Run) {
+				TargetAddress until = StepFrame != null ? StepFrame.Until : TargetAddress.Null;
+				if (!until.IsNull && (current_frame == until))
 				return true;
+				sse.do_continue ();
+				return false;
+			}
 
-			TargetAddress current_frame = inferior.CurrentFrame;
 			again:
 			bool in_frame = sse.is_in_step_frame (StepFrame, current_frame);
 			Report.Debug (DebugFlags.SSE, "{0} stepping at {1} in {2} ({3}in frame)",
@@ -3401,6 +3417,23 @@ namespace Mono.Debugger.Backend
 			return false;
 		}
 
+		protected override EventResult DoProcessEvent (Inferior.ChildEvent cevent,
+							       out TargetEventArgs args)
+		{
+			Report.Debug (DebugFlags.EventLoop, "{0} received {1} at {2} in {3}",
+				      sse, cevent, inferior.CurrentFrame, this);
+
+			if ((StepMode == StepMode.Run) &&
+			    ((cevent.Type == Inferior.ChildEventType.CHILD_HIT_BREAKPOINT) ||
+			     (cevent.Type == Inferior.ChildEventType.CHILD_CALLBACK) ||
+			     (cevent.Type == Inferior.ChildEventType.RUNTIME_INVOKE_DONE))) {
+				args = null;
+				return EventResult.Completed;
+			}
+
+			return base.DoProcessEvent (cevent, out args);
+		}
+
 		protected override bool DoProcessEvent ()
 		{
 			Report.Debug (DebugFlags.SSE, "{0} processing {1} event.",
diff --git a/classes/StepFrame.cs b/classes/StepFrame.cs
index 1ee0cf0..732798b 100644
--- a/classes/StepFrame.cs
+++ b/classes/StepFrame.cs
@@ -10,6 +10,11 @@ namespace Mono.Debugger
 	public enum StepMode
 	{
 		// <summary>
+		//   Resume the target and run until an optional end location.
+		// </summary>
+		Run,
+
+		// <summary>
 		//   Step a single machine instruction, but step over trampolines.
 		// </summary>
 		SingleInstruction,
@@ -58,6 +63,10 @@ namespace Mono.Debugger
 			: this (TargetAddress.Null, TargetAddress.Null, null, language, mode)
 		{ }
 
+		internal StepFrame (Language language, TargetAddress until)
+			: this (TargetAddress.Null, until, null, language, StepMode.Run)
+		{ }
+
 		internal StepFrame (TargetAddress start, TargetAddress end, StackFrame stack,
 				    Language language, StepMode mode)
 		{
@@ -86,6 +95,15 @@ namespace Mono.Debugger
 			}
 		}
 
+		public TargetAddress Until {
+			get {
+				if (mode != StepMode.Run)
+					throw new InvalidOperationException ();
+
+				return end;
+			}
+		}
+
 		public StackFrame StackFrame {
 			get {
 				return stack;
diff --git a/classes/Thread.cs b/classes/Thread.cs
index 7067aed..340af9e 100644
--- a/classes/Thread.cs
+++ b/classes/Thread.cs
@@ -361,35 +361,28 @@ namespace Mono.Debugger
 			}
 		}
 
+		[Obsolete("Use Step (StepMode.Run)")]
 		public ThreadCommandResult Continue ()
 		{
-			return Continue (TargetAddress.Null);
+			return Step (StepMode.Run);
 		}
 
+		[Obsolete("Use the new Step() API")]
 		public ThreadCommandResult Continue (TargetAddress until)
 		{
-			lock (this) {
-				check_alive ();
-				ThreadCommandResult result = new OperationCommandResult (this);
-				servant.Continue (until, result);
-				return result;
-			}
+			return Step (StepMode.Run, new StepFrame (NativeLanguage, until));
 		}
 
+		[Obsolete("Background() and Continue() are the same")]
 		public ThreadCommandResult Background ()
 		{
-			return Background (TargetAddress.Null);
+			return Continue ();
 		}
 
+		[Obsolete("Background() and Continue() are the same")]
 		public ThreadCommandResult Background (TargetAddress until)
 		{
-			lock (this) {
-				check_alive ();
-				flags |= Flags.Background;
-				ThreadCommandResult result = new OperationCommandResult (this);
-				servant.Background (until, result);
-				return result;
-			}
+			return Continue (until);
 		}
 
 		internal void Kill ()

--------------1.5.6--



From 7dc483c876129824139c776e70ff04c0d77cdce7 Mon Sep 17 00:00:00 2001
From: Martin Baulig <martin@novell.com>
Date: Wed, 8 Jul 2009 16:08:37 +0200
Subject: [PATCH] Removed 'SSE.OperationRun'; use 'OperationStep' with 'StepMode.Run' instead.
 2009-07-08  Martin Baulig  <martin@ximian.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------1.5.6"

This is a multi-part message in MIME format.
--------------1.5.6
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit


	* backend/SingleSteppingEngine.cs
	(SSE.OperationRun): Removed; use `OperationStep' with `StepMode.Run'.

	* backend/ThreadServant.cs
	(ThreadServant.StepInstruction): Removed, use the new Step() API.
	(ThreadServant.StepNativeInstruction): Likewise.
	(ThreadServant.NextInstruction): Likewise.
	(ThreadServant.StepLine): Likewise.
	(ThreadServant.NextLine): Likewise.
---
 ChangeLog                       |   12 ++++
 backend/SingleSteppingEngine.cs |  116 +-------------------------------------
 backend/ThreadServant.cs        |   34 ++----------
 backend/arch/CoreFile.cs        |   35 ------------
 classes/GUIManager.cs           |    6 +-
 5 files changed, 24 insertions(+), 179 deletions(-)
--------------1.5.6
Content-Type: text/x-patch; name="7dc483c876129824139c776e70ff04c0d77cdce7.diff"
Content-Transfer-Encoding: 8bit
Content-Disposition: inline; filename="7dc483c876129824139c776e70ff04c0d77cdce7.diff"

diff --git a/ChangeLog b/ChangeLog
index fc3d591..08eafa7 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,17 @@
 2009-07-08  Martin Baulig  <martin@ximian.com>
 
+	* backend/SingleSteppingEngine.cs
+	(SSE.OperationRun): Removed; use `OperationStep' with `StepMode.Run'.
+
+	* backend/ThreadServant.cs
+	(ThreadServant.StepInstruction): Removed, use the new Step() API.
+	(ThreadServant.StepNativeInstruction): Likewise.
+	(ThreadServant.NextInstruction): Likewise.
+	(ThreadServant.StepLine): Likewise.
+	(ThreadServant.NextLine): Likewise.
+
+2009-07-08  Martin Baulig  <martin@ximian.com>
+
 	* classes/StepFrame.cs
 	(StepMode.Run): Added.
 	(StepFrame.Until): New public property; only valid in`
diff --git a/backend/SingleSteppingEngine.cs b/backend/SingleSteppingEngine.cs
index f10f36c..dbb362b 100644
--- a/backend/SingleSteppingEngine.cs
+++ b/backend/SingleSteppingEngine.cs
@@ -124,7 +124,7 @@ namespace Mono.Debugger.Backend
 		{
 			CommandResult result = new ThreadCommandResult (thread);
 			if (resume_thread)
-				current_operation = new OperationRun (this, result);
+				current_operation = new OperationStep (this, StepMode.Run, result);
 			else
 				current_operation = new OperationInitialize (this, result);
 			current_operation.Execute ();
@@ -134,7 +134,7 @@ namespace Mono.Debugger.Backend
 		public CommandResult StartForkedChild ()
 		{
 			CommandResult result = new ThreadCommandResult (thread);
-			current_operation = new OperationRun (this, result);
+			current_operation = new OperationStep (this, StepMode.Run, result);
 			PushOperation (new OperationInitAfterFork (this));
 			return result;
 		}
@@ -1132,7 +1132,7 @@ namespace Mono.Debugger.Backend
 			registers = inferior.GetRegisters ();
 
 			if ((operation != null) && !main_retaddr.IsNull && (iframe.StackPointer >= main_retaddr))
-				return new OperationRun (this, false, operation.Result);
+				return new OperationStep (this, StepMode.Run, operation.Result);
 
 			// Compute the current stack frame.
 			if ((current_method != null) && current_method.HasLineNumbers) {
@@ -1689,46 +1689,11 @@ namespace Mono.Debugger.Backend
 			return result;
 		}
 
-		public override void StepInstruction (CommandResult result)
-		{
-			StartOperation (new OperationStep (this, StepMode.SingleInstruction, result));
-		}
-
-		public override void StepNativeInstruction (CommandResult result)
-		{
-			StartOperation (new OperationStep (this, StepMode.NativeInstruction, result));
-		}
-
-		public override void NextInstruction (CommandResult result)
-		{
-			StartOperation (new OperationStep (this, StepMode.NextInstruction, result));
-		}
-
-		public override void StepLine (CommandResult result)
-		{
-			StartOperation (new OperationStep (this, StepMode.SourceLine, result));
-		}
-
-		public override void NextLine (CommandResult result)
-		{
-			StartOperation (new OperationStep (this, StepMode.NextLine, result));
-		}
-
 		public override void Finish (bool native, CommandResult result)
 		{
 			StartOperation (new OperationFinish (this, native, result));
 		}
 
-		public override void Continue (TargetAddress until, CommandResult result)
-		{
-			StartOperation (new OperationRun (this, until, false, result));
-		}
-
-		public override void Background (TargetAddress until, CommandResult result)
-		{
-			StartOperation (new OperationRun (this, until, true, result));
-		}
-
 		public override void RuntimeInvoke (TargetFunctionType function,
 						    TargetStructObject object_argument,
 						    TargetObject[] param_objects,
@@ -2757,7 +2722,7 @@ namespace Mono.Debugger.Backend
 			}
 
 			Report.Debug (DebugFlags.SSE, "{0} start #1: {1}", sse, cevent);
-			sse.PushOperation (new OperationRun (sse, true, Result));
+			sse.PushOperation (new OperationStep (sse, StepMode.Run, Result));
 			return EventResult.Running;
 		}
 
@@ -3447,79 +3412,6 @@ namespace Mono.Debugger.Backend
 		}
 	}
 
-	protected class OperationRun : Operation
-	{
-		TargetAddress until;
-		bool in_background;
-
-		public override bool CheckBreakpointsOnCompletion {
-			get { return true; }
-		}
-
-		public OperationRun (SingleSteppingEngine sse, TargetAddress until,
-				     bool in_background, CommandResult result)
-			: base (sse, result)
-		{
-			this.until = until;
-			this.in_background = in_background;
-		}
-
-		public OperationRun (SingleSteppingEngine sse, bool in_background,
-				     CommandResult result)
-			: this (sse, TargetAddress.Null, in_background, result)
-		{ }
-
-		public OperationRun (SingleSteppingEngine sse, CommandResult result)
-			: this (sse, TargetAddress.Null, true, result)
-		{ }
-
-
-		public bool InBackground {
-			get { return in_background; }
-		}
-
-		public override bool IsSourceOperation {
-			get { return true; }
-		}
-
-		protected override void DoExecute ()
-		{
-			if (!until.IsNull)
-				sse.do_continue (until);
-			else
-				sse.do_continue ();
-		}
-
-		public override bool ResumeOperation ()
-		{
-			Report.Debug (DebugFlags.SSE, "{0} resuming operation {1}", sse, this);
-
-			sse.do_continue ();
-			return true;
-		}
-
-		protected override EventResult DoProcessEvent (Inferior.ChildEvent cevent,
-							       out TargetEventArgs args)
-		{
-			args = null;
-			if (!until.IsNull && inferior.CurrentFrame == until)
-				return EventResult.Completed;
-			Report.Debug (DebugFlags.EventLoop, "{0} received {1} at {2} in {3}",
-				      sse, cevent, inferior.CurrentFrame, this);
-			if ((cevent.Type == Inferior.ChildEventType.CHILD_HIT_BREAKPOINT) ||
-			    (cevent.Type == Inferior.ChildEventType.CHILD_CALLBACK) ||
-			    (cevent.Type == Inferior.ChildEventType.RUNTIME_INVOKE_DONE))
-				return EventResult.Completed;
-			Execute ();
-			return EventResult.Running;
-		}
-
-		public override bool HandleException (TargetAddress stack, TargetAddress exc)
-		{
-			return false;
-		}
-	}
-
 	protected class OperationFinish : OperationStepBase
 	{
 		public readonly bool Native;
diff --git a/backend/ThreadServant.cs b/backend/ThreadServant.cs
index d3433cb..3399ff6 100644
--- a/backend/ThreadServant.cs
+++ b/backend/ThreadServant.cs
@@ -150,42 +150,18 @@ namespace Mono.Debugger.Backend
 
 		public abstract Backtrace GetBacktrace (Backtrace.Mode mode, int max_frames);
 
-		public abstract ThreadCommandResult Step (StepMode mode, StepFrame frame);
-
-		// <summary>
-		//   Step one machine instruction, but don't step into trampolines.
-		// </summary>
-		public abstract void StepInstruction (CommandResult result);
-
-		// <summary>
-		//   Step one machine instruction, always step into method calls.
-		// </summary>
-		public abstract void StepNativeInstruction (CommandResult result);
-
-		// <summary>
-		//   Step one machine instruction, but step over method calls.
-		// </summary>
-		public abstract void NextInstruction (CommandResult result);
-
-		// <summary>
-		//   Step one source line.
-		// </summary>
-		public abstract void StepLine (CommandResult result);
+		public ThreadCommandResult Step (StepMode mode)
+		{
+			return Step (mode, null);
+		}
 
-		// <summary>
-		//   Step one source line, but step over method calls.
-		// </summary>
-		public abstract void NextLine (CommandResult result);
+		public abstract ThreadCommandResult Step (StepMode mode, StepFrame frame);
 
 		// <summary>
 		//   Continue until leaving the current method.
 		// </summary>
 		public abstract void Finish (bool native, CommandResult result);
 
-		public abstract void Continue (TargetAddress until, CommandResult result);
-
-		public abstract void Background (TargetAddress until, CommandResult result);
-
 		public abstract void Kill ();
 
 		public abstract void Detach ();
diff --git a/backend/arch/CoreFile.cs b/backend/arch/CoreFile.cs
index 59979dc..d48c9f2 100644
--- a/backend/arch/CoreFile.cs
+++ b/backend/arch/CoreFile.cs
@@ -509,46 +509,11 @@ namespace Mono.Debugger.Backend
 				throw new InvalidOperationException ();
 			}
 
-			public override void StepInstruction (CommandResult result)
-			{
-				throw new InvalidOperationException ();
-			}
-
-			public override void StepNativeInstruction (CommandResult result)
-			{
-				throw new InvalidOperationException ();
-			}
-
-			public override void NextInstruction (CommandResult result)
-			{
-				throw new InvalidOperationException ();
-			}
-
-			public override void StepLine (CommandResult result)
-			{
-				throw new InvalidOperationException ();
-			}
-
-			public override void NextLine (CommandResult result)
-			{
-				throw new InvalidOperationException ();
-			}
-
 			public override void Finish (bool native, CommandResult result)
 			{
 				throw new InvalidOperationException ();
 			}
 
-			public override void Continue (TargetAddress until, CommandResult result)
-			{
-				throw new InvalidOperationException ();
-			}
-
-			public override void Background (TargetAddress until, CommandResult result)
-			{
-				throw new InvalidOperationException ();
-			}
-
 			public override void Kill ()
 			{ }
 
diff --git a/classes/GUIManager.cs b/classes/GUIManager.cs
index 9abcef9..87f0a75 100644
--- a/classes/GUIManager.cs
+++ b/classes/GUIManager.cs
@@ -352,7 +352,7 @@ namespace Mono.Debugger
 		{
 			protected override void DoRun ()
 			{
-				Thread.ThreadServant.Continue (TargetAddress.Null, null);
+				Thread.ThreadServant.Step (StepMode.Run);
 			}
 		}
 
@@ -360,7 +360,7 @@ namespace Mono.Debugger
 		{
 			protected override void DoRun ()
 			{
-				Thread.ThreadServant.StepLine (null);
+				Thread.ThreadServant.Step (StepMode.SourceLine);
 			}
 		}
 
@@ -368,7 +368,7 @@ namespace Mono.Debugger
 		{
 			protected override void DoRun ()
 			{
-				Thread.ThreadServant.NextLine (null);
+				Thread.ThreadServant.Step (StepMode.NextLine);
 			}
 		}
 

--------------1.5.6--



From 6f14a6db78f2d8002feaf06522efb8eaa8ad022d Mon Sep 17 00:00:00 2001
From: Martin Baulig <martin@novell.com>
Date: Wed, 8 Jul 2009 18:08:53 +0200
Subject: [PATCH] Merge 'SSE.OperationFinish' into 'OperationStep'; add 'StepMode.FinishNative'.
 2009-07-08  Martin Baulig  <martin@ximian.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------1.5.6"

This is a multi-part message in MIME format.
--------------1.5.6
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit


	* classes/StepFrame.cs
	(StepMode.FinishNative): Added.

	* backend/SingleSteppingEngine.cs
	(SSE.OperationFinish): Removed; use `OperationStep' with
	`StepMode.Finish' or `StepMode.FinishNative'.

	* backend/ThreadServant.cs
	(ThreadServant.Finish): Removed, use the new Step() API.

	* classes/Thread.cs
	(Thread.Finish): Use the new Step() API.
---
 ChangeLog                       |   15 ++++++
 backend/SingleSteppingEngine.cs |  107 ++++++---------------------------------
 backend/ThreadServant.cs        |    5 --
 backend/arch/CoreFile.cs        |    5 --
 classes/GUIManager.cs           |    6 ++-
 classes/StepFrame.cs            |   22 ++++++---
 classes/Thread.cs               |   21 +++++++-
 7 files changed, 68 insertions(+), 113 deletions(-)
--------------1.5.6
Content-Type: text/x-patch; name="6f14a6db78f2d8002feaf06522efb8eaa8ad022d.diff"
Content-Transfer-Encoding: 8bit
Content-Disposition: inline; filename="6f14a6db78f2d8002feaf06522efb8eaa8ad022d.diff"

diff --git a/ChangeLog b/ChangeLog
index 08eafa7..29b5e30 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,20 @@
 2009-07-08  Martin Baulig  <martin@ximian.com>
 
+	* classes/StepFrame.cs
+	(StepMode.FinishNative): Added.
+
+	* backend/SingleSteppingEngine.cs
+	(SSE.OperationFinish): Removed; use `OperationStep' with
+	`StepMode.Finish' or `StepMode.FinishNative'.
+
+	* backend/ThreadServant.cs
+	(ThreadServant.Finish): Removed, use the new Step() API.
+
+	* classes/Thread.cs
+	(Thread.Finish): Use the new Step() API.
+
+2009-07-08  Martin Baulig  <martin@ximian.com>
+
 	* backend/SingleSteppingEngine.cs
 	(SSE.OperationRun): Removed; use `OperationStep' with `StepMode.Run'.
 
diff --git a/backend/SingleSteppingEngine.cs b/backend/SingleSteppingEngine.cs
index dbb362b..ff17575 100644
--- a/backend/SingleSteppingEngine.cs
+++ b/backend/SingleSteppingEngine.cs
@@ -1689,11 +1689,6 @@ namespace Mono.Debugger.Backend
 			return result;
 		}
 
-		public override void Finish (bool native, CommandResult result)
-		{
-			StartOperation (new OperationFinish (this, native, result));
-		}
-
 		public override void RuntimeInvoke (TargetFunctionType function,
 						    TargetStructObject object_argument,
 						    TargetObject[] param_objects,
@@ -3188,6 +3183,7 @@ namespace Mono.Debugger.Backend
 				break;
 
 			case StepMode.Finish:
+			case StepMode.FinishNative:
 				Step (true);
 				break;
 
@@ -3290,6 +3286,20 @@ namespace Mono.Debugger.Backend
 				return false;
 			}
 
+			if (StepMode == StepMode.FinishNative) {
+				Inferior.StackFrame frame = inferior.GetCurrentFrame ();
+				TargetAddress stack = frame.StackPointer;
+
+				Report.Debug (DebugFlags.SSE,
+					      "{0} finish native: stack = {1}, " +
+					      "until = {2}", sse, stack, StepFrame.Until);
+
+				if (stack <= StepFrame.Until) {
+					sse.do_next ();
+					return false;
+				}
+			}
+
 		again:
 			bool in_frame = sse.is_in_step_frame (StepFrame, current_frame);
 			Report.Debug (DebugFlags.SSE, "{0} stepping at {1} in {2} ({3}in frame)",
@@ -3412,93 +3422,6 @@ namespace Mono.Debugger.Backend
 		}
 	}
 
-	protected class OperationFinish : OperationStepBase
-	{
-		public readonly bool Native;
-
-		public OperationFinish (SingleSteppingEngine sse, bool native, CommandResult result)
-			: base (sse, result)
-		{
-			this.Native = native;
-		}
-
-		public override bool IsSourceOperation {
-			get { return !Native; }
-		}
-
-		StepFrame step_frame;
-		TargetAddress until;
-
-		protected override void DoExecute ()
-		{
-			if (!Native) {
-				StackFrame frame = sse.CurrentFrame;
-				if (frame.Method == null)
-					throw new TargetException (TargetError.NoMethod);
-
-				step_frame = new StepFrame (
-					frame.Method.StartAddress, frame.Method.EndAddress,
-					frame, null, StepMode.Finish);
-			} else {
-				Inferior.StackFrame frame = inferior.GetCurrentFrame ();
-				until = frame.StackPointer;
-
-				Report.Debug (DebugFlags.SSE,
-					      "{0} starting finish native until {1} {2}",
-					      sse, until, sse.temp_breakpoint);
-			}
-
-			sse.do_next ();
-		}
-
-		public override bool ResumeOperation ()
-		{
-			Report.Debug (DebugFlags.SSE, "{0} resuming operation {1}", sse, this);
-
-			if (sse.temp_breakpoint != null) {
-				inferior.Continue ();
-				return true;
-			}
-
-			return !DoProcessEvent ();
-		}
-
-		protected override bool DoProcessEvent ()
-		{
-			if (step_frame != null) {
-				bool in_frame = sse.is_in_step_frame (step_frame, inferior.CurrentFrame);
-				Report.Debug (DebugFlags.SSE,
-					      "{0} finish {1} at {2} ({3}", sse, step_frame,
-					      inferior.CurrentFrame, in_frame);
-
-				if (!in_frame)
-					return true;
-
-				sse.do_next ();
-				return false;
-			}
-
-			Inferior.StackFrame frame = inferior.GetCurrentFrame ();
-			TargetAddress stack = frame.StackPointer;
-
-			Report.Debug (DebugFlags.SSE,
-				      "{0} finish native: stack = {1}, " +
-				      "until = {2}", sse, stack, until);
-
-			if (stack <= until) {
-				sse.do_next ();
-				return false;
-			}
-
-			return true;
-		}
-
-		protected override bool TrampolineHandler (Method method)
-		{
-			return false;
-		}
-	}
-
 	protected abstract class OperationCallback : Operation
 	{
 		public readonly long ID = ++next_id;
diff --git a/backend/ThreadServant.cs b/backend/ThreadServant.cs
index 3399ff6..3976a12 100644
--- a/backend/ThreadServant.cs
+++ b/backend/ThreadServant.cs
@@ -157,11 +157,6 @@ namespace Mono.Debugger.Backend
 
 		public abstract ThreadCommandResult Step (StepMode mode, StepFrame frame);
 
-		// <summary>
-		//   Continue until leaving the current method.
-		// </summary>
-		public abstract void Finish (bool native, CommandResult result);
-
 		public abstract void Kill ();
 
 		public abstract void Detach ();
diff --git a/backend/arch/CoreFile.cs b/backend/arch/CoreFile.cs
index d48c9f2..abb741e 100644
--- a/backend/arch/CoreFile.cs
+++ b/backend/arch/CoreFile.cs
@@ -509,11 +509,6 @@ namespace Mono.Debugger.Backend
 				throw new InvalidOperationException ();
 			}
 
-			public override void Finish (bool native, CommandResult result)
-			{
-				throw new InvalidOperationException ();
-			}
-
 			public override void Kill ()
 			{ }
 
diff --git a/classes/GUIManager.cs b/classes/GUIManager.cs
index 87f0a75..88fe107 100644
--- a/classes/GUIManager.cs
+++ b/classes/GUIManager.cs
@@ -376,7 +376,11 @@ namespace Mono.Debugger
 		{
 			protected override void DoRun ()
 			{
-				Thread.ThreadServant.Finish (false, null);
+				StepFrame step_frame = new StepFrame (
+					Thread.CurrentMethod.StartAddress, Thread.CurrentMethod.EndAddress,
+					Thread.CurrentFrame, null, StepMode.Finish);
+
+				Thread.ThreadServant.Step (StepMode.Finish, step_frame);
 			}
 		}
 
diff --git a/classes/StepFrame.cs b/classes/StepFrame.cs
index 732798b..b8a4074 100644
--- a/classes/StepFrame.cs
+++ b/classes/StepFrame.cs
@@ -48,7 +48,9 @@ namespace Mono.Debugger
 		//   Single-step until leaving the specified step frame and never enter any
 		//   methods.
 		// </summary>
-		Finish
+		Finish,
+
+		FinishNative
 	}
 
 	[Serializable]
@@ -59,16 +61,16 @@ namespace Mono.Debugger
 		StackFrame stack;
 		StepMode mode;
 
-		internal StepFrame (Language language, StepMode mode)
+		public StepFrame (Language language, StepMode mode)
 			: this (TargetAddress.Null, TargetAddress.Null, null, language, mode)
 		{ }
 
-		internal StepFrame (Language language, TargetAddress until)
-			: this (TargetAddress.Null, until, null, language, StepMode.Run)
+		public StepFrame (Language language, StepMode mode, TargetAddress until)
+			: this (TargetAddress.Null, until, null, language, mode)
 		{ }
 
-		internal StepFrame (TargetAddress start, TargetAddress end, StackFrame stack,
-				    Language language, StepMode mode)
+		public StepFrame (Language language, StepMode mode, StackFrame stack,
+				  TargetAddress start, TargetAddress end)
 		{
 			this.start = start;
 			this.end = end;
@@ -77,6 +79,12 @@ namespace Mono.Debugger
 			this.mode = mode;
 		}
 
+		[Obsolete]
+		internal StepFrame (TargetAddress start, TargetAddress end, StackFrame stack,
+				    Language language, StepMode mode)
+			: this (language, mode, stack, start, end)
+		{ }
+
 		public StepMode Mode {
 			get {
 				return mode;
@@ -97,7 +105,7 @@ namespace Mono.Debugger
 
 		public TargetAddress Until {
 			get {
-				if (mode != StepMode.Run)
+				if ((mode != StepMode.Run) && (mode != StepMode.FinishNative))
 					throw new InvalidOperationException ();
 
 				return end;
diff --git a/classes/Thread.cs b/classes/Thread.cs
index 340af9e..6959f77 100644
--- a/classes/Thread.cs
+++ b/classes/Thread.cs
@@ -356,8 +356,23 @@ namespace Mono.Debugger
 			lock (this) {
 				check_alive ();
 				ThreadCommandResult result = new OperationCommandResult (this);
-				servant.Finish (native, result);
-				return result;
+
+				if (!native) {
+					if (CurrentMethod == null)
+						throw new TargetException (TargetError.NoMethod);
+
+					StepFrame step_frame = new StepFrame (
+						CurrentMethod.StartAddress, CurrentMethod.EndAddress,
+						CurrentFrame, null, StepMode.Finish);
+
+					return Step (StepMode.Finish, step_frame);
+				} else {
+					StepFrame step_frame = new StepFrame (
+						CurrentFrame.Language, StepMode.FinishNative,
+						CurrentFrame.StackPointer);
+
+					return Step (StepMode.FinishNative, step_frame);
+				}
 			}
 		}
 
@@ -370,7 +385,7 @@ namespace Mono.Debugger
 		[Obsolete("Use the new Step() API")]
 		public ThreadCommandResult Continue (TargetAddress until)
 		{
-			return Step (StepMode.Run, new StepFrame (NativeLanguage, until));
+			return Step (StepMode.Run, new StepFrame (NativeLanguage, StepMode.Run, until));
 		}
 
 		[Obsolete("Background() and Continue() are the same")]

--------------1.5.6--



From d3468a18ed9f298fb1123839d324f3c93daf5360 Mon Sep 17 00:00:00 2001
From: Martin Baulig <martin@novell.com>
Date: Wed, 8 Jul 2009 18:20:16 +0200
Subject: [PATCH] Remove the StepFrame's obsolete .ctor.
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------1.5.6"

This is a multi-part message in MIME format.
--------------1.5.6
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit

---
 backend/SingleSteppingEngine.cs |   31 +++++++++++++++++--------------
 classes/GUIManager.cs           |    4 ++--
 classes/StepFrame.cs            |   10 ++--------
 classes/Thread.cs               |    6 +++---
 4 files changed, 24 insertions(+), 27 deletions(-)
--------------1.5.6
Content-Type: text/x-patch; name="d3468a18ed9f298fb1123839d324f3c93daf5360.diff"
Content-Transfer-Encoding: 8bit
Content-Disposition: inline; filename="d3468a18ed9f298fb1123839d324f3c93daf5360.diff"

diff --git a/backend/SingleSteppingEngine.cs b/backend/SingleSteppingEngine.cs
index ff17575..c7af647 100644
--- a/backend/SingleSteppingEngine.cs
+++ b/backend/SingleSteppingEngine.cs
@@ -1223,23 +1223,26 @@ namespace Mono.Debugger.Backend
 				// happens when returning from a method call; in this
 				// case, we need to continue stepping until we reach the
 				// next source line.
-				return new OperationStep (this, new StepFrame (
-					address - source.LineOffset, address + source.LineRange,
-					null, language, StepMode.SourceLine), operation.Result);
+				StepFrame sframe = new StepFrame (
+					language, StepMode.SourceLine, null,
+					address - source.LineOffset, address + source.LineRange);
+				return new OperationStep (this, sframe, operation.Result);
 			}
 
 			LineNumberTable lnt = method.LineNumberTable;
 			if (lnt.HasMethodBounds && (address < lnt.MethodStartAddress)) {
-				return new OperationStep (this, new StepFrame (
-					method.StartAddress, lnt.MethodStartAddress, null,
-					null, StepMode.Finish), operation.Result);
+				StepFrame sframe = new StepFrame (
+					null, StepMode.Finish, null,
+					method.StartAddress, lnt.MethodStartAddress);
+				return new OperationStep (this, sframe, operation.Result);
 			} else if (method.HasMethodBounds && (address < method.MethodStartAddress)) {
 				// Do not stop inside a method's prologue code, but stop
 				// immediately behind it (on the first instruction of the
 				// method's actual code).
-				return new OperationStep (this, new StepFrame (
-					method.StartAddress, method.MethodStartAddress, null,
-					null, StepMode.Finish), operation.Result);
+				StepFrame sframe = new StepFrame (
+					null, StepMode.Finish, null,
+					method.StartAddress, method.MethodStartAddress);
+				return new OperationStep (this, sframe, operation.Result);
 			}
 
 			return null;
@@ -1454,7 +1457,7 @@ namespace Mono.Debugger.Backend
 			TargetAddress start = frame.TargetAddress - offset;
 			TargetAddress end = frame.TargetAddress + range;
 
-			return new StepFrame (start, end, frame, language, StepMode.StepFrame);
+			return new StepFrame (language, StepMode.StepFrame, frame, start, end);
 		}
 
 		// <summary>
@@ -3171,8 +3174,8 @@ namespace Mono.Debugger.Backend
 					sse.do_next ();
 				else {
 					StepFrame = new StepFrame (
-						frame.Start, frame.End, frame.StackFrame,
-						null, StepMode.Finish);
+						null, StepMode.Finish, frame.StackFrame,
+						frame.Start, frame.End);
 					Step (true);
 				}
 				break;
@@ -3266,8 +3269,8 @@ namespace Mono.Debugger.Backend
 				Report.Debug (DebugFlags.SSE, "{0} reached method epilogue: {1} {2} {3}",
 					      sse, current_frame, lnt.MethodEndAddress, method.EndAddress);
 				StepFrame = new StepFrame (
-					lnt.MethodEndAddress, method.EndAddress,
-					null, null, StepMode.Finish);
+					null, StepMode.Finish, null,
+					lnt.MethodEndAddress, method.EndAddress);
 				return true;
 			}
 
diff --git a/classes/GUIManager.cs b/classes/GUIManager.cs
index 88fe107..bc3696d 100644
--- a/classes/GUIManager.cs
+++ b/classes/GUIManager.cs
@@ -377,8 +377,8 @@ namespace Mono.Debugger
 			protected override void DoRun ()
 			{
 				StepFrame step_frame = new StepFrame (
-					Thread.CurrentMethod.StartAddress, Thread.CurrentMethod.EndAddress,
-					Thread.CurrentFrame, null, StepMode.Finish);
+					null, StepMode.Finish, null,
+					Thread.CurrentMethod.StartAddress, Thread.CurrentMethod.EndAddress);
 
 				Thread.ThreadServant.Step (StepMode.Finish, step_frame);
 			}
diff --git a/classes/StepFrame.cs b/classes/StepFrame.cs
index b8a4074..52aa2a3 100644
--- a/classes/StepFrame.cs
+++ b/classes/StepFrame.cs
@@ -62,11 +62,11 @@ namespace Mono.Debugger
 		StepMode mode;
 
 		public StepFrame (Language language, StepMode mode)
-			: this (TargetAddress.Null, TargetAddress.Null, null, language, mode)
+			: this (language, mode, null, TargetAddress.Null, TargetAddress.Null)
 		{ }
 
 		public StepFrame (Language language, StepMode mode, TargetAddress until)
-			: this (TargetAddress.Null, until, null, language, mode)
+			: this (language, mode, null, TargetAddress.Null, until)
 		{ }
 
 		public StepFrame (Language language, StepMode mode, StackFrame stack,
@@ -79,12 +79,6 @@ namespace Mono.Debugger
 			this.mode = mode;
 		}
 
-		[Obsolete]
-		internal StepFrame (TargetAddress start, TargetAddress end, StackFrame stack,
-				    Language language, StepMode mode)
-			: this (language, mode, stack, start, end)
-		{ }
-
 		public StepMode Mode {
 			get {
 				return mode;
diff --git a/classes/Thread.cs b/classes/Thread.cs
index 6959f77..4ef21b0 100644
--- a/classes/Thread.cs
+++ b/classes/Thread.cs
@@ -362,13 +362,13 @@ namespace Mono.Debugger
 						throw new TargetException (TargetError.NoMethod);
 
 					StepFrame step_frame = new StepFrame (
-						CurrentMethod.StartAddress, CurrentMethod.EndAddress,
-						CurrentFrame, null, StepMode.Finish);
+						null, StepMode.Finish, null,
+						CurrentMethod.StartAddress, CurrentMethod.EndAddress);
 
 					return Step (StepMode.Finish, step_frame);
 				} else {
 					StepFrame step_frame = new StepFrame (
-						CurrentFrame.Language, StepMode.FinishNative,
+						null, StepMode.FinishNative,
 						CurrentFrame.StackPointer);
 
 					return Step (StepMode.FinishNative, step_frame);

--------------1.5.6--


