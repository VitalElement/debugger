\input texinfo    @c -*-texinfo-*-

@setfilename user-manual.info

@ifnottex
@node Top, Thread Groups, (dir), (dir)
@top User Manual
@end ifnottex

@menu
* Thread Groups::               Thread Groups
* Breakpoints::                 Breakpoints
* Method lookups::              Method lookups
@end menu

@node Thread Groups, Breakpoints, Top, Top
@chapter Thread Groups

A @dfn{Thread Group} is a collection of processes which is identified by
a name.  It is used when saving a debugging session to disk: the
debugger can only write the name of the thread group to disk, but not
the process IDs since they wouldn't have any meaning when the session is
loaded.

This means that you must manually tell the debugger which threads belong
to a particular thread group after loading the session.

There are two predefined thread groups:

@table @samp
@item main
This is always the main thread of the current application.
@item global
Refers to all debuggable threads.
@end table

To create a new thread group, use the @code{threadgroup create} command:

@example
threadgroup create "foo"
threadgroup create "bar" 2,3
@end example

You can add/remove threads with the @code{threadgroup add} and
@code{threadgroup remove} commands:

@example
threadgroup add "foo" 2
threadgroup remove "bar" 3
@end example

To get a list of all currently defined thread groups, use @code{show threadgroups}.

@node Breakpoints, Method lookups, Thread Groups, Top
@chapter Breakpoints

Breakpoints are always inserted on a thread group (@pxref{Thread
Groups}) and break on all the threads in the thread group.  You can add
or remove threads to this thread group after the breakpoint has been
created.

When a debugging session is saved to disk, the debugger only saves the
thread group name and not the particular process IDs.  When the session
is loaded, you manually need to put the threads into the thread group.

The @code{break} command takes an optional thread group argument, which
defaults to the @samp{main} group, the application's main thread:

@example
break "hello"
break <global> "foo"
break <foo> "test.c" 84
@end example

@node Method lookups,  , Breakpoints, Top
@chapter Method lookups

There are several ways to insert a breakpoint:

@table @asis
@item Specifying a full method name:

One way to insert a breakpoint is specifying the full method name in double quotes.  For managed functions, this is the name of the method, including its full class name (including the namespace) and the argument list:

@example
break "some_unmanaged_function"
break "X.Test(System.Int32)"
@end example

@item Source file and line number:

You may also specify a source file name in double quotes followed by a line number:

@example
break "Foo.cs" 18
@end example

@item Just the line number:

If you're currently debugging a method which has source code, then you can also omit the file name and just specify the line number.

The following will insert a breakpoint on line 18 in the current method:

@example
break 18
@end example

This version also supports the process / frame prefix:

@example
break #3 18
break @@2 18
break @@2 #1 18
@end example

@item Managed method in the same class:

If you're currently debugging a managed method, you can specify the name of a method in the same class without quotes:

@example
break Test
@end example

If the requested method has several overloaded versions, you'll be presented with a list:

@example
$ break Test
More than one method matches your query:
   1  X.Test(System.Int32)
   2  X.Test(System.Single)
$ break !1
Inserted breakpoint 1.
@end example

@item Result of a method lookup:

If you've previously searched a method, you may specify an item in the search history by prefixing its number with an exclamation mark:

@example
break !2
@end example

@end table

